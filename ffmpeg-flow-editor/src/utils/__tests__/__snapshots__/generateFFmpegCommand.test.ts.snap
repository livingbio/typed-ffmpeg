// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateFFmpegCommand > generates basic input-output-global chain command 1`] = `
{
  "error": null,
  "result": "ffmpeg -i input.mp4 -map 0 output.mp4",
}
`;

exports[`generateFFmpegCommand > generates command with filter nodes, output and global node 1`] = `
{
  "error": null,
  "result": "ffmpeg -i input.mp4 -filter_complex '[0]scale=width=640:height=480[s0]' -map '[s0]' output.mp4",
}
`;

exports[`generateFFmpegCommand > handles complex filter chains with outputs to global node 1`] = `
{
  "error": null,
  "result": "ffmpeg -i input.mp4 -filter_complex '[0]scale=width=640:height=480[s0];[0]volume=volume=2[s1]' -map '[s0]' -map '[s1]' output.mp4",
}
`;

exports[`generateFFmpegCommand > handles disconnected nodes with global node 1`] = `
{
  "error": null,
  "result": "ffmpeg",
}
`;

exports[`generateFFmpegCommand > handles multiple input nodes and outputs to global node 1`] = `
{
  "error": null,
  "result": "ffmpeg -i input1.mp4 -i input2.mp4 -map 0 -map 1 output.mp4",
}
`;

exports[`generateFFmpegCommand > handles numeric and boolean parameters correctly with outputs to global node 1`] = `
{
  "error": null,
  "result": "ffmpeg -i input.mp4 -filter_complex '[0]scale=width=640:height=480:force_original_aspect_ratio=1[s0]' -map '[s0]' output.mp4",
}
`;

exports[`generateFFmpegCommand > returns error message if no input or output nodes 1`] = `
{
  "error": null,
  "result": "ffmpeg",
}
`;

exports[`generateFFmpegPythonCode > generates basic input-output-global chain 1`] = `
{
  "error": null,
  "result": "import ffmpeg
result = ffmpeg.input('input.mp4').output(filename='output.mp4').global_args()",
}
`;

exports[`generateFFmpegPythonCode > generates code with filter nodes, output and global node 1`] = `
{
  "error": null,
  "result": "import ffmpeg
result = ffmpeg.input('input.mp4').scale(width=640, height=480).output(filename='output.mp4').global_args()",
}
`;

exports[`generateFFmpegPythonCode > handles complex filter chains with outputs to global node 1`] = `
{
  "error": null,
  "result": "import ffmpeg
input_0 = ffmpeg.input('input.mp4')
result = ffmpeg.output(input_0.scale(width=640, height=480), input_0.volume(volume=2), filename='output.mp4').global_args()",
}
`;

exports[`generateFFmpegPythonCode > handles disconnected nodes with global node 1`] = `
{
  "error": "tuple index out of range",
  "result": "# Error: tuple index out of range

from ffmpeg.common.serialize import loads
from ffmpeg.compile.compile_python import compile
from ffmpeg.dag.nodes import GlobalStream

# Load the JSON string
json_str = '''{"node":{"kwargs":{},"inputs":[],"__class__":"GlobalNode"},"index":null,"__class__":"GlobalStream"}'''

try:
  # Load the stream from JSON
  stream = loads(json_str)

  # Compile to Python code
  result = compile(stream)
  
  # Return both the Python code and the FFmpeg command
  return {
      'result': result,
      'error': None
  }
except Exception as e:
  print(f"ERROR: {str(e)}")
  return {
      'result': f"# Error: {str(e)}",
      'error': str(e)
  }
",
}
`;

exports[`generateFFmpegPythonCode > handles empty result from Python execution 1`] = `
{
  "error": "tuple index out of range",
  "result": "# Error: tuple index out of range

from ffmpeg.common.serialize import loads
from ffmpeg.compile.compile_python import compile
from ffmpeg.dag.nodes import GlobalStream

# Load the JSON string
json_str = '''{"node":{"kwargs":{},"inputs":[],"__class__":"GlobalNode"},"index":null,"__class__":"GlobalStream"}'''

try:
  # Load the stream from JSON
  stream = loads(json_str)

  # Compile to Python code
  result = compile(stream)
  
  # Return both the Python code and the FFmpeg command
  return {
      'result': result,
      'error': None
  }
except Exception as e:
  print(f"ERROR: {str(e)}")
  return {
      'result': f"# Error: {str(e)}",
      'error': str(e)
  }
",
}
`;

exports[`generateFFmpegPythonCode > handles multiple input nodes and outputs to global node 1`] = `
{
  "error": null,
  "result": "import ffmpeg
result = ffmpeg.output(ffmpeg.input('input1.mp4'), ffmpeg.input('input2.mp4'), filename='output.mp4').global_args()",
}
`;

exports[`generateFFmpegPythonCode > handles numeric and boolean parameters correctly with outputs to global node 1`] = `
{
  "error": null,
  "result": "import ffmpeg
result = ffmpeg.input('input.mp4').scale(width=640, height=480, force_original_aspect_ratio=True).output(filename='output.mp4').global_args()",
}
`;

exports[`generateFFmpegPythonCode > returns error message if no input or output nodes 1`] = `
{
  "error": "tuple index out of range",
  "result": "# Error: tuple index out of range

from ffmpeg.common.serialize import loads
from ffmpeg.compile.compile_python import compile
from ffmpeg.dag.nodes import GlobalStream

# Load the JSON string
json_str = '''{"node":{"kwargs":{},"inputs":[],"__class__":"GlobalNode"},"index":null,"__class__":"GlobalStream"}'''

try:
  # Load the stream from JSON
  stream = loads(json_str)

  # Compile to Python code
  result = compile(stream)
  
  # Return both the Python code and the FFmpeg command
  return {
      'result': result,
      'error': None
  }
except Exception as e:
  print(f"ERROR: {str(e)}")
  return {
      'result': f"# Error: {str(e)}",
      'error': str(e)
  }
",
}
`;
