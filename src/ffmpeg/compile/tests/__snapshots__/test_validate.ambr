# serializer version: 1
# name: test_rebuild_graph[amix-stream-2][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)),
    FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)),
    FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)),
    OutputNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[amix-stream-2][all_streams]
  list([
    AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
    AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
    AudioStream(node=FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
  ])
# ---
# name: test_rebuild_graph[amix-stream-2][outgoing_nodes]
  defaultdict({
    AudioStream(node=FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
    AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)),
        1,
      ),
    ]),
    AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)),
        0,
      ),
      tuple(
        FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)),
        0,
      ),
    ]),
    AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[amix-stream-2][outgoing_streams]
  defaultdict({
    FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)): list([
      AudioStream(node=FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)): list([
      AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)): list([
      AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[amix-stream][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)),
    FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)),
    FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)),
    OutputNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[amix-stream][all_streams]
  list([
    AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
    AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
    AudioStream(node=FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
  ])
# ---
# name: test_rebuild_graph[amix-stream][outgoing_nodes]
  defaultdict({
    AudioStream(node=FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
    AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)),
        0,
      ),
    ]),
    AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)),
        1,
      ),
      tuple(
        FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)),
        0,
      ),
    ]),
    AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[amix-stream][outgoing_streams]
  defaultdict({
    FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)): list([
      AudioStream(node=FilterNode(kwargs=FrozenDict({'inputs': 2, 'duration': 'first'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='amix', input_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)): list([
      AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)): list([
      AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[complex-stream][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'),
    FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
    FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)),
    FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=1, optional=False)), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[complex-stream][all_streams]
  list([
    VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=0, optional=False),
    AudioStream(node=FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=1, optional=False),
  ])
# ---
# name: test_rebuild_graph[complex-stream][outgoing_nodes]
  defaultdict({
    AudioStream(node=FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=1, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=1, optional=False)), filename='tmp.mp4'),
        1,
      ),
    ]),
    AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)),
        1,
      ),
      tuple(
        FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)),
        3,
      ),
    ]),
    AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=1, optional=False)), filename='tmp.mp4'),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)),
        0,
      ),
      tuple(
        FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)),
        2,
      ),
    ]),
    VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[complex-stream][outgoing_streams]
  defaultdict({
    FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=0, optional=False),
      AudioStream(node=FilterNode(kwargs=FrozenDict({'n': 2, 'v': 1, 'a': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=1, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)): list([
      AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'): list([
      AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[global-args-2][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'),
    GlobalNode(kwargs=FrozenDict({'hide_banner': True, 'dump': True}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False),)),
  ])
# ---
# name: test_rebuild_graph[global-args-2][all_streams]
  list([
    VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False),
  ])
# ---
# name: test_rebuild_graph[global-args-2][outgoing_nodes]
  defaultdict({
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False): list([
      tuple(
        GlobalNode(kwargs=FrozenDict({'hide_banner': True, 'dump': True}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False),)),
        0,
      ),
    ]),
    VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[global-args-2][outgoing_streams]
  defaultdict({
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    ]),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'): list([
      OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[global-args][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'),
    GlobalNode(kwargs=FrozenDict({'hide_banner': True}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False),)),
  ])
# ---
# name: test_rebuild_graph[global-args][all_streams]
  list([
    VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False),
  ])
# ---
# name: test_rebuild_graph[global-args][outgoing_nodes]
  defaultdict({
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False): list([
      tuple(
        GlobalNode(kwargs=FrozenDict({'hide_banner': True}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False),)),
        0,
      ),
    ]),
    VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[global-args][outgoing_streams]
  defaultdict({
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    ]),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'): list([
      OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[merged-output-1][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'),
    OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='output1.mp4'),
    OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), filename='output2.mp4'),
    GlobalNode(kwargs=FrozenDict({'dump': True}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='output1.mp4'), index=None, optional=False), OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), filename='output2.mp4'), index=None, optional=False))),
  ])
# ---
# name: test_rebuild_graph[merged-output-1][all_streams]
  list([
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='output1.mp4'), index=None, optional=False),
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), filename='output2.mp4'), index=None, optional=False),
  ])
# ---
# name: test_rebuild_graph[merged-output-1][outgoing_nodes]
  defaultdict({
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='output1.mp4'),
        0,
      ),
    ]),
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), filename='output2.mp4'),
        0,
      ),
    ]),
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='output1.mp4'), index=None, optional=False): list([
      tuple(
        GlobalNode(kwargs=FrozenDict({'dump': True}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='output1.mp4'), index=None, optional=False), OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), filename='output2.mp4'), index=None, optional=False))),
        0,
      ),
    ]),
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), filename='output2.mp4'), index=None, optional=False): list([
      tuple(
        GlobalNode(kwargs=FrozenDict({'dump': True}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='output1.mp4'), index=None, optional=False), OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), filename='output2.mp4'), index=None, optional=False))),
        1,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[merged-output-1][outgoing_streams]
  defaultdict({
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'): list([
      AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),
    ]),
    OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='output1.mp4'): list([
      OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='output1.mp4'), index=None, optional=False),
    ]),
    OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), filename='output2.mp4'): list([
      OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),), filename='output2.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[multi-output-filter][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'),
    FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)),
    FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
    FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output1.mp4'),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output2.mp4'),
    GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output1.mp4'), index=None, optional=False), OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output2.mp4'), index=None, optional=False))),
  ])
# ---
# name: test_rebuild_graph[multi-output-filter][all_streams]
  list([
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output1.mp4'), index=None, optional=False),
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output2.mp4'), index=None, optional=False),
  ])
# ---
# name: test_rebuild_graph[multi-output-filter][outgoing_nodes]
  defaultdict({
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)),
        0,
      ),
    ]),
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)),
        1,
      ),
    ]),
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output1.mp4'), index=None, optional=False): list([
      tuple(
        GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output1.mp4'), index=None, optional=False), OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output2.mp4'), index=None, optional=False))),
        0,
      ),
    ]),
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output2.mp4'), index=None, optional=False): list([
      tuple(
        GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output1.mp4'), index=None, optional=False), OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output2.mp4'), index=None, optional=False))),
        1,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output1.mp4'),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output2.mp4'),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[multi-output-filter][outgoing_streams]
  defaultdict({
    FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),
      VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'): list([
      AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False),
    ]),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output1.mp4'): list([
      OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output1.mp4'), index=None, optional=False),
    ]),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output2.mp4'): list([
      OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None, optional=False)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='output2.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[not-utilize-split][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
    FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[not-utilize-split][all_streams]
  list([
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),
  ])
# ---
# name: test_rebuild_graph[not-utilize-split][outgoing_nodes]
  defaultdict({
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[not-utilize-split][outgoing_streams]
  defaultdict({
    FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[redundant-split-duplicate][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
    FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)),
    FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)),
    FilterNode(kwargs=FrozenDict({'n': 3}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 3}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[redundant-split-duplicate][all_streams]
  list([
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 3}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
  ])
# ---
# name: test_rebuild_graph[redundant-split-duplicate][outgoing_nodes]
  defaultdict({
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 3}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 3}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'n': 3}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'n': 3}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)),
        1,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'n': 3}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)),
        2,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[redundant-split-duplicate][outgoing_streams]
  defaultdict({
    FilterNode(kwargs=FrozenDict({'n': 3}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 3}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),
      VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1, optional=False),
      VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[redundant-split-outputs-1][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
    FilterNode(kwargs=FrozenDict({'outputs': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[redundant-split-outputs-1][all_streams]
  list([
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
  ])
# ---
# name: test_rebuild_graph[redundant-split-outputs-1][outgoing_nodes]
  defaultdict({
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'outputs': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[redundant-split-outputs-1][outgoing_streams]
  defaultdict({
    FilterNode(kwargs=FrozenDict({'outputs': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': 1}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[reuse-input][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'),
    FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False), VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False), VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[reuse-input][all_streams]
  list([
    VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False), VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
  ])
# ---
# name: test_rebuild_graph[reuse-input][outgoing_nodes]
  defaultdict({
    VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False), VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False), VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
    VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False), VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)),
        0,
      ),
      tuple(
        FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False), VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)),
        1,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[reuse-input][outgoing_streams]
  defaultdict({
    FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False), VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False), VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'): list([
      VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[reuse-stream][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'),
    FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
    FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[reuse-stream][all_streams]
  list([
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
  ])
# ---
# name: test_rebuild_graph[reuse-stream][outgoing_nodes]
  defaultdict({
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
    VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)),
        0,
      ),
      tuple(
        FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)),
        1,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[reuse-stream][outgoing_streams]
  defaultdict({
    FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({'n': 2}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False), VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    ]),
    FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'): list([
      AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[simple-global-args][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'),
    GlobalNode(kwargs=FrozenDict({'hide_banner': True}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False),)),
  ])
# ---
# name: test_rebuild_graph[simple-global-args][all_streams]
  list([
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False),
  ])
# ---
# name: test_rebuild_graph[simple-global-args][outgoing_nodes]
  defaultdict({
    AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
    OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False): list([
      tuple(
        GlobalNode(kwargs=FrozenDict({'hide_banner': True}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False),)),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[simple-global-args][outgoing_streams]
  defaultdict({
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    ]),
    OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'): list([
      OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[stream-select-with-optional][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    OutputNode(kwargs=FrozenDict({}), inputs=(SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=True),), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[stream-select-with-optional][all_streams]
  list([
    SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=True),
  ])
# ---
# name: test_rebuild_graph[stream-select-with-optional][outgoing_nodes]
  defaultdict({
    SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=True): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=True),), filename='tmp.mp4'),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[stream-select-with-optional][outgoing_streams]
  defaultdict({
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=True),
    ]),
  })
# ---
# name: test_rebuild_graph[stream-selector-with-filter][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[stream-selector-with-filter][all_streams]
  list([
    VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),
    VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
  ])
# ---
# name: test_rebuild_graph[stream-selector-with-filter][outgoing_nodes]
  defaultdict({
    VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
    VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False): list([
      tuple(
        FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[stream-selector-with-filter][outgoing_streams]
  defaultdict({
    FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)): list([
      VideoStream(node=FilterNode(kwargs=FrozenDict({'text': 'Hello World', 'fontsize': 12, 'x': 10, 'y': 10}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0, optional=False),
    ]),
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[stream-selector-with-subtitle-and-index][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    OutputNode(kwargs=FrozenDict({}), inputs=(SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[stream-selector-with-subtitle-and-index][all_streams]
  list([
    SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),
  ])
# ---
# name: test_rebuild_graph[stream-selector-with-subtitle-and-index][outgoing_nodes]
  defaultdict({
    SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[stream-selector-with-subtitle-and-index][outgoing_streams]
  defaultdict({
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[stream-selector-with-subtitle][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    OutputNode(kwargs=FrozenDict({}), inputs=(SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[stream-selector-with-subtitle][all_streams]
  list([
    SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
  ])
# ---
# name: test_rebuild_graph[stream-selector-with-subtitle][outgoing_nodes]
  defaultdict({
    SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[stream-selector-with-subtitle][outgoing_streams]
  defaultdict({
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      SubtitleStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None, optional=False),
    ]),
  })
# ---
# name: test_rebuild_graph[stream-selector][all_nodes]
  list([
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'),
    OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),), filename='tmp.mp4'),
  ])
# ---
# name: test_rebuild_graph[stream-selector][all_streams]
  list([
    VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),
  ])
# ---
# name: test_rebuild_graph[stream-selector][outgoing_nodes]
  defaultdict({
    VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False): list([
      tuple(
        OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),), filename='tmp.mp4'),
        0,
      ),
    ]),
  })
# ---
# name: test_rebuild_graph[stream-selector][outgoing_streams]
  defaultdict({
    InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'): list([
      VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0, optional=False),
    ]),
  })
# ---
