# serializer version: 1
# name: test_parse_compile[amix-stream-2][ffmpeg -i input1.mp4 -filter_complex '[0:a]areverse[s0];[s0]asplit=outputs=2[s1#0][s1#1];[s1#1]areverse[s2];[s1#0][s2]amix=inputs=2:duration=first[s3]' -map '[s3]' tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(), filename='tmp.mp4'), index=None),)), index=None)
# ---
# name: test_parse_compile[amix-stream][ffmpeg -i input1.mp4 -filter_complex '[0:a]areverse[s0];[s0]asplit=outputs=2[s1#0][s1#1];[s1#1]areverse[s2];[s2][s1#0]amix=inputs=2:duration=first[s3]' -map '[s3]' tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(), filename='tmp.mp4'), index=None),)), index=None)
# ---
# name: test_parse_compile[complex-stream][ffmpeg -i input1.mp4 -i input2.mp4 -filter_complex '[0:v]reverse[s0];[1:a]areverse[s1];[s0]split=outputs=2[s2#0][s2#1];[s1]asplit=outputs=2[s3#0][s3#1];[s2#0][s3#0][s2#1][s3#1]concat=n=2:v=1:a=1[s4#0][s4#1]' -map '[s4#0]' -map '[s4#1]' tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({'n': '2', 'v': '1', 'a': '1', 'unsafe': False}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': '2'}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=0), AudioStream(node=FilterNode(kwargs=FrozenDict({'outputs': '2'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0),), name='asplit', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>)), index=0), VideoStream(node=FilterNode(kwargs=FrozenDict({'outputs': '2'}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None),), name='reverse', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0),), name='split', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1), AudioStream(node=FilterNode(kwargs=FrozenDict({'outputs': '2'}), inputs=(AudioStream(node=FilterNode(kwargs=FrozenDict({}), inputs=(AudioStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None),), name='areverse', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>,)), index=0),), name='asplit', input_typings=(<StreamType.audio: 'audio'>,), output_typings=(<StreamType.audio: 'audio'>, <StreamType.audio: 'audio'>)), index=1)), name='concat', input_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>, <StreamType.video: 'video'>, <StreamType.audio: 'audio'>), output_typings=(<StreamType.video: 'video'>, <StreamType.audio: 'audio'>)), index=1),), filename='tmp.mp4'), index=None),)), index=None)
# ---
# name: test_parse_compile[global-args-2][ffmpeg -hide_banner -dump -i input1.mp4 -map 0:v tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None),), filename='tmp.mp4'), index=None),)), index=None)
# ---
# name: test_parse_compile[global-args][ffmpeg -hide_banner -i input1.mp4 -map 0:v tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None),), filename='tmp.mp4'), index=None),)), index=None)
# ---
# name: test_parse_compile[merged-output-1][ffmpeg -dump -i input1.mp4 -i input2.mp4 -map 0 output1.mp4 -map 1 output2.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None),), filename='output1.mp4'), index=None), OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None)), filename='output2.mp4'), index=None))), index=None)
# ---
# name: test_parse_compile[multi-output-filter][ffmpeg -i input1.mp4 -i input2.mp4 -filter_complex '[0][1]feedback[s0#0][s0#1];[s0#0]drawtext=text=Hello World:fontsize=12:x=10:y=10[s1];[s0#1]drawtext=text=Hello World:fontsize=12:x=10:y=10[s2]' -map '[s1]' output1.mp4 -map '[s2]' output2.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(), filename='output1.mp4'), index=None), OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'fontfile': None, 'text': 'Hello World', 'textfile': None, 'fontcolor': 'black', 'fontcolor_expr': '', 'boxcolor': 'white', 'bordercolor': 'black', 'shadowcolor': 'black', 'box': False, 'boxborderw': 0, 'line_spacing': 0, 'fontsize': '12', 'x': '10', 'y': '10', 'shadowx': 0, 'shadowy': 0, 'borderw': 0, 'tabsize': 4, 'basetime': 'I64_MIN', 'font': 'Sans', 'expansion': 'normal', 'timecode': None, 'tc24hmax': False, 'timecode_rate': '0/1', 'reload': 0, 'alpha': '1', 'fix_bounds': False, 'start_number': 0, 'text_source': None, 'text_shaping': True, 'ft_load_flags': '0', 'enable': None}), inputs=(VideoStream(node=FilterNode(kwargs=FrozenDict({'x': 0, 'w': 0}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None), AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input2.mp4'), index=None)), name='feedback', input_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>), output_typings=(<StreamType.video: 'video'>, <StreamType.video: 'video'>)), index=1),), name='drawtext', input_typings=(<StreamType.video: 'video'>,), output_typings=(<StreamType.video: 'video'>,)), index=0),), filename='output2.mp4'), index=None))), index=None)
# ---
# name: test_parse_compile[not-utilize-split][ffmpeg -i input1.mp4 -filter_complex '[0]reverse[s0]' -map '[s0]' tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(), filename='tmp.mp4'), index=None),)), index=None)
# ---
# name: test_parse_compile[redundant-split-duplicate][ffmpeg -i input1.mp4 -filter_complex '[0]reverse[s0];[s0]split=outputs=3[s1#0][s1#1][s1#2];[s1#0][s1#1][s1#2]concat=n=3[s2]' -map '[s2]' tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(), filename='tmp.mp4'), index=None),)), index=None)
# ---
# name: test_parse_compile[redundant-split-outputs-1][ffmpeg -i input1.mp4 -filter_complex '[0]reverse[s0]' -map '[s0]' tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(), filename='tmp.mp4'), index=None),)), index=None)
# ---
# name: test_parse_compile[reuse-input][ffmpeg -i input.mp4 -filter_complex '[0:v][0:v]concat=n=2[s0]' -map '[s0]' tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(), filename='tmp.mp4'), index=None),)), index=None)
# ---
# name: test_parse_compile[reuse-stream][ffmpeg -i input.mp4 -filter_complex '[0]reverse[s0];[s0]split=outputs=2[s1#0][s1#1];[s1#0][s1#1]concat=n=2[s2]' -map '[s2]' tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(), filename='tmp.mp4'), index=None),)), index=None)
# ---
# name: test_parse_compile[simple-global-args][ffmpeg -hide_banner -i input1.mp4 -map 0 tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(AVStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=None),), filename='tmp.mp4'), index=None),)), index=None)
# ---
# name: test_parse_compile[stream-selector-with-filter][ffmpeg -i input1.mp4 -filter_complex '[0:v:0]drawtext=text=Hello World:fontsize=12:x=10:y=10[s0]' -map '[s0]' tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(), filename='tmp.mp4'), index=None),)), index=None)
# ---
# name: test_parse_compile[stream-selector][ffmpeg -i input1.mp4 -map 0:v:0 tmp.mp4]
  GlobalStream(node=GlobalNode(kwargs=FrozenDict({}), inputs=(OutputStream(node=OutputNode(kwargs=FrozenDict({}), inputs=(VideoStream(node=InputNode(kwargs=FrozenDict({}), inputs=(), filename='input1.mp4'), index=0),), filename='tmp.mp4'), index=None),)), index=None)
# ---
