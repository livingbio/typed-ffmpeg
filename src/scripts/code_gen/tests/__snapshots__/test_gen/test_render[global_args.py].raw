# NOTE: this file is auto-generated, do not modify
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING, Any
from ...types import *

if TYPE_CHECKING:
    from ..nodes import GlobalNode, GlobalStream, OutputStream

class GlobalArgs(ABC):
    @abstractmethod
    def _global_node(self, *streams: OutputStream, **kwargs: Any) -> GlobalNode:
        ...

    def global_args(
        self,
        *,extra_options: dict[str, Any] = None,
    ) -> GlobalStream:
        """
        Set global options.

        Args:
            extra_options: Additional options

        Returns:
            GlobalStream: GlobalStream instance
        """

        return self._global_node(
            **({k: v for k, v in {
                
            }.items() if v is not None} | (extra_options or {})),
        ).stream()