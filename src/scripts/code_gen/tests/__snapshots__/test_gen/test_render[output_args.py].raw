# NOTE: this file is auto-generated, do not modify


from __future__ import annotations

from abc import ABC, abstractmethod
from pathlib import Path
from typing import TYPE_CHECKING, Any

from ...types import Binary, Boolean, Color, Dictionary, Double, Duration, Flags, Float, Func, Image_size, Int, Int64, Pix_fmt, Rational, Sample_fmt, String, Time, Video_rate

from ...utils.frozendict import merge
from ...codecs.schema import FFMpegEncoderOption
from ...formats.schema import FFMpegMuxerOption


if TYPE_CHECKING:
    from ..nodes import FilterableStream, OutputNode, OutputStream


class OutputArgs(ABC):
    @abstractmethod
    def _output_node(self, *streams: FilterableStream, filename: str | Path, **kwargs: Any) -> OutputNode:
        ...

    def output(
        self,
        *streams: "FilterableStream",
        filename: str | Path,encoder_options: FFMpegEncoderOption | None = None,
        muxer_options: FFMpegMuxerOption | None = None,
        extra_options: dict[str, Any] | None = None,
    ) -> OutputStream:
        """
        Output file URL

        Args:
            *streams: the streams to output
            filename: the filename to output to
            encoder_options: ffmpeg's encoder options
            muxer_options: FFMpegMuxerOption | None = None,
            extra_options: the arguments for the output

        Returns:
            the output stream
        """

        return self._output_node(*streams, filename=filename, **merge({
            
        }, encoder_options.kwargs if encoder_options else {}, muxer_options.kwargs if muxer_options else {}, extra_options)).stream()