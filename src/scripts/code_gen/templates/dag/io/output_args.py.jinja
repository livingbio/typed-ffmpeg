{% import "_components.jinja" as _components %}

from __future__ import annotations

from abc import ABC, abstractmethod
from pathlib import Path
from typing import TYPE_CHECKING, Any
{{ _components.import_types('...types') }}
from ...codecs.schema import FFMpegEncoderOption
from ...utils.frozendict import FrozenDict, merge


if TYPE_CHECKING:
    from ..nodes import FilterableStream, OutputNode, OutputStream


class OutputArgs(ABC):
    @abstractmethod
    def _output_node(self, *streams: FilterableStream, filename: str | Path, **kwargs: Any) -> OutputNode:
        ...

    def output(
        self,
        *streams: "FilterableStream",
        filename: str | Path,
        {%- for option in options -%}
        {%- if option.is_output_option -%}
        {{ option.name | option_name_safe }}: {{ option | option_typing }} = None,
        {%- endif -%}
        {%- endfor -%}
        encoder_options: FFMpegEncoderOption | None = None,
        extra_options: dict[str, Any] | None = None,
    ) -> OutputStream:
        """
        Output file URL

        Args:
            *streams: the streams to output
            filename: the filename to output to
            {% for option in options %}
            {%- if option.is_output_option -%}
            {{option.name | option_name_safe}}: {{option.help }}
            {% endif %}
            {%- endfor -%}
            encoder_options: ffmpeg's encoder options
            extra_options: the arguments for the output

        Returns:
            the output stream
        """
        options = {k: v for k, v in locals().items() if k not in ('filename', 'streams', 'encoder_options', 'extra_options', 'self')}

        return self._output_node(
            *streams,
            filename=str(filename),
            **merge(options, encoder_options.kwargs if encoder_options else {}, extra_options)
        ).stream()
