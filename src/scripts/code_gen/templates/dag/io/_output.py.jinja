{% import "_components.jinja" as _components %}

from pathlib import Path

from ..nodes import OutputNode, OutputStream, FilterableStream
from typing import Any
{{ _components.import_types('...types') }}

from ...utils.frozendict import FrozenDict, merge, remap, exclude

def output(
    *streams: FilterableStream,
    filename: str | Path,
    {%- for option in options -%}
    {%- if option.is_output_option -%}
    {{ option.name | option_name_safe }}: {{ option | option_typing }} = None,
    {%- endif -%}
    {%- endfor -%}
    extra_options: dict[str, Any] | None = None,
) -> OutputStream:
    """
    Output file URL

    Args:
        *streams: the streams to output
        filename: the filename to output to
        {% for option in options %}
        {%- if option.is_output_option -%}
        {{option.name | option_name_safe}}: {{option.help }}
        {% endif %}
        {%- endfor -%}
        extra_options: the arguments for the output

    Returns:
        the output stream
    """
    _remap: dict[str, str] = {
        {% for option in options %}
        {% if option.is_output_option and option.name != option.name | option_name_safe %}
        "{{ option.name | option_name_safe }}": "{{ option.name }}",
        {% endif %}
        {% endfor %}
    }
    options = remap(exclude(locals(), ("filename", "streams", "extra_options", "_remap")), _remap)

    return OutputNode(
        inputs=streams,
        filename=str(filename),
        kwargs=merge(options, extra_options)
    ).stream()
