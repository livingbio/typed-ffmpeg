from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING, Any
from ...types import *

if TYPE_CHECKING:
    from ..nodes import GlobalNode, GlobalStream, OutputStream

class GlobalArgs(ABC):
    @abstractmethod
    def _global_node(self, *streams: OutputStream, **kwargs: Any) -> GlobalNode:
        ...

    def global_args(
        self,
        *,

        {%- for option in options -%}
        {%- if option.is_global_option -%}
        {{ option.name }}: {{ option | option_typing }} = None,
        {%- endif -%}
        {%- endfor -%}
        **kwargs: Any
    ) -> GlobalStream:
        """
        Set global options.

        Args:
            {% for option in options %}
            {%- if option.is_global_option -%}
            {{option.name | option_name_safe}}: {{option.help }}
            {% endif %}
            {%- endfor -%}
            **kwargs: Additional options

        Returns:
            GlobalStream: GlobalStream instance
        """

        return self._global_node(
            **({k: v for k, v in {
                {% for option in options %}
                {%- if option.is_global_option -%}
                "{{ option.name}}": {{ option.name | option_name_safe }},
                {% endif %}
                {% endfor %}
            }.items() if v is not None} | kwargs),
        ).stream()
