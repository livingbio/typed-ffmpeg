[
  "FFMpegMuxer(name='3g2', flags='E', help='3GP2 (3GPP2 file format)', options=(FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='MOV muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='rtphint', help='Add RTP hint tracks', flags='E..........', value='rtphint'), FFMpegOptionChoice(name='empty_moov', help='Make the initial moov atom empty', flags='E..........', value='empty_moov'), FFMpegOptionChoice(name='frag_keyframe', help='Fragment at video keyframes', flags='E..........', value='frag_keyframe'), FFMpegOptionChoice(name='frag_every_frame', help='Fragment at every frame', flags='E..........', value='frag_every_frame'), FFMpegOptionChoice(name='separate_moof', help='Write separate moof/mdat atoms for each track', flags='E..........', value='separate_moof'), FFMpegOptionChoice(name='frag_custom', help='Flush fragments on caller requests', flags='E..........', value='frag_custom'), FFMpegOptionChoice(name='isml', help='Create a live smooth streaming feed (for pushing to a publishing point)', flags='E..........', value='isml'), FFMpegOptionChoice(name='faststart', help='Run a second pass to put the index (moov atom) at the beginning of the file', flags='E..........', value='faststart'), FFMpegOptionChoice(name='omit_tfhd_offset', help='Omit the base data offset in tfhd atoms', flags='E..........', value='omit_tfhd_offset'), FFMpegOptionChoice(name='disable_chpl', help='Disable Nero chapter atom', flags='E..........', value='disable_chpl'), FFMpegOptionChoice(name='default_base_moof', help='Set the default-base-is-moof flag in tfhd atoms', flags='E..........', value='default_base_moof'), FFMpegOptionChoice(name='dash', help='Write DASH compatible fragmented MP4', flags='E..........', value='dash'), FFMpegOptionChoice(name='cmaf', help='Write CMAF compatible fragmented MP4', flags='E..........', value='cmaf'), FFMpegOptionChoice(name='frag_discont', help='Signal that the next fragment is discontinuous from earlier ones', flags='E..........', value='frag_discont'), FFMpegOptionChoice(name='delay_moov', help='Delay writing the initial moov until the first fragment is cut, or until the first fragment flush', flags='E..........', value='delay_moov'), FFMpegOptionChoice(name='global_sidx', help='Write a global sidx index at the start of the file', flags='E..........', value='global_sidx'), FFMpegOptionChoice(name='skip_sidx', help='Skip writing of sidx atom', flags='E..........', value='skip_sidx'), FFMpegOptionChoice(name='write_colr', help='Write colr atom even if the color info is unspecified (Experimental, may be renamed or changed, do not use from scripts)', flags='E..........', value='write_colr'), FFMpegOptionChoice(name='prefer_icc', help='If writing colr atom prioritise usage of ICC profile if it exists in stream packet side data', flags='E..........', value='prefer_icc'), FFMpegOptionChoice(name='write_gama', help='Write deprecated gama atom', flags='E..........', value='write_gama'), FFMpegOptionChoice(name='use_metadata_tags', help='Use mdta atom for metadata.', flags='E..........', value='use_metadata_tags'), FFMpegOptionChoice(name='skip_trailer', help='Skip writing the mfra/tfra/mfro trailer for fragmented files', flags='E..........', value='skip_trailer'), FFMpegOptionChoice(name='negative_cts_offsets', help='Use negative CTS offsets (reducing the need for edit lists)', flags='E..........', value='negative_cts_offsets'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='moov_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='maximum moov size so it can be placed at the begin (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='rtpflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='RTP muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='latm', help='Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC', flags='E..........', value='latm'), FFMpegOptionChoice(name='rfc2190', help='Use RFC 2190 packetization instead of RFC 4629 for H.263', flags='E..........', value='rfc2190'), FFMpegOptionChoice(name='skip_rtcp', help=\"Don't send RTCP sender reports\", flags='E..........', value='skip_rtcp'), FFMpegOptionChoice(name='h264_mode0', help='Use mode 0 for H.264 in RTP', flags='E..........', value='h264_mode0'), FFMpegOptionChoice(name='send_bye', help='Send RTCP BYE packets when finishing', flags='E..........', value='send_bye'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='skip_iods', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Skip writing iods atom. (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_audio_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods audio profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_video_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods video profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='min_frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Minimum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment size (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='ism_lookahead', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of lookahead entries for ISM files (from 0 to 255) (default 0)', argname=None, min='0', max='255', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='video_track_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set timescale of all video tracks (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='brand', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Override major brand', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_editlist', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use edit list (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='fragment_index', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Fragment number of the next fragment (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='mov_gamma', type=<FFMpegOptionType.float: 'float'>, flags='E..........', help='gamma value for gama atom (from 0 to 10) (default 0)', argname=None, min='0', max='10', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_interleave', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead) (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_scheme', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Configures the encryption scheme, allowed values are none, cenc-aes-ctr', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_key', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_kid', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key identifier (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_stream_ids_as_track_ids', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use stream ids as track ids (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_btrt', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing btrt (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_tmcd', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing tmcd (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_prft', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Write producer reference time box with specified time source (from 0 to 2) (default 0)', argname=None, min='0', max='2', default='0', choices=(FFMpegOptionChoice(name='wallclock', help='', flags='E..........', value='1'), FFMpegOptionChoice(name='pts', help='', flags='E..........', value='2'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='empty_hdlr_name', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write zero-length name string in hdlr atoms within mdia and minf atoms (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movie_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set movie timescale (from 1 to INT_MAX) (default 1000)', argname=None, min=None, max=None, default='1000', choices=())))",
  "FFMpegMuxer(name='3gp', flags='E', help='3GP (3GPP file format)', options=(FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='MOV muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='rtphint', help='Add RTP hint tracks', flags='E..........', value='rtphint'), FFMpegOptionChoice(name='empty_moov', help='Make the initial moov atom empty', flags='E..........', value='empty_moov'), FFMpegOptionChoice(name='frag_keyframe', help='Fragment at video keyframes', flags='E..........', value='frag_keyframe'), FFMpegOptionChoice(name='frag_every_frame', help='Fragment at every frame', flags='E..........', value='frag_every_frame'), FFMpegOptionChoice(name='separate_moof', help='Write separate moof/mdat atoms for each track', flags='E..........', value='separate_moof'), FFMpegOptionChoice(name='frag_custom', help='Flush fragments on caller requests', flags='E..........', value='frag_custom'), FFMpegOptionChoice(name='isml', help='Create a live smooth streaming feed (for pushing to a publishing point)', flags='E..........', value='isml'), FFMpegOptionChoice(name='faststart', help='Run a second pass to put the index (moov atom) at the beginning of the file', flags='E..........', value='faststart'), FFMpegOptionChoice(name='omit_tfhd_offset', help='Omit the base data offset in tfhd atoms', flags='E..........', value='omit_tfhd_offset'), FFMpegOptionChoice(name='disable_chpl', help='Disable Nero chapter atom', flags='E..........', value='disable_chpl'), FFMpegOptionChoice(name='default_base_moof', help='Set the default-base-is-moof flag in tfhd atoms', flags='E..........', value='default_base_moof'), FFMpegOptionChoice(name='dash', help='Write DASH compatible fragmented MP4', flags='E..........', value='dash'), FFMpegOptionChoice(name='cmaf', help='Write CMAF compatible fragmented MP4', flags='E..........', value='cmaf'), FFMpegOptionChoice(name='frag_discont', help='Signal that the next fragment is discontinuous from earlier ones', flags='E..........', value='frag_discont'), FFMpegOptionChoice(name='delay_moov', help='Delay writing the initial moov until the first fragment is cut, or until the first fragment flush', flags='E..........', value='delay_moov'), FFMpegOptionChoice(name='global_sidx', help='Write a global sidx index at the start of the file', flags='E..........', value='global_sidx'), FFMpegOptionChoice(name='skip_sidx', help='Skip writing of sidx atom', flags='E..........', value='skip_sidx'), FFMpegOptionChoice(name='write_colr', help='Write colr atom even if the color info is unspecified (Experimental, may be renamed or changed, do not use from scripts)', flags='E..........', value='write_colr'), FFMpegOptionChoice(name='prefer_icc', help='If writing colr atom prioritise usage of ICC profile if it exists in stream packet side data', flags='E..........', value='prefer_icc'), FFMpegOptionChoice(name='write_gama', help='Write deprecated gama atom', flags='E..........', value='write_gama'), FFMpegOptionChoice(name='use_metadata_tags', help='Use mdta atom for metadata.', flags='E..........', value='use_metadata_tags'), FFMpegOptionChoice(name='skip_trailer', help='Skip writing the mfra/tfra/mfro trailer for fragmented files', flags='E..........', value='skip_trailer'), FFMpegOptionChoice(name='negative_cts_offsets', help='Use negative CTS offsets (reducing the need for edit lists)', flags='E..........', value='negative_cts_offsets'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='moov_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='maximum moov size so it can be placed at the begin (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='rtpflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='RTP muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='latm', help='Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC', flags='E..........', value='latm'), FFMpegOptionChoice(name='rfc2190', help='Use RFC 2190 packetization instead of RFC 4629 for H.263', flags='E..........', value='rfc2190'), FFMpegOptionChoice(name='skip_rtcp', help=\"Don't send RTCP sender reports\", flags='E..........', value='skip_rtcp'), FFMpegOptionChoice(name='h264_mode0', help='Use mode 0 for H.264 in RTP', flags='E..........', value='h264_mode0'), FFMpegOptionChoice(name='send_bye', help='Send RTCP BYE packets when finishing', flags='E..........', value='send_bye'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='skip_iods', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Skip writing iods atom. (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_audio_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods audio profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_video_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods video profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='min_frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Minimum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment size (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='ism_lookahead', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of lookahead entries for ISM files (from 0 to 255) (default 0)', argname=None, min='0', max='255', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='video_track_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set timescale of all video tracks (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='brand', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Override major brand', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_editlist', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use edit list (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='fragment_index', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Fragment number of the next fragment (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='mov_gamma', type=<FFMpegOptionType.float: 'float'>, flags='E..........', help='gamma value for gama atom (from 0 to 10) (default 0)', argname=None, min='0', max='10', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_interleave', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead) (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_scheme', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Configures the encryption scheme, allowed values are none, cenc-aes-ctr', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_key', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_kid', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key identifier (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_stream_ids_as_track_ids', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use stream ids as track ids (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_btrt', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing btrt (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_tmcd', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing tmcd (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_prft', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Write producer reference time box with specified time source (from 0 to 2) (default 0)', argname=None, min='0', max='2', default='0', choices=(FFMpegOptionChoice(name='wallclock', help='', flags='E..........', value='1'), FFMpegOptionChoice(name='pts', help='', flags='E..........', value='2'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='empty_hdlr_name', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write zero-length name string in hdlr atoms within mdia and minf atoms (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movie_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set movie timescale (from 1 to INT_MAX) (default 1000)', argname=None, min=None, max=None, default='1000', choices=())))",
  "FFMpegMuxer(name='a64', flags='E', help='a64 - video for Commodore 64', options=())",
  "FFMpegMuxer(name='ac3', flags='E', help='raw AC-3', options=())",
  "FFMpegMuxer(name='ac4', flags='E', help='raw AC-4', options=(FFMpegAVOption(section='AC4 muxer AVOptions:', name='write_crc', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='enable checksum (default false)', argname=None, min=None, max=None, default='false', choices=()),))",
  "FFMpegMuxer(name='adts', flags='E', help='ADTS AAC (Advanced Audio Coding)', options=(FFMpegAVOption(section='ADTS muxer AVOptions:', name='write_id3v2', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Enable ID3v2 tag writing (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='ADTS muxer AVOptions:', name='write_apetag', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Enable APE tag writing (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='ADTS muxer AVOptions:', name='write_mpeg2', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Set MPEG version to MPEG-2 (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegMuxer(name='adx', flags='E', help='CRI ADX', options=())",
  "FFMpegMuxer(name='aiff', flags='E', help='Audio IFF', options=(FFMpegAVOption(section='AIFF muxer AVOptions:', name='write_id3v2', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Enable ID3 tags writing. (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='AIFF muxer AVOptions:', name='id3v2_version', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Select ID3v2 version to write. Currently 3 and 4 are supported. (from 3 to 4) (default 4)', argname=None, min='3', max='4', default='4', choices=())))",
  "FFMpegMuxer(name='alaw', flags='E', help='PCM A-law', options=())",
  "FFMpegMuxer(name='alp', flags='E', help='LEGO Racers ALP', options=(FFMpegAVOption(section='alp AVOptions:', name='type', type=<FFMpegOptionType.int: 'int'>, flags='E...A......', help='set file type (from 0 to 2) (default auto)', argname=None, min='0', max='2', default='auto', choices=(FFMpegOptionChoice(name='auto', help='autodetect based on file extension', flags='E...A......', value='0'), FFMpegOptionChoice(name='tun', help='force .tun, used for music', flags='E...A......', value='1'), FFMpegOptionChoice(name='pcm', help='force .pcm, used for sfx', flags='E...A......', value='2'))),))",
  "FFMpegMuxer(name='alsa', flags='E', help='ALSA audio output', options=())",
  "FFMpegMuxer(name='amr', flags='E', help='3GPP AMR', options=())",
  "FFMpegMuxer(name='amv', flags='E', help='AMV', options=())",
  "FFMpegMuxer(name='apm', flags='E', help='Ubisoft Rayman 2 APM', options=())",
  "FFMpegMuxer(name='apng', flags='E', help='Animated Portable Network Graphics', options=(FFMpegAVOption(section='APNG muxer AVOptions:', name='plays', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of times to play the output: 0 - infinite loop, 1 - no loop (from 0 to 65535) (default 1)', argname=None, min='0', max='65535', default='1', choices=()), FFMpegAVOption(section='APNG muxer AVOptions:', name='final_delay', type=<FFMpegOptionType.rational: 'rational'>, flags='E..........', help='Force delay after the last frame (from 0 to 65535) (default 0/1)', argname=None, min='0', max='65535', default='0', choices=())))",
  "FFMpegMuxer(name='aptx', flags='E', help='raw aptX (Audio Processing Technology for Bluetooth)', options=())",
  "FFMpegMuxer(name='aptx_hd', flags='E', help='raw aptX HD (Audio Processing Technology for Bluetooth)', options=())",
  "FFMpegMuxer(name='argo_asf', flags='E', help='Argonaut Games ASF', options=(FFMpegAVOption(section='argo_asf_muxer AVOptions:', name='version_major', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='override file major version (from 0 to 65535) (default 2)', argname=None, min='0', max='65535', default='2', choices=()), FFMpegAVOption(section='argo_asf_muxer AVOptions:', name='version_minor', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='override file minor version (from 0 to 65535) (default 1)', argname=None, min='0', max='65535', default='1', choices=()), FFMpegAVOption(section='argo_asf_muxer AVOptions:', name='name', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='embedded file name (max 8 characters)', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegMuxer(name='argo_cvg', flags='E', help='Argonaut Games CVG', options=(FFMpegAVOption(section='argo_cvg_muxer AVOptions:', name='skip_rate_check', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='skip sample rate check (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='argo_cvg_muxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='set loop flag (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='argo_cvg_muxer AVOptions:', name='reverb', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='set reverb flag (default true)', argname=None, min=None, max=None, default='true', choices=())))",
  "FFMpegMuxer(name='asf', flags='E', help='ASF (Advanced / Active Streaming Format)', options=(FFMpegAVOption(section='ASF (stream) muxer AVOptions:', name='packet_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Packet size (from 100 to 65536) (default 3200)', argname=None, min='100', max='65536', default='3200', choices=()),))",
  "FFMpegMuxer(name='asf_stream', flags='E', help='ASF (Advanced / Active Streaming Format)', options=(FFMpegAVOption(section='ASF (stream) muxer AVOptions:', name='packet_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Packet size (from 100 to 65536) (default 3200)', argname=None, min='100', max='65536', default='3200', choices=()),))",
  "FFMpegMuxer(name='ass', flags='E', help='SSA (SubStation Alpha) subtitle', options=(FFMpegAVOption(section='ass muxer AVOptions:', name='ignore_readorder', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help=\"write events immediately, even if they're out-of-order (default false)\", argname=None, min=None, max=None, default='false', choices=()),))",
  "FFMpegMuxer(name='ast', flags='E', help='AST (Audio Stream)', options=(FFMpegAVOption(section='AST muxer AVOptions:', name='loopstart', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='Loopstart position in milliseconds. (from -1 to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='AST muxer AVOptions:', name='loopend', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='Loopend position in milliseconds. (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=())))",
  "FFMpegMuxer(name='au', flags='E', help='Sun AU', options=())",
  "FFMpegMuxer(name='avi', flags='E', help='AVI (Audio Video Interleaved)', options=(FFMpegAVOption(section='AVI muxer AVOptions:', name='reserve_index_space', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='reserve space (in bytes) at the beginning of the file for each stream index (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='AVI muxer AVOptions:', name='write_channel_mask', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write channel mask into wave format header (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='AVI muxer AVOptions:', name='flipped_raw_rgb', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Raw RGB bitmaps are stored bottom-up (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegMuxer(name='avif', flags='E', help='AVIF', options=(FFMpegAVOption(section='avif muxer AVOptions:', name='movie_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set movie timescale (from 1 to INT_MAX) (default 1000)', argname=None, min=None, max=None, default='1000', choices=()), FFMpegAVOption(section='avif muxer AVOptions:', name='loop', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of times to loop animated AVIF: 0 - infinite loop (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=())))",
  "FFMpegMuxer(name='avm2', flags='E', help='SWF (ShockWave Flash) (AVM2)', options=())",
  "FFMpegMuxer(name='avs2', flags='E', help='raw AVS2-P2/IEEE1857.4 video', options=())",
  "FFMpegMuxer(name='avs3', flags='E', help='AVS3-P2/IEEE1857.10', options=())",
  "FFMpegMuxer(name='bit', flags='E', help='G.729 BIT file format', options=())",
  "FFMpegMuxer(name='caca', flags='E', help='caca (color ASCII art) output device', options=(FFMpegAVOption(section='caca outdev AVOptions:', name='window_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='E..........', help='set window forced size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='caca outdev AVOptions:', name='window_title', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set window title', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='caca outdev AVOptions:', name='driver', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set display driver', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='caca outdev AVOptions:', name='algorithm', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set dithering algorithm (default \"default\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='caca outdev AVOptions:', name='antialias', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set antialias method (default \"default\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='caca outdev AVOptions:', name='charset', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set charset used to render output (default \"default\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='caca outdev AVOptions:', name='color', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set color used to render output (default \"default\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='caca outdev AVOptions:', name='list_drivers', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='list available drivers (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='caca outdev AVOptions:', name='list_dither', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='list available dither options', argname=None, min=None, max=None, default=None, choices=(FFMpegOptionChoice(name='algorithms', help='', flags='E..........', value='algorithms'), FFMpegOptionChoice(name='antialiases', help='', flags='E..........', value='antialiases'), FFMpegOptionChoice(name='charsets', help='', flags='E..........', value='charsets'), FFMpegOptionChoice(name='colors', help='', flags='E..........', value='colors')))))",
  "FFMpegMuxer(name='caf', flags='E', help='Apple CAF (Core Audio Format)', options=())",
  "FFMpegMuxer(name='cavsvideo', flags='E', help='raw Chinese AVS (Audio Video Standard) video', options=())",
  "FFMpegMuxer(name='chromaprint', flags='E', help='Chromaprint', options=(FFMpegAVOption(section='chromaprint muxer AVOptions:', name='silence_threshold', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='threshold for detecting silence (from -1 to 32767) (default -1)', argname=None, min='-1', max='32767', default='-1', choices=()), FFMpegAVOption(section='chromaprint muxer AVOptions:', name='algorithm', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='version of the fingerprint algorithm (from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='chromaprint muxer AVOptions:', name='fp_format', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='fingerprint format to write (from 0 to 2) (default base64)', argname=None, min='0', max='2', default='base64', choices=(FFMpegOptionChoice(name='raw', help='binary raw fingerprint', flags='E..........', value='0'), FFMpegOptionChoice(name='compressed', help='binary compressed fingerprint', flags='E..........', value='1'), FFMpegOptionChoice(name='base64', help='Base64 compressed fingerprint', flags='E..........', value='2')))))",
  "FFMpegMuxer(name='codec2', flags='E', help='codec2 .c2 muxer', options=())",
  "FFMpegMuxer(name='codec2raw', flags='E', help='raw codec2 muxer', options=())",
  "FFMpegMuxer(name='crc', flags='E', help='CRC testing', options=())",
  "FFMpegMuxer(name='dash', flags='E', help='DASH Muxer', options=(FFMpegAVOption(section='dash muxer AVOptions:', name='adaptation_sets', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Adaptation sets. Syntax: id=0,streams=0,1,2 id=1,streams=3,4 and so on', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='window_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='number of segments kept in the manifest (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='extra_window_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='number of segments kept outside of the manifest before removing from disk (from 0 to INT_MAX) (default 5)', argname=None, min=None, max=None, default='5', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='seg_duration', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='segment duration (in seconds, fractional value can be set) (default 5)', argname=None, min=None, max=None, default='5', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='frag_duration', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='fragment duration (in seconds, fractional value can be set) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='frag_type', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set type of interval for fragments (from 0 to 3) (default none)', argname=None, min='0', max='3', default='none', choices=(FFMpegOptionChoice(name='none', help='one fragment per segment', flags='E..........', value='0'), FFMpegOptionChoice(name='every_frame', help='fragment at every frame', flags='E..........', value='1'), FFMpegOptionChoice(name='duration', help='fragment at specific time intervals', flags='E..........', value='2'), FFMpegOptionChoice(name='pframes', help='fragment at keyframes and following P-Frame reordering (Video only, experimental)', flags='E..........', value='3'))), FFMpegAVOption(section='dash muxer AVOptions:', name='remove_at_exit', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='remove all segments when finished (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='use_template', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Use SegmentTemplate instead of SegmentList (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='use_timeline', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Use SegmentTimeline in SegmentTemplate (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='single_file', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Store all segments in one file, accessed using byte ranges (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='single_file_name', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='DASH-templated name to be used for baseURL. Implies storing all segments in one file, accessed using byte ranges', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='init_seg_name', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='DASH-templated name to used for the initialization segment (default \"init-stream$RepresentationID$.$ext$\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='media_seg_name', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='DASH-templated name to used for the media segments (default \"chunk-stream$RepresentationID$-$Number%05d$.$ext$\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='utc_timing_url', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='URL of the page that will return the UTC timestamp in ISO format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='method', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set the HTTP method', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='http_user_agent', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='override User-Agent field in HTTP header', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='http_persistent', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Use persistent HTTP connections (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='hls_playlist', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Generate HLS playlist files(master.m3u8, media_%d.m3u8) (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='hls_master_name', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='HLS master playlist name (default \"master.m3u8\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='streaming', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Enable/Disable streaming mode of output. Each frame will be moof fragment (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='timeout', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='set timeout for socket I/O operations (default -0.000001)', argname=None, min=None, max=None, default='-0', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='index_correction', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Enable/Disable segment index correction logic (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='format_options', type=<FFMpegOptionType.dictionary: 'dictionary'>, flags='E..........', help='set list of options for the container format (mp4/webm) used for dash', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='global_sidx', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Write global SIDX atom. Applicable only for single file, mp4 output, non-streaming mode (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='dash_segment_type', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set dash segment files type (from 0 to 2) (default auto)', argname=None, min='0', max='2', default='auto', choices=(FFMpegOptionChoice(name='auto', help='select segment file format based on codec', flags='E..........', value='0'), FFMpegOptionChoice(name='mp4', help='make segment file in ISOBMFF format', flags='E..........', value='1'), FFMpegOptionChoice(name='webm', help='make segment file in WebM format', flags='E..........', value='2'))), FFMpegAVOption(section='dash muxer AVOptions:', name='ignore_io_errors', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Ignore IO errors during open and write. Useful for long-duration runs with network output (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='lhls', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help=\"Enable Low-latency HLS(Experimental). Adds #EXT-X-PREFETCH tag with current segment's URI (default false)\", argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='ldash', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Enable Low-latency dash. Constrains the value of a few elements (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='master_m3u8_publish_rate', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Publish master playlist every after this many segment intervals (from 0 to UINT32_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='write_prft', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Write producer reference time element (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='mpd_profile', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='Set profiles. Elements and values used in the manifest may be constrained by them (default dash)', argname=None, min=None, max=None, default='dash', choices=(FFMpegOptionChoice(name='dash', help='MPEG-DASH ISO Base media file format live profile', flags='E..........', value='dash'), FFMpegOptionChoice(name='dvb_dash', help='DVB-DASH profile', flags='E..........', value='dvb_dash'))), FFMpegAVOption(section='dash muxer AVOptions:', name='http_opts', type=<FFMpegOptionType.dictionary: 'dictionary'>, flags='E..........', help='HTTP protocol options', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='target_latency', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='Set desired target latency for Low-latency dash (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='min_playback_rate', type=<FFMpegOptionType.rational: 'rational'>, flags='E..........', help='Set desired minimum playback rate (from 0.5 to 1.5) (default 1/1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='max_playback_rate', type=<FFMpegOptionType.rational: 'rational'>, flags='E..........', help='Set desired maximum playback rate (from 0.5 to 1.5) (default 1/1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='dash muxer AVOptions:', name='update_period', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='Set the mpd update interval (from 0 to I64_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=())))",
  "FFMpegMuxer(name='data', flags='E', help='raw data', options=())",
  "FFMpegMuxer(name='daud', flags='E', help='D-Cinema audio', options=())",
  "FFMpegMuxer(name='dfpwm', flags='E', help='raw DFPWM1a', options=())",
  "FFMpegMuxer(name='dirac', flags='E', help='raw Dirac', options=())",
  "FFMpegMuxer(name='dnxhd', flags='E', help='raw DNxHD (SMPTE VC-3)', options=())",
  "FFMpegMuxer(name='dts', flags='E', help='raw DTS', options=())",
  "FFMpegMuxer(name='dv', flags='E', help='DV (Digital Video)', options=())",
  "FFMpegMuxer(name='dvd', flags='E', help='MPEG-2 PS (DVD VOB)', options=(FFMpegAVOption(section='mpeg/(s)vcd/vob/dvd muxer AVOptions:', name='muxrate', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='(from 0 to 1.67772e+09) (default 0)', argname=None, min='0', max='1', default='0', choices=()), FFMpegAVOption(section='mpeg/(s)vcd/vob/dvd muxer AVOptions:', name='preload', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Initial demux-decode delay in microseconds. (from 0 to INT_MAX) (default 500000)', argname=None, min=None, max=None, default='500000', choices=())))",
  "FFMpegMuxer(name='eac3', flags='E', help='raw E-AC-3', options=())",
  "FFMpegMuxer(name='evc', flags='E', help='raw EVC video', options=())",
  "FFMpegMuxer(name='f32be', flags='E', help='PCM 32-bit floating-point big-endian', options=())",
  "FFMpegMuxer(name='f32le', flags='E', help='PCM 32-bit floating-point little-endian', options=())",
  "FFMpegMuxer(name='f4v', flags='E', help='F4V Adobe Flash Video', options=(FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='MOV muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='rtphint', help='Add RTP hint tracks', flags='E..........', value='rtphint'), FFMpegOptionChoice(name='empty_moov', help='Make the initial moov atom empty', flags='E..........', value='empty_moov'), FFMpegOptionChoice(name='frag_keyframe', help='Fragment at video keyframes', flags='E..........', value='frag_keyframe'), FFMpegOptionChoice(name='frag_every_frame', help='Fragment at every frame', flags='E..........', value='frag_every_frame'), FFMpegOptionChoice(name='separate_moof', help='Write separate moof/mdat atoms for each track', flags='E..........', value='separate_moof'), FFMpegOptionChoice(name='frag_custom', help='Flush fragments on caller requests', flags='E..........', value='frag_custom'), FFMpegOptionChoice(name='isml', help='Create a live smooth streaming feed (for pushing to a publishing point)', flags='E..........', value='isml'), FFMpegOptionChoice(name='faststart', help='Run a second pass to put the index (moov atom) at the beginning of the file', flags='E..........', value='faststart'), FFMpegOptionChoice(name='omit_tfhd_offset', help='Omit the base data offset in tfhd atoms', flags='E..........', value='omit_tfhd_offset'), FFMpegOptionChoice(name='disable_chpl', help='Disable Nero chapter atom', flags='E..........', value='disable_chpl'), FFMpegOptionChoice(name='default_base_moof', help='Set the default-base-is-moof flag in tfhd atoms', flags='E..........', value='default_base_moof'), FFMpegOptionChoice(name='dash', help='Write DASH compatible fragmented MP4', flags='E..........', value='dash'), FFMpegOptionChoice(name='cmaf', help='Write CMAF compatible fragmented MP4', flags='E..........', value='cmaf'), FFMpegOptionChoice(name='frag_discont', help='Signal that the next fragment is discontinuous from earlier ones', flags='E..........', value='frag_discont'), FFMpegOptionChoice(name='delay_moov', help='Delay writing the initial moov until the first fragment is cut, or until the first fragment flush', flags='E..........', value='delay_moov'), FFMpegOptionChoice(name='global_sidx', help='Write a global sidx index at the start of the file', flags='E..........', value='global_sidx'), FFMpegOptionChoice(name='skip_sidx', help='Skip writing of sidx atom', flags='E..........', value='skip_sidx'), FFMpegOptionChoice(name='write_colr', help='Write colr atom even if the color info is unspecified (Experimental, may be renamed or changed, do not use from scripts)', flags='E..........', value='write_colr'), FFMpegOptionChoice(name='prefer_icc', help='If writing colr atom prioritise usage of ICC profile if it exists in stream packet side data', flags='E..........', value='prefer_icc'), FFMpegOptionChoice(name='write_gama', help='Write deprecated gama atom', flags='E..........', value='write_gama'), FFMpegOptionChoice(name='use_metadata_tags', help='Use mdta atom for metadata.', flags='E..........', value='use_metadata_tags'), FFMpegOptionChoice(name='skip_trailer', help='Skip writing the mfra/tfra/mfro trailer for fragmented files', flags='E..........', value='skip_trailer'), FFMpegOptionChoice(name='negative_cts_offsets', help='Use negative CTS offsets (reducing the need for edit lists)', flags='E..........', value='negative_cts_offsets'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='moov_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='maximum moov size so it can be placed at the begin (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='rtpflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='RTP muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='latm', help='Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC', flags='E..........', value='latm'), FFMpegOptionChoice(name='rfc2190', help='Use RFC 2190 packetization instead of RFC 4629 for H.263', flags='E..........', value='rfc2190'), FFMpegOptionChoice(name='skip_rtcp', help=\"Don't send RTCP sender reports\", flags='E..........', value='skip_rtcp'), FFMpegOptionChoice(name='h264_mode0', help='Use mode 0 for H.264 in RTP', flags='E..........', value='h264_mode0'), FFMpegOptionChoice(name='send_bye', help='Send RTCP BYE packets when finishing', flags='E..........', value='send_bye'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='skip_iods', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Skip writing iods atom. (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_audio_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods audio profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_video_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods video profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='min_frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Minimum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment size (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='ism_lookahead', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of lookahead entries for ISM files (from 0 to 255) (default 0)', argname=None, min='0', max='255', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='video_track_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set timescale of all video tracks (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='brand', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Override major brand', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_editlist', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use edit list (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='fragment_index', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Fragment number of the next fragment (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='mov_gamma', type=<FFMpegOptionType.float: 'float'>, flags='E..........', help='gamma value for gama atom (from 0 to 10) (default 0)', argname=None, min='0', max='10', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_interleave', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead) (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_scheme', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Configures the encryption scheme, allowed values are none, cenc-aes-ctr', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_key', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_kid', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key identifier (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_stream_ids_as_track_ids', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use stream ids as track ids (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_btrt', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing btrt (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_tmcd', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing tmcd (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_prft', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Write producer reference time box with specified time source (from 0 to 2) (default 0)', argname=None, min='0', max='2', default='0', choices=(FFMpegOptionChoice(name='wallclock', help='', flags='E..........', value='1'), FFMpegOptionChoice(name='pts', help='', flags='E..........', value='2'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='empty_hdlr_name', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write zero-length name string in hdlr atoms within mdia and minf atoms (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movie_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set movie timescale (from 1 to INT_MAX) (default 1000)', argname=None, min=None, max=None, default='1000', choices=())))",
  "FFMpegMuxer(name='f64be', flags='E', help='PCM 64-bit floating-point big-endian', options=())",
  "FFMpegMuxer(name='f64le', flags='E', help='PCM 64-bit floating-point little-endian', options=())",
  "FFMpegMuxer(name='fbdev', flags='E', help='Linux framebuffer', options=(FFMpegAVOption(section='fbdev outdev AVOptions:', name='xoffset', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set x coordinate of top left corner (from INT_MIN to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='fbdev outdev AVOptions:', name='yoffset', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set y coordinate of top left corner (from INT_MIN to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=())))",
  "FFMpegMuxer(name='ffmetadata', flags='E', help='FFmpeg metadata in text', options=())",
  "FFMpegMuxer(name='fifo', flags='E', help='FIFO queue pseudo-muxer', options=(FFMpegAVOption(section='Fifo muxer AVOptions:', name='fifo_format', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Target muxer', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='Fifo muxer AVOptions:', name='queue_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Size of fifo queue (from 1 to INT_MAX) (default 60)', argname=None, min=None, max=None, default='60', choices=()), FFMpegAVOption(section='Fifo muxer AVOptions:', name='format_opts', type=<FFMpegOptionType.dictionary: 'dictionary'>, flags='E..........', help='Options to be passed to underlying muxer', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='Fifo muxer AVOptions:', name='drop_pkts_on_overflow', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Drop packets on fifo queue overflow not to block encoder (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='Fifo muxer AVOptions:', name='restart_with_keyframe', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Wait for keyframe when restarting output (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='Fifo muxer AVOptions:', name='attempt_recovery', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Attempt recovery in case of failure (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='Fifo muxer AVOptions:', name='max_recovery_attempts', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximal number of recovery attempts (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='Fifo muxer AVOptions:', name='recovery_wait_time', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='Waiting time between recovery attempts (default 5)', argname=None, min=None, max=None, default='5', choices=()), FFMpegAVOption(section='Fifo muxer AVOptions:', name='recovery_wait_streamtime', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Use stream time instead of real time while waiting for recovery (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='Fifo muxer AVOptions:', name='recover_any_error', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Attempt recovery regardless of type of the error (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='Fifo muxer AVOptions:', name='timeshift', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='Delay fifo output (default 0)', argname=None, min=None, max=None, default='0', choices=())))",
  "FFMpegMuxer(name='fifo_test', flags='E', help='Fifo test muxer', options=(FFMpegAVOption(section='Fifo test muxer AVOptions:', name='write_header_ret', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='write_header() return value (from INT_MIN to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='Fifo test muxer AVOptions:', name='write_trailer_ret', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='write_trailer() return value (from INT_MIN to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='Fifo test muxer AVOptions:', name='print_deinit_summary', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='print summary when deinitializing muxer (default true)', argname=None, min=None, max=None, default='true', choices=())))",
  "FFMpegMuxer(name='film_cpk', flags='E', help='Sega FILM / CPK', options=())",
  "FFMpegMuxer(name='filmstrip', flags='E', help='Adobe Filmstrip', options=())",
  "FFMpegMuxer(name='fits', flags='E', help='Flexible Image Transport System', options=())",
  "FFMpegMuxer(name='flac', flags='E', help='raw FLAC', options=(FFMpegAVOption(section='flac muxer AVOptions:', name='write_header', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Write the file header (default true)', argname=None, min=None, max=None, default='true', choices=()),))",
  "FFMpegMuxer(name='flv', flags='E', help='FLV (Flash Video)', options=(FFMpegAVOption(section='flv muxer AVOptions:', name='flvflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='FLV muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='aac_seq_header_detect', help='Put AAC sequence header based on stream data', flags='E..........', value='aac_seq_header_detect'), FFMpegOptionChoice(name='no_sequence_end', help='disable sequence end for FLV', flags='E..........', value='no_sequence_end'), FFMpegOptionChoice(name='no_metadata', help='disable metadata for FLV', flags='E..........', value='no_metadata'), FFMpegOptionChoice(name='no_duration_filesize', help='disable duration and filesize zero value metadata for FLV', flags='E..........', value='no_duration_filesize'), FFMpegOptionChoice(name='add_keyframe_index', help='Add keyframe index metadata', flags='E..........', value='add_keyframe_index'))),))",
  "FFMpegMuxer(name='framecrc', flags='E', help='framecrc testing', options=())",
  "FFMpegMuxer(name='framehash', flags='E', help='Per-frame hash testing', options=(FFMpegAVOption(section='frame hash muxer AVOptions:', name='hash', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set hash to use (default \"sha256\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='frame hash muxer AVOptions:', name='format_version', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='file format version (from 1 to 2) (default 2)', argname=None, min='1', max='2', default='2', choices=())))",
  "FFMpegMuxer(name='framemd5', flags='E', help='Per-frame MD5 testing', options=(FFMpegAVOption(section='frame MD5 muxer AVOptions:', name='hash', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set hash to use (default \"md5\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='frame MD5 muxer AVOptions:', name='format_version', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='file format version (from 1 to 2) (default 2)', argname=None, min='1', max='2', default='2', choices=())))",
  "FFMpegMuxer(name='g722', flags='E', help='raw G.722', options=())",
  "FFMpegMuxer(name='g723_1', flags='E', help='raw G.723.1', options=())",
  "FFMpegMuxer(name='g726', flags='E', help='raw big-endian G.726 (\"left-justified\")', options=())",
  "FFMpegMuxer(name='g726le', flags='E', help='raw little-endian G.726 (\"right-justified\")', options=())",
  "FFMpegMuxer(name='gif', flags='E', help='CompuServe Graphics Interchange Format (GIF)', options=(FFMpegAVOption(section='GIF muxer AVOptions:', name='loop', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of times to loop the output: -1 - no loop, 0 - infinite loop (from -1 to 65535) (default 0)', argname=None, min='-1', max='65535', default='0', choices=()), FFMpegAVOption(section='GIF muxer AVOptions:', name='final_delay', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Force delay (in centiseconds) after the last frame (from -1 to 65535) (default -1)', argname=None, min='-1', max='65535', default='-1', choices=())))",
  "FFMpegMuxer(name='gsm', flags='E', help='raw GSM', options=())",
  "FFMpegMuxer(name='gxf', flags='E', help='GXF (General eXchange Format)', options=())",
  "FFMpegMuxer(name='h261', flags='E', help='raw H.261', options=())",
  "FFMpegMuxer(name='h263', flags='E', help='raw H.263', options=())",
  "FFMpegMuxer(name='h264', flags='E', help='raw H.264 video', options=())",
  "FFMpegMuxer(name='hash', flags='E', help='Hash testing', options=(FFMpegAVOption(section='(stream) hash muxer AVOptions:', name='hash', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set hash to use (default \"sha256\")', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegMuxer(name='hds', flags='E', help='HDS Muxer', options=(FFMpegAVOption(section='HDS muxer AVOptions:', name='window_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='number of fragments kept in the manifest (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='HDS muxer AVOptions:', name='extra_window_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='number of fragments kept outside of the manifest before removing from disk (from 0 to INT_MAX) (default 5)', argname=None, min=None, max=None, default='5', choices=()), FFMpegAVOption(section='HDS muxer AVOptions:', name='min_frag_duration', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='minimum fragment duration (in microseconds) (from 0 to INT_MAX) (default 10000000)', argname=None, min=None, max=None, default='10000000', choices=()), FFMpegAVOption(section='HDS muxer AVOptions:', name='remove_at_exit', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='remove all fragments when finished (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegMuxer(name='hevc', flags='E', help='raw HEVC video', options=())",
  "FFMpegMuxer(name='hls', flags='E', help='Apple HTTP Live Streaming', options=(FFMpegAVOption(section='hls muxer AVOptions:', name='start_number', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='set first number in the sequence (from 0 to I64_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_time', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='set segment length (default 2)', argname=None, min=None, max=None, default='2', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_init_time', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='set segment length at init list (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_list_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set maximum number of playlist entries (from 0 to INT_MAX) (default 5)', argname=None, min=None, max=None, default='5', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_delete_threshold', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set number of unreferenced segments to keep before deleting (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_vtt_options', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set hls vtt list of options for the container format used for hls', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_allow_cache', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='explicitly set whether the client MAY (1) or MUST NOT (0) cache media segments (from INT_MIN to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_base_url', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='url to prepend to each playlist entry', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_segment_filename', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='filename template for segment files', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_segment_options', type=<FFMpegOptionType.dictionary: 'dictionary'>, flags='E..........', help='set segments files format options of hls', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_segment_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='maximum size per segment file, (in bytes) (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_key_info_file', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='file with key URI and key file path', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_enc', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='enable AES128 encryption support (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_enc_key', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='hex-coded 16 byte key to encrypt the segments', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_enc_key_url', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='url to access the key to decrypt the segments', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_enc_iv', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='hex-coded 16 byte initialization vector', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_subtitle_path', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set path of hls subtitles', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_segment_type', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set hls segment files type (from 0 to 1) (default mpegts)', argname=None, min='0', max='1', default='mpegts', choices=(FFMpegOptionChoice(name='mpegts', help='make segment file to mpegts files in m3u8', flags='E..........', value='0'), FFMpegOptionChoice(name='fmp4', help='make segment file to fragment mp4 files in m3u8', flags='E..........', value='1'))), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_fmp4_init_filename', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set fragment mp4 file init filename (default \"init.mp4\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_fmp4_init_resend', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='resend fragment mp4 init file after refresh m3u8 every time (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_flags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='set flags affecting HLS playlist and media file generation (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='single_file', help='generate a single media file indexed with byte ranges', flags='E..........', value='single_file'), FFMpegOptionChoice(name='temp_file', help='write segment and playlist to temporary file and rename when complete', flags='E..........', value='temp_file'), FFMpegOptionChoice(name='delete_segments', help='delete segment files that are no longer part of the playlist', flags='E..........', value='delete_segments'), FFMpegOptionChoice(name='round_durations', help='round durations in m3u8 to whole numbers', flags='E..........', value='round_durations'), FFMpegOptionChoice(name='discont_start', help='start the playlist with a discontinuity tag', flags='E..........', value='discont_start'), FFMpegOptionChoice(name='omit_endlist', help='Do not append an endlist when ending stream', flags='E..........', value='omit_endlist'), FFMpegOptionChoice(name='split_by_time', help='split the hls segment by time which user set by hls_time', flags='E..........', value='split_by_time'), FFMpegOptionChoice(name='append_list', help='append the new segments into old hls segment list', flags='E..........', value='append_list'), FFMpegOptionChoice(name='program_date_time', help='add EXT-X-PROGRAM-DATE-TIME', flags='E..........', value='program_date_time'), FFMpegOptionChoice(name='second_level_segment_index', help='include segment index in segment filenames when use_localtime', flags='E..........', value='second_level_segment_index'), FFMpegOptionChoice(name='second_level_segment_duration', help='include segment duration in segment filenames when use_localtime', flags='E..........', value='second_level_segment_duration'), FFMpegOptionChoice(name='second_level_segment_size', help='include segment size in segment filenames when use_localtime', flags='E..........', value='second_level_segment_size'), FFMpegOptionChoice(name='periodic_rekey', help='reload keyinfo file periodically for re-keying', flags='E..........', value='periodic_rekey'), FFMpegOptionChoice(name='independent_segments', help='add EXT-X-INDEPENDENT-SEGMENTS, whenever applicable', flags='E..........', value='independent_segments'), FFMpegOptionChoice(name='iframes_only', help='add EXT-X-I-FRAMES-ONLY, whenever applicable', flags='E..........', value='iframes_only'))), FFMpegAVOption(section='hls muxer AVOptions:', name='strftime', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='set filename expansion with strftime at segment creation (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='strftime_mkdir', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='create last directory component in strftime-generated filename (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_playlist_type', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set the HLS playlist type (from 0 to 2) (default 0)', argname=None, min='0', max='2', default='0', choices=(FFMpegOptionChoice(name='event', help='EVENT playlist', flags='E..........', value='1'), FFMpegOptionChoice(name='vod', help='VOD playlist', flags='E..........', value='2'))), FFMpegAVOption(section='hls muxer AVOptions:', name='method', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set the HTTP method(default: PUT)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='hls_start_number_source', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set source of first number in sequence (from 0 to 3) (default generic)', argname=None, min='0', max='3', default='generic', choices=(FFMpegOptionChoice(name='generic', help='start_number value (default)', flags='E..........', value='0'), FFMpegOptionChoice(name='epoch', help='seconds since epoch', flags='E..........', value='1'), FFMpegOptionChoice(name='epoch_us', help='microseconds since epoch', flags='E..........', value='3'), FFMpegOptionChoice(name='datetime', help='current datetime as YYYYMMDDhhmmss', flags='E..........', value='2'))), FFMpegAVOption(section='hls muxer AVOptions:', name='http_user_agent', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='override User-Agent field in HTTP header', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='var_stream_map', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Variant stream map string', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='cc_stream_map', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Closed captions stream map string', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='master_pl_name', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Create HLS master playlist with this name', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='master_pl_publish_rate', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Publish master play list every after this many segment intervals (from 0 to UINT32_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='http_persistent', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Use persistent HTTP connections (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='timeout', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='set timeout for socket I/O operations (default -0.000001)', argname=None, min=None, max=None, default='-0', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='ignore_io_errors', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Ignore IO errors for stable long-duration runs with network output (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='hls muxer AVOptions:', name='headers', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set custom HTTP headers, can override built in default headers', argname=None, min=None, max=None, default='headers', choices=())))",
  "FFMpegMuxer(name='ico', flags='E', help='Microsoft Windows ICO', options=())",
  "FFMpegMuxer(name='ilbc', flags='E', help='iLBC storage', options=())",
  "FFMpegMuxer(name='image2', flags='E', help='image2 sequence', options=(FFMpegAVOption(section='image2 muxer AVOptions:', name='update', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='continuously overwrite one file (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='image2 muxer AVOptions:', name='start_number', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set first number in the sequence (from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='image2 muxer AVOptions:', name='strftime', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use strftime for filename (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='image2 muxer AVOptions:', name='frame_pts', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use current frame pts for filename (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='image2 muxer AVOptions:', name='atomic_writing', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write files atomically (using temporary files and renames) (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='image2 muxer AVOptions:', name='protocol_opts', type=<FFMpegOptionType.dictionary: 'dictionary'>, flags='E..........', help='specify protocol options for the opened files', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegMuxer(name='image2pipe', flags='E', help='piped image2 sequence', options=())",
  "FFMpegMuxer(name='ipod', flags='E', help='iPod H.264 MP4 (MPEG-4 Part 14)', options=(FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='MOV muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='rtphint', help='Add RTP hint tracks', flags='E..........', value='rtphint'), FFMpegOptionChoice(name='empty_moov', help='Make the initial moov atom empty', flags='E..........', value='empty_moov'), FFMpegOptionChoice(name='frag_keyframe', help='Fragment at video keyframes', flags='E..........', value='frag_keyframe'), FFMpegOptionChoice(name='frag_every_frame', help='Fragment at every frame', flags='E..........', value='frag_every_frame'), FFMpegOptionChoice(name='separate_moof', help='Write separate moof/mdat atoms for each track', flags='E..........', value='separate_moof'), FFMpegOptionChoice(name='frag_custom', help='Flush fragments on caller requests', flags='E..........', value='frag_custom'), FFMpegOptionChoice(name='isml', help='Create a live smooth streaming feed (for pushing to a publishing point)', flags='E..........', value='isml'), FFMpegOptionChoice(name='faststart', help='Run a second pass to put the index (moov atom) at the beginning of the file', flags='E..........', value='faststart'), FFMpegOptionChoice(name='omit_tfhd_offset', help='Omit the base data offset in tfhd atoms', flags='E..........', value='omit_tfhd_offset'), FFMpegOptionChoice(name='disable_chpl', help='Disable Nero chapter atom', flags='E..........', value='disable_chpl'), FFMpegOptionChoice(name='default_base_moof', help='Set the default-base-is-moof flag in tfhd atoms', flags='E..........', value='default_base_moof'), FFMpegOptionChoice(name='dash', help='Write DASH compatible fragmented MP4', flags='E..........', value='dash'), FFMpegOptionChoice(name='cmaf', help='Write CMAF compatible fragmented MP4', flags='E..........', value='cmaf'), FFMpegOptionChoice(name='frag_discont', help='Signal that the next fragment is discontinuous from earlier ones', flags='E..........', value='frag_discont'), FFMpegOptionChoice(name='delay_moov', help='Delay writing the initial moov until the first fragment is cut, or until the first fragment flush', flags='E..........', value='delay_moov'), FFMpegOptionChoice(name='global_sidx', help='Write a global sidx index at the start of the file', flags='E..........', value='global_sidx'), FFMpegOptionChoice(name='skip_sidx', help='Skip writing of sidx atom', flags='E..........', value='skip_sidx'), FFMpegOptionChoice(name='write_colr', help='Write colr atom even if the color info is unspecified (Experimental, may be renamed or changed, do not use from scripts)', flags='E..........', value='write_colr'), FFMpegOptionChoice(name='prefer_icc', help='If writing colr atom prioritise usage of ICC profile if it exists in stream packet side data', flags='E..........', value='prefer_icc'), FFMpegOptionChoice(name='write_gama', help='Write deprecated gama atom', flags='E..........', value='write_gama'), FFMpegOptionChoice(name='use_metadata_tags', help='Use mdta atom for metadata.', flags='E..........', value='use_metadata_tags'), FFMpegOptionChoice(name='skip_trailer', help='Skip writing the mfra/tfra/mfro trailer for fragmented files', flags='E..........', value='skip_trailer'), FFMpegOptionChoice(name='negative_cts_offsets', help='Use negative CTS offsets (reducing the need for edit lists)', flags='E..........', value='negative_cts_offsets'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='moov_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='maximum moov size so it can be placed at the begin (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='rtpflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='RTP muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='latm', help='Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC', flags='E..........', value='latm'), FFMpegOptionChoice(name='rfc2190', help='Use RFC 2190 packetization instead of RFC 4629 for H.263', flags='E..........', value='rfc2190'), FFMpegOptionChoice(name='skip_rtcp', help=\"Don't send RTCP sender reports\", flags='E..........', value='skip_rtcp'), FFMpegOptionChoice(name='h264_mode0', help='Use mode 0 for H.264 in RTP', flags='E..........', value='h264_mode0'), FFMpegOptionChoice(name='send_bye', help='Send RTCP BYE packets when finishing', flags='E..........', value='send_bye'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='skip_iods', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Skip writing iods atom. (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_audio_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods audio profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_video_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods video profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='min_frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Minimum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment size (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='ism_lookahead', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of lookahead entries for ISM files (from 0 to 255) (default 0)', argname=None, min='0', max='255', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='video_track_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set timescale of all video tracks (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='brand', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Override major brand', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_editlist', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use edit list (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='fragment_index', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Fragment number of the next fragment (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='mov_gamma', type=<FFMpegOptionType.float: 'float'>, flags='E..........', help='gamma value for gama atom (from 0 to 10) (default 0)', argname=None, min='0', max='10', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_interleave', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead) (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_scheme', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Configures the encryption scheme, allowed values are none, cenc-aes-ctr', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_key', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_kid', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key identifier (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_stream_ids_as_track_ids', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use stream ids as track ids (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_btrt', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing btrt (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_tmcd', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing tmcd (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_prft', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Write producer reference time box with specified time source (from 0 to 2) (default 0)', argname=None, min='0', max='2', default='0', choices=(FFMpegOptionChoice(name='wallclock', help='', flags='E..........', value='1'), FFMpegOptionChoice(name='pts', help='', flags='E..........', value='2'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='empty_hdlr_name', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write zero-length name string in hdlr atoms within mdia and minf atoms (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movie_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set movie timescale (from 1 to INT_MAX) (default 1000)', argname=None, min=None, max=None, default='1000', choices=())))",
  "FFMpegMuxer(name='ircam', flags='E', help='Berkeley/IRCAM/CARL Sound Format', options=())",
  "FFMpegMuxer(name='ismv', flags='E', help='ISMV/ISMA (Smooth Streaming)', options=(FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='MOV muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='rtphint', help='Add RTP hint tracks', flags='E..........', value='rtphint'), FFMpegOptionChoice(name='empty_moov', help='Make the initial moov atom empty', flags='E..........', value='empty_moov'), FFMpegOptionChoice(name='frag_keyframe', help='Fragment at video keyframes', flags='E..........', value='frag_keyframe'), FFMpegOptionChoice(name='frag_every_frame', help='Fragment at every frame', flags='E..........', value='frag_every_frame'), FFMpegOptionChoice(name='separate_moof', help='Write separate moof/mdat atoms for each track', flags='E..........', value='separate_moof'), FFMpegOptionChoice(name='frag_custom', help='Flush fragments on caller requests', flags='E..........', value='frag_custom'), FFMpegOptionChoice(name='isml', help='Create a live smooth streaming feed (for pushing to a publishing point)', flags='E..........', value='isml'), FFMpegOptionChoice(name='faststart', help='Run a second pass to put the index (moov atom) at the beginning of the file', flags='E..........', value='faststart'), FFMpegOptionChoice(name='omit_tfhd_offset', help='Omit the base data offset in tfhd atoms', flags='E..........', value='omit_tfhd_offset'), FFMpegOptionChoice(name='disable_chpl', help='Disable Nero chapter atom', flags='E..........', value='disable_chpl'), FFMpegOptionChoice(name='default_base_moof', help='Set the default-base-is-moof flag in tfhd atoms', flags='E..........', value='default_base_moof'), FFMpegOptionChoice(name='dash', help='Write DASH compatible fragmented MP4', flags='E..........', value='dash'), FFMpegOptionChoice(name='cmaf', help='Write CMAF compatible fragmented MP4', flags='E..........', value='cmaf'), FFMpegOptionChoice(name='frag_discont', help='Signal that the next fragment is discontinuous from earlier ones', flags='E..........', value='frag_discont'), FFMpegOptionChoice(name='delay_moov', help='Delay writing the initial moov until the first fragment is cut, or until the first fragment flush', flags='E..........', value='delay_moov'), FFMpegOptionChoice(name='global_sidx', help='Write a global sidx index at the start of the file', flags='E..........', value='global_sidx'), FFMpegOptionChoice(name='skip_sidx', help='Skip writing of sidx atom', flags='E..........', value='skip_sidx'), FFMpegOptionChoice(name='write_colr', help='Write colr atom even if the color info is unspecified (Experimental, may be renamed or changed, do not use from scripts)', flags='E..........', value='write_colr'), FFMpegOptionChoice(name='prefer_icc', help='If writing colr atom prioritise usage of ICC profile if it exists in stream packet side data', flags='E..........', value='prefer_icc'), FFMpegOptionChoice(name='write_gama', help='Write deprecated gama atom', flags='E..........', value='write_gama'), FFMpegOptionChoice(name='use_metadata_tags', help='Use mdta atom for metadata.', flags='E..........', value='use_metadata_tags'), FFMpegOptionChoice(name='skip_trailer', help='Skip writing the mfra/tfra/mfro trailer for fragmented files', flags='E..........', value='skip_trailer'), FFMpegOptionChoice(name='negative_cts_offsets', help='Use negative CTS offsets (reducing the need for edit lists)', flags='E..........', value='negative_cts_offsets'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='moov_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='maximum moov size so it can be placed at the begin (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='rtpflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='RTP muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='latm', help='Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC', flags='E..........', value='latm'), FFMpegOptionChoice(name='rfc2190', help='Use RFC 2190 packetization instead of RFC 4629 for H.263', flags='E..........', value='rfc2190'), FFMpegOptionChoice(name='skip_rtcp', help=\"Don't send RTCP sender reports\", flags='E..........', value='skip_rtcp'), FFMpegOptionChoice(name='h264_mode0', help='Use mode 0 for H.264 in RTP', flags='E..........', value='h264_mode0'), FFMpegOptionChoice(name='send_bye', help='Send RTCP BYE packets when finishing', flags='E..........', value='send_bye'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='skip_iods', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Skip writing iods atom. (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_audio_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods audio profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_video_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods video profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='min_frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Minimum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment size (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='ism_lookahead', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of lookahead entries for ISM files (from 0 to 255) (default 0)', argname=None, min='0', max='255', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='video_track_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set timescale of all video tracks (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='brand', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Override major brand', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_editlist', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use edit list (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='fragment_index', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Fragment number of the next fragment (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='mov_gamma', type=<FFMpegOptionType.float: 'float'>, flags='E..........', help='gamma value for gama atom (from 0 to 10) (default 0)', argname=None, min='0', max='10', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_interleave', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead) (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_scheme', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Configures the encryption scheme, allowed values are none, cenc-aes-ctr', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_key', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_kid', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key identifier (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_stream_ids_as_track_ids', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use stream ids as track ids (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_btrt', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing btrt (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_tmcd', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing tmcd (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_prft', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Write producer reference time box with specified time source (from 0 to 2) (default 0)', argname=None, min='0', max='2', default='0', choices=(FFMpegOptionChoice(name='wallclock', help='', flags='E..........', value='1'), FFMpegOptionChoice(name='pts', help='', flags='E..........', value='2'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='empty_hdlr_name', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write zero-length name string in hdlr atoms within mdia and minf atoms (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movie_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set movie timescale (from 1 to INT_MAX) (default 1000)', argname=None, min=None, max=None, default='1000', choices=())))",
  "FFMpegMuxer(name='ivf', flags='E', help='On2 IVF', options=())",
  "FFMpegMuxer(name='jacosub', flags='E', help='JACOsub subtitle format', options=())",
  "FFMpegMuxer(name='kvag', flags='E', help='Simon & Schuster Interactive VAG', options=())",
  "FFMpegMuxer(name='latm', flags='E', help='LOAS/LATM', options=(FFMpegAVOption(section='LATM/LOAS muxer AVOptions:', name='smc-interval', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='StreamMuxConfig interval. (from 1 to 65535) (default 20)', argname=None, min='1', max='65535', default='20', choices=()),))",
  "FFMpegMuxer(name='lrc', flags='E', help='LRC lyrics', options=())",
  "FFMpegMuxer(name='m4v', flags='E', help='raw MPEG-4 video', options=())",
  "FFMpegMuxer(name='matroska', flags='E', help='Matroska', options=(FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='reserve_index_space', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Reserve a given amount of space (in bytes) at the beginning of the file for the index (cues). (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='cues_to_front', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Move Cues (the index) to the front by shifting data if necessary (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='cluster_size_limit', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Store at most the provided amount of bytes in a cluster.  (from -1 to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='cluster_time_limit', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='Store at most the provided number of milliseconds in a cluster. (from -1 to I64_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='dash', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Create a WebM file conforming to WebM DASH specification (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='dash_track_number', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Track number for the DASH stream (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='live', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Write files assuming it is a live stream. (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='allow_raw_vfw', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='allow RAW VFW mode (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='flipped_raw_rgb', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Raw RGB bitmaps in VFW mode are stored bottom-up (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='write_crc32', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write a CRC32 element inside every Level 1 element (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='default_mode', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help=\"Controls how a track's FlagDefault is inferred (from 0 to 2) (default passthrough)\", argname=None, min='0', max='2', default='passthrough', choices=(FFMpegOptionChoice(name='infer', help='For each track type, mark each track of disposition default as default; if none exists, mark the first track as default.', flags='E..........', value='0'), FFMpegOptionChoice(name='infer_no_subs', help='For each track type, mark each track of disposition default as default; for audio and video: if none exists, mark the first track as default.', flags='E..........', value='1'), FFMpegOptionChoice(name='passthrough', help='Use the disposition flag as-is', flags='E..........', value='2')))))",
  "FFMpegMuxer(name='md5', flags='E', help='MD5 testing', options=(FFMpegAVOption(section='MD5 muxer AVOptions:', name='hash', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set hash to use (default \"md5\")', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegMuxer(name='microdvd', flags='E', help='MicroDVD subtitle format', options=())",
  "FFMpegMuxer(name='mjpeg', flags='E', help='raw MJPEG video', options=())",
  "FFMpegMuxer(name='mkvtimestamp_v2', flags='E', help='extract pts as timecode v2 format, as defined by mkvtoolnix', options=())",
  "FFMpegMuxer(name='mlp', flags='E', help='raw MLP', options=())",
  "FFMpegMuxer(name='mmf', flags='E', help='Yamaha SMAF', options=())",
  "FFMpegMuxer(name='mov', flags='E', help='QuickTime / MOV', options=(FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='MOV muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='rtphint', help='Add RTP hint tracks', flags='E..........', value='rtphint'), FFMpegOptionChoice(name='empty_moov', help='Make the initial moov atom empty', flags='E..........', value='empty_moov'), FFMpegOptionChoice(name='frag_keyframe', help='Fragment at video keyframes', flags='E..........', value='frag_keyframe'), FFMpegOptionChoice(name='frag_every_frame', help='Fragment at every frame', flags='E..........', value='frag_every_frame'), FFMpegOptionChoice(name='separate_moof', help='Write separate moof/mdat atoms for each track', flags='E..........', value='separate_moof'), FFMpegOptionChoice(name='frag_custom', help='Flush fragments on caller requests', flags='E..........', value='frag_custom'), FFMpegOptionChoice(name='isml', help='Create a live smooth streaming feed (for pushing to a publishing point)', flags='E..........', value='isml'), FFMpegOptionChoice(name='faststart', help='Run a second pass to put the index (moov atom) at the beginning of the file', flags='E..........', value='faststart'), FFMpegOptionChoice(name='omit_tfhd_offset', help='Omit the base data offset in tfhd atoms', flags='E..........', value='omit_tfhd_offset'), FFMpegOptionChoice(name='disable_chpl', help='Disable Nero chapter atom', flags='E..........', value='disable_chpl'), FFMpegOptionChoice(name='default_base_moof', help='Set the default-base-is-moof flag in tfhd atoms', flags='E..........', value='default_base_moof'), FFMpegOptionChoice(name='dash', help='Write DASH compatible fragmented MP4', flags='E..........', value='dash'), FFMpegOptionChoice(name='cmaf', help='Write CMAF compatible fragmented MP4', flags='E..........', value='cmaf'), FFMpegOptionChoice(name='frag_discont', help='Signal that the next fragment is discontinuous from earlier ones', flags='E..........', value='frag_discont'), FFMpegOptionChoice(name='delay_moov', help='Delay writing the initial moov until the first fragment is cut, or until the first fragment flush', flags='E..........', value='delay_moov'), FFMpegOptionChoice(name='global_sidx', help='Write a global sidx index at the start of the file', flags='E..........', value='global_sidx'), FFMpegOptionChoice(name='skip_sidx', help='Skip writing of sidx atom', flags='E..........', value='skip_sidx'), FFMpegOptionChoice(name='write_colr', help='Write colr atom even if the color info is unspecified (Experimental, may be renamed or changed, do not use from scripts)', flags='E..........', value='write_colr'), FFMpegOptionChoice(name='prefer_icc', help='If writing colr atom prioritise usage of ICC profile if it exists in stream packet side data', flags='E..........', value='prefer_icc'), FFMpegOptionChoice(name='write_gama', help='Write deprecated gama atom', flags='E..........', value='write_gama'), FFMpegOptionChoice(name='use_metadata_tags', help='Use mdta atom for metadata.', flags='E..........', value='use_metadata_tags'), FFMpegOptionChoice(name='skip_trailer', help='Skip writing the mfra/tfra/mfro trailer for fragmented files', flags='E..........', value='skip_trailer'), FFMpegOptionChoice(name='negative_cts_offsets', help='Use negative CTS offsets (reducing the need for edit lists)', flags='E..........', value='negative_cts_offsets'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='moov_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='maximum moov size so it can be placed at the begin (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='rtpflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='RTP muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='latm', help='Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC', flags='E..........', value='latm'), FFMpegOptionChoice(name='rfc2190', help='Use RFC 2190 packetization instead of RFC 4629 for H.263', flags='E..........', value='rfc2190'), FFMpegOptionChoice(name='skip_rtcp', help=\"Don't send RTCP sender reports\", flags='E..........', value='skip_rtcp'), FFMpegOptionChoice(name='h264_mode0', help='Use mode 0 for H.264 in RTP', flags='E..........', value='h264_mode0'), FFMpegOptionChoice(name='send_bye', help='Send RTCP BYE packets when finishing', flags='E..........', value='send_bye'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='skip_iods', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Skip writing iods atom. (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_audio_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods audio profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_video_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods video profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='min_frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Minimum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment size (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='ism_lookahead', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of lookahead entries for ISM files (from 0 to 255) (default 0)', argname=None, min='0', max='255', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='video_track_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set timescale of all video tracks (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='brand', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Override major brand', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_editlist', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use edit list (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='fragment_index', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Fragment number of the next fragment (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='mov_gamma', type=<FFMpegOptionType.float: 'float'>, flags='E..........', help='gamma value for gama atom (from 0 to 10) (default 0)', argname=None, min='0', max='10', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_interleave', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead) (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_scheme', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Configures the encryption scheme, allowed values are none, cenc-aes-ctr', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_key', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_kid', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key identifier (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_stream_ids_as_track_ids', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use stream ids as track ids (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_btrt', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing btrt (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_tmcd', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing tmcd (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_prft', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Write producer reference time box with specified time source (from 0 to 2) (default 0)', argname=None, min='0', max='2', default='0', choices=(FFMpegOptionChoice(name='wallclock', help='', flags='E..........', value='1'), FFMpegOptionChoice(name='pts', help='', flags='E..........', value='2'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='empty_hdlr_name', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write zero-length name string in hdlr atoms within mdia and minf atoms (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movie_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set movie timescale (from 1 to INT_MAX) (default 1000)', argname=None, min=None, max=None, default='1000', choices=())))",
  "FFMpegMuxer(name='mp2', flags='E', help='MP2 (MPEG audio layer 2)', options=())",
  "FFMpegMuxer(name='mp3', flags='E', help='MP3 (MPEG audio layer 3)', options=(FFMpegAVOption(section='MP3 muxer AVOptions:', name='id3v2_version', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Select ID3v2 version to write. Currently 3 and 4 are supported. (from 0 to 4) (default 4)', argname=None, min='0', max='4', default='4', choices=()), FFMpegAVOption(section='MP3 muxer AVOptions:', name='write_id3v1', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Enable ID3v1 writing. ID3v1 tags are written in UTF-8 which may not be supported by most software. (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='MP3 muxer AVOptions:', name='write_xing', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Write the Xing header containing file duration. (default true)', argname=None, min=None, max=None, default='true', choices=())))",
  "FFMpegMuxer(name='mp4', flags='E', help='MP4 (MPEG-4 Part 14)', options=(FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='MOV muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='rtphint', help='Add RTP hint tracks', flags='E..........', value='rtphint'), FFMpegOptionChoice(name='empty_moov', help='Make the initial moov atom empty', flags='E..........', value='empty_moov'), FFMpegOptionChoice(name='frag_keyframe', help='Fragment at video keyframes', flags='E..........', value='frag_keyframe'), FFMpegOptionChoice(name='frag_every_frame', help='Fragment at every frame', flags='E..........', value='frag_every_frame'), FFMpegOptionChoice(name='separate_moof', help='Write separate moof/mdat atoms for each track', flags='E..........', value='separate_moof'), FFMpegOptionChoice(name='frag_custom', help='Flush fragments on caller requests', flags='E..........', value='frag_custom'), FFMpegOptionChoice(name='isml', help='Create a live smooth streaming feed (for pushing to a publishing point)', flags='E..........', value='isml'), FFMpegOptionChoice(name='faststart', help='Run a second pass to put the index (moov atom) at the beginning of the file', flags='E..........', value='faststart'), FFMpegOptionChoice(name='omit_tfhd_offset', help='Omit the base data offset in tfhd atoms', flags='E..........', value='omit_tfhd_offset'), FFMpegOptionChoice(name='disable_chpl', help='Disable Nero chapter atom', flags='E..........', value='disable_chpl'), FFMpegOptionChoice(name='default_base_moof', help='Set the default-base-is-moof flag in tfhd atoms', flags='E..........', value='default_base_moof'), FFMpegOptionChoice(name='dash', help='Write DASH compatible fragmented MP4', flags='E..........', value='dash'), FFMpegOptionChoice(name='cmaf', help='Write CMAF compatible fragmented MP4', flags='E..........', value='cmaf'), FFMpegOptionChoice(name='frag_discont', help='Signal that the next fragment is discontinuous from earlier ones', flags='E..........', value='frag_discont'), FFMpegOptionChoice(name='delay_moov', help='Delay writing the initial moov until the first fragment is cut, or until the first fragment flush', flags='E..........', value='delay_moov'), FFMpegOptionChoice(name='global_sidx', help='Write a global sidx index at the start of the file', flags='E..........', value='global_sidx'), FFMpegOptionChoice(name='skip_sidx', help='Skip writing of sidx atom', flags='E..........', value='skip_sidx'), FFMpegOptionChoice(name='write_colr', help='Write colr atom even if the color info is unspecified (Experimental, may be renamed or changed, do not use from scripts)', flags='E..........', value='write_colr'), FFMpegOptionChoice(name='prefer_icc', help='If writing colr atom prioritise usage of ICC profile if it exists in stream packet side data', flags='E..........', value='prefer_icc'), FFMpegOptionChoice(name='write_gama', help='Write deprecated gama atom', flags='E..........', value='write_gama'), FFMpegOptionChoice(name='use_metadata_tags', help='Use mdta atom for metadata.', flags='E..........', value='use_metadata_tags'), FFMpegOptionChoice(name='skip_trailer', help='Skip writing the mfra/tfra/mfro trailer for fragmented files', flags='E..........', value='skip_trailer'), FFMpegOptionChoice(name='negative_cts_offsets', help='Use negative CTS offsets (reducing the need for edit lists)', flags='E..........', value='negative_cts_offsets'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='moov_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='maximum moov size so it can be placed at the begin (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='rtpflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='RTP muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='latm', help='Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC', flags='E..........', value='latm'), FFMpegOptionChoice(name='rfc2190', help='Use RFC 2190 packetization instead of RFC 4629 for H.263', flags='E..........', value='rfc2190'), FFMpegOptionChoice(name='skip_rtcp', help=\"Don't send RTCP sender reports\", flags='E..........', value='skip_rtcp'), FFMpegOptionChoice(name='h264_mode0', help='Use mode 0 for H.264 in RTP', flags='E..........', value='h264_mode0'), FFMpegOptionChoice(name='send_bye', help='Send RTCP BYE packets when finishing', flags='E..........', value='send_bye'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='skip_iods', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Skip writing iods atom. (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_audio_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods audio profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_video_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods video profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='min_frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Minimum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment size (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='ism_lookahead', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of lookahead entries for ISM files (from 0 to 255) (default 0)', argname=None, min='0', max='255', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='video_track_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set timescale of all video tracks (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='brand', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Override major brand', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_editlist', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use edit list (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='fragment_index', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Fragment number of the next fragment (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='mov_gamma', type=<FFMpegOptionType.float: 'float'>, flags='E..........', help='gamma value for gama atom (from 0 to 10) (default 0)', argname=None, min='0', max='10', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_interleave', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead) (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_scheme', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Configures the encryption scheme, allowed values are none, cenc-aes-ctr', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_key', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_kid', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key identifier (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_stream_ids_as_track_ids', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use stream ids as track ids (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_btrt', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing btrt (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_tmcd', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing tmcd (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_prft', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Write producer reference time box with specified time source (from 0 to 2) (default 0)', argname=None, min='0', max='2', default='0', choices=(FFMpegOptionChoice(name='wallclock', help='', flags='E..........', value='1'), FFMpegOptionChoice(name='pts', help='', flags='E..........', value='2'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='empty_hdlr_name', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write zero-length name string in hdlr atoms within mdia and minf atoms (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movie_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set movie timescale (from 1 to INT_MAX) (default 1000)', argname=None, min=None, max=None, default='1000', choices=())))",
  "FFMpegMuxer(name='mpeg', flags='E', help='MPEG-1 Systems / MPEG program stream', options=(FFMpegAVOption(section='mpeg/(s)vcd/vob/dvd muxer AVOptions:', name='muxrate', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='(from 0 to 1.67772e+09) (default 0)', argname=None, min='0', max='1', default='0', choices=()), FFMpegAVOption(section='mpeg/(s)vcd/vob/dvd muxer AVOptions:', name='preload', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Initial demux-decode delay in microseconds. (from 0 to INT_MAX) (default 500000)', argname=None, min=None, max=None, default='500000', choices=())))",
  "FFMpegMuxer(name='mpeg1video', flags='E', help='raw MPEG-1 video', options=())",
  "FFMpegMuxer(name='mpeg2video', flags='E', help='raw MPEG-2 video', options=())",
  "FFMpegMuxer(name='mpegts', flags='E', help='MPEG-TS (MPEG-2 Transport Stream)', options=(FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='mpegts_transport_stream_id', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Set transport_stream_id field. (from 1 to 65535) (default 1)', argname=None, min='1', max='65535', default='1', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='mpegts_original_network_id', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Set original_network_id field. (from 1 to 65535) (default 65281)', argname=None, min='1', max='65535', default='65281', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='mpegts_service_id', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Set service_id field. (from 1 to 65535) (default 1)', argname=None, min='1', max='65535', default='1', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='mpegts_service_type', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Set service_type field. (from 1 to 255) (default digital_tv)', argname=None, min='1', max='255', default='digital_tv', choices=(FFMpegOptionChoice(name='digital_tv', help='Digital Television.', flags='E..........', value='1'), FFMpegOptionChoice(name='digital_radio', help='Digital Radio.', flags='E..........', value='2'), FFMpegOptionChoice(name='teletext', help='Teletext.', flags='E..........', value='3'), FFMpegOptionChoice(name='advanced_codec_digital_radio 10', help='Advanced Codec Digital Radio.', flags='E..........', value='advanced_codec_digital_radio 10'), FFMpegOptionChoice(name='mpeg2_digital_hdtv 17', help='MPEG2 Digital HDTV.', flags='E..........', value='mpeg2_digital_hdtv 17'), FFMpegOptionChoice(name='advanced_codec_digital_sdtv 22', help='Advanced Codec Digital SDTV.', flags='E..........', value='advanced_codec_digital_sdtv 22'), FFMpegOptionChoice(name='advanced_codec_digital_hdtv 25', help='Advanced Codec Digital HDTV.', flags='E..........', value='advanced_codec_digital_hdtv 25'), FFMpegOptionChoice(name='hevc_digital_hdtv 31', help='HEVC Digital Television Service.', flags='E..........', value='hevc_digital_hdtv 31'))), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='mpegts_pmt_start_pid', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Set the first pid of the PMT. (from 32 to 8186) (default 4096)', argname=None, min='32', max='8186', default='4096', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='mpegts_start_pid', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Set the first pid. (from 32 to 8186) (default 256)', argname=None, min='32', max='8186', default='256', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='mpegts_m2ts_mode', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Enable m2ts mode. (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='muxrate', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='pes_payload_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Minimum PES packet payload in bytes (from 0 to INT_MAX) (default 2930)', argname=None, min=None, max=None, default='2930', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='mpegts_flags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='MPEG-TS muxing flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='resend_headers', help='Reemit PAT/PMT before writing the next packet', flags='E..........', value='resend_headers'), FFMpegOptionChoice(name='latm', help='Use LATM packetization for AAC', flags='E..........', value='latm'), FFMpegOptionChoice(name='pat_pmt_at_frames', help='Reemit PAT and PMT at each video frame', flags='E..........', value='pat_pmt_at_frames'), FFMpegOptionChoice(name='system_b', help='Conform to System B (DVB) instead of System A (ATSC)', flags='E..........', value='system_b'), FFMpegOptionChoice(name='initial_discontinuity', help='Mark initial packets as discontinuous', flags='E..........', value='initial_discontinuity'), FFMpegOptionChoice(name='nit', help='Enable NIT transmission', flags='E..........', value='nit'), FFMpegOptionChoice(name='omit_rai', help='Disable writing of random access indicator', flags='E..........', value='omit_rai'))), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='mpegts_copyts', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help=\"don't offset dts/pts (default auto)\", argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='tables_version', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set PAT, PMT, SDT and NIT version (from 0 to 31) (default 0)', argname=None, min='0', max='31', default='0', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='omit_video_pes_length', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Omit the PES packet length for video packets (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='pcr_period', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='PCR retransmission time in milliseconds (from -1 to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='pat_period', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='PAT/PMT retransmission time limit in seconds (default 0.1)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='sdt_period', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='SDT retransmission time limit in seconds (default 0.5)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='MPEGTS muxer AVOptions:', name='nit_period', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='NIT retransmission time limit in seconds (default 0.5)', argname=None, min=None, max=None, default='0', choices=())))",
  "FFMpegMuxer(name='mpjpeg', flags='E', help='MIME multipart JPEG', options=(FFMpegAVOption(section='mpjpeg_muxer AVOptions:', name='boundary_tag', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Boundary tag (default \"ffmpeg\")', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegMuxer(name='mulaw', flags='E', help='PCM mu-law', options=())",
  "FFMpegMuxer(name='mxf', flags='E', help='MXF (Material eXchange Format)', options=(FFMpegAVOption(section='MXF muxer AVOptions:', name='signal_standard', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Force/set Signal Standard (from -1 to 7) (default -1)', argname=None, min='-1', max='7', default='-1', choices=(FFMpegOptionChoice(name='bt601', help='ITU-R BT.601 and BT.656, also SMPTE 125M (525 and 625 line interlaced)', flags='E..........', value='1'), FFMpegOptionChoice(name='bt1358', help='ITU-R BT.1358 and ITU-R BT.799-3, also SMPTE 293M (525 and 625 line progressive)', flags='E..........', value='2'), FFMpegOptionChoice(name='smpte347m', help='SMPTE 347M (540 Mbps mappings)', flags='E..........', value='3'), FFMpegOptionChoice(name='smpte274m', help='SMPTE 274M (1125 line)', flags='E..........', value='4'), FFMpegOptionChoice(name='smpte296m', help='SMPTE 296M (750 line progressive)', flags='E..........', value='5'), FFMpegOptionChoice(name='smpte349m', help='SMPTE 349M (1485 Mbps mappings)', flags='E..........', value='6'), FFMpegOptionChoice(name='smpte428', help='SMPTE 428-1 DCDM', flags='E..........', value='7'))), FFMpegAVOption(section='MXF muxer AVOptions:', name='store_user_comments', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='(default true)', argname=None, min=None, max=None, default='true', choices=())))",
  "FFMpegMuxer(name='mxf_d10', flags='E', help='MXF (Material eXchange Format) D-10 Mapping', options=(FFMpegAVOption(section='MXF-D10 muxer AVOptions:', name='d10_channelcount', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Force/set channelcount in generic sound essence descriptor (from -1 to 8) (default -1)', argname=None, min='-1', max='8', default='-1', choices=()), FFMpegAVOption(section='MXF-D10 muxer AVOptions:', name='signal_standard', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Force/set Signal Standard (from -1 to 7) (default -1)', argname=None, min='-1', max='7', default='-1', choices=(FFMpegOptionChoice(name='bt601', help='ITU-R BT.601 and BT.656, also SMPTE 125M (525 and 625 line interlaced)', flags='E..........', value='1'), FFMpegOptionChoice(name='bt1358', help='ITU-R BT.1358 and ITU-R BT.799-3, also SMPTE 293M (525 and 625 line progressive)', flags='E..........', value='2'), FFMpegOptionChoice(name='smpte347m', help='SMPTE 347M (540 Mbps mappings)', flags='E..........', value='3'), FFMpegOptionChoice(name='smpte274m', help='SMPTE 274M (1125 line)', flags='E..........', value='4'), FFMpegOptionChoice(name='smpte296m', help='SMPTE 296M (750 line progressive)', flags='E..........', value='5'), FFMpegOptionChoice(name='smpte349m', help='SMPTE 349M (1485 Mbps mappings)', flags='E..........', value='6'), FFMpegOptionChoice(name='smpte428', help='SMPTE 428-1 DCDM', flags='E..........', value='7'))), FFMpegAVOption(section='MXF-D10 muxer AVOptions:', name='store_user_comments', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='(default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegMuxer(name='mxf_opatom', flags='E', help='MXF (Material eXchange Format) Operational Pattern Atom', options=(FFMpegAVOption(section='MXF-OPAtom muxer AVOptions:', name='mxf_audio_edit_rate', type=<FFMpegOptionType.rational: 'rational'>, flags='E..........', help='Audio edit rate for timecode (from 0 to INT_MAX) (default 25/1)', argname=None, min=None, max=None, default='25', choices=()), FFMpegAVOption(section='MXF-OPAtom muxer AVOptions:', name='signal_standard', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Force/set Signal Standard (from -1 to 7) (default -1)', argname=None, min='-1', max='7', default='-1', choices=(FFMpegOptionChoice(name='bt601', help='ITU-R BT.601 and BT.656, also SMPTE 125M (525 and 625 line interlaced)', flags='E..........', value='1'), FFMpegOptionChoice(name='bt1358', help='ITU-R BT.1358 and ITU-R BT.799-3, also SMPTE 293M (525 and 625 line progressive)', flags='E..........', value='2'), FFMpegOptionChoice(name='smpte347m', help='SMPTE 347M (540 Mbps mappings)', flags='E..........', value='3'), FFMpegOptionChoice(name='smpte274m', help='SMPTE 274M (1125 line)', flags='E..........', value='4'), FFMpegOptionChoice(name='smpte296m', help='SMPTE 296M (750 line progressive)', flags='E..........', value='5'), FFMpegOptionChoice(name='smpte349m', help='SMPTE 349M (1485 Mbps mappings)', flags='E..........', value='6'), FFMpegOptionChoice(name='smpte428', help='SMPTE 428-1 DCDM', flags='E..........', value='7'))), FFMpegAVOption(section='MXF-OPAtom muxer AVOptions:', name='store_user_comments', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='(default true)', argname=None, min=None, max=None, default='true', choices=())))",
  "FFMpegMuxer(name='null', flags='E', help='raw null video', options=())",
  "FFMpegMuxer(name='nut', flags='E', help='NUT', options=(FFMpegAVOption(section='nutenc AVOptions:', name='syncpoints', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='NUT syncpoint behaviour (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='default', help='', flags='E..........', value='default'), FFMpegOptionChoice(name='none', help='Disable syncpoints, low overhead and unseekable', flags='E..........', value='none'), FFMpegOptionChoice(name='timestamped', help='Extend syncpoints with a wallclock timestamp', flags='E..........', value='timestamped'))), FFMpegAVOption(section='nutenc AVOptions:', name='write_index', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Write index (default true)', argname=None, min=None, max=None, default='true', choices=())))",
  "FFMpegMuxer(name='obu', flags='E', help='AV1 low overhead OBU', options=())",
  "FFMpegMuxer(name='oga', flags='E', help='Ogg Audio', options=(FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='serial_offset', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='serial number offset (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='oggpagesize', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Set preferred Ogg page size. (from 0 to 65025) (default 0)', argname=None, min='0', max='65025', default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='pagesize', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='preferred page size in bytes (deprecated) (from 0 to 65025) (default 0)', argname=None, min='0', max='65025', default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='page_duration', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='preferred page duration, in microseconds (from 0 to I64_MAX) (default 1000000)', argname=None, min=None, max=None, default='1000000', choices=())))",
  "FFMpegMuxer(name='ogg', flags='E', help='Ogg', options=(FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='serial_offset', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='serial number offset (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='oggpagesize', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Set preferred Ogg page size. (from 0 to 65025) (default 0)', argname=None, min='0', max='65025', default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='pagesize', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='preferred page size in bytes (deprecated) (from 0 to 65025) (default 0)', argname=None, min='0', max='65025', default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='page_duration', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='preferred page duration, in microseconds (from 0 to I64_MAX) (default 1000000)', argname=None, min=None, max=None, default='1000000', choices=())))",
  "FFMpegMuxer(name='ogv', flags='E', help='Ogg Video', options=(FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='serial_offset', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='serial number offset (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='oggpagesize', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Set preferred Ogg page size. (from 0 to 65025) (default 0)', argname=None, min='0', max='65025', default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='pagesize', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='preferred page size in bytes (deprecated) (from 0 to 65025) (default 0)', argname=None, min='0', max='65025', default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='page_duration', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='preferred page duration, in microseconds (from 0 to I64_MAX) (default 1000000)', argname=None, min=None, max=None, default='1000000', choices=())))",
  "FFMpegMuxer(name='oma', flags='E', help='Sony OpenMG audio', options=())",
  "FFMpegMuxer(name='opengl', flags='E', help='OpenGL output', options=(FFMpegAVOption(section='opengl outdev AVOptions:', name='background', type=<FFMpegOptionType.color: 'color'>, flags='E..........', help='set background color (default \"black\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='opengl outdev AVOptions:', name='no_window', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='disable default window (from INT_MIN to INT_MAX) (default 0)', argname=None, min=None, max=None, default='window', choices=()), FFMpegAVOption(section='opengl outdev AVOptions:', name='window_title', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set window title', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='opengl outdev AVOptions:', name='window_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='E..........', help='set window size', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegMuxer(name='opus', flags='E', help='Ogg Opus', options=(FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='serial_offset', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='serial number offset (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='oggpagesize', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Set preferred Ogg page size. (from 0 to 65025) (default 0)', argname=None, min='0', max='65025', default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='pagesize', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='preferred page size in bytes (deprecated) (from 0 to 65025) (default 0)', argname=None, min='0', max='65025', default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='page_duration', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='preferred page duration, in microseconds (from 0 to I64_MAX) (default 1000000)', argname=None, min=None, max=None, default='1000000', choices=())))",
  "FFMpegMuxer(name='oss', flags='E', help='OSS (Open Sound System) playback', options=())",
  "FFMpegMuxer(name='psp', flags='E', help='PSP MP4 (MPEG-4 Part 14)', options=(FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='MOV muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='rtphint', help='Add RTP hint tracks', flags='E..........', value='rtphint'), FFMpegOptionChoice(name='empty_moov', help='Make the initial moov atom empty', flags='E..........', value='empty_moov'), FFMpegOptionChoice(name='frag_keyframe', help='Fragment at video keyframes', flags='E..........', value='frag_keyframe'), FFMpegOptionChoice(name='frag_every_frame', help='Fragment at every frame', flags='E..........', value='frag_every_frame'), FFMpegOptionChoice(name='separate_moof', help='Write separate moof/mdat atoms for each track', flags='E..........', value='separate_moof'), FFMpegOptionChoice(name='frag_custom', help='Flush fragments on caller requests', flags='E..........', value='frag_custom'), FFMpegOptionChoice(name='isml', help='Create a live smooth streaming feed (for pushing to a publishing point)', flags='E..........', value='isml'), FFMpegOptionChoice(name='faststart', help='Run a second pass to put the index (moov atom) at the beginning of the file', flags='E..........', value='faststart'), FFMpegOptionChoice(name='omit_tfhd_offset', help='Omit the base data offset in tfhd atoms', flags='E..........', value='omit_tfhd_offset'), FFMpegOptionChoice(name='disable_chpl', help='Disable Nero chapter atom', flags='E..........', value='disable_chpl'), FFMpegOptionChoice(name='default_base_moof', help='Set the default-base-is-moof flag in tfhd atoms', flags='E..........', value='default_base_moof'), FFMpegOptionChoice(name='dash', help='Write DASH compatible fragmented MP4', flags='E..........', value='dash'), FFMpegOptionChoice(name='cmaf', help='Write CMAF compatible fragmented MP4', flags='E..........', value='cmaf'), FFMpegOptionChoice(name='frag_discont', help='Signal that the next fragment is discontinuous from earlier ones', flags='E..........', value='frag_discont'), FFMpegOptionChoice(name='delay_moov', help='Delay writing the initial moov until the first fragment is cut, or until the first fragment flush', flags='E..........', value='delay_moov'), FFMpegOptionChoice(name='global_sidx', help='Write a global sidx index at the start of the file', flags='E..........', value='global_sidx'), FFMpegOptionChoice(name='skip_sidx', help='Skip writing of sidx atom', flags='E..........', value='skip_sidx'), FFMpegOptionChoice(name='write_colr', help='Write colr atom even if the color info is unspecified (Experimental, may be renamed or changed, do not use from scripts)', flags='E..........', value='write_colr'), FFMpegOptionChoice(name='prefer_icc', help='If writing colr atom prioritise usage of ICC profile if it exists in stream packet side data', flags='E..........', value='prefer_icc'), FFMpegOptionChoice(name='write_gama', help='Write deprecated gama atom', flags='E..........', value='write_gama'), FFMpegOptionChoice(name='use_metadata_tags', help='Use mdta atom for metadata.', flags='E..........', value='use_metadata_tags'), FFMpegOptionChoice(name='skip_trailer', help='Skip writing the mfra/tfra/mfro trailer for fragmented files', flags='E..........', value='skip_trailer'), FFMpegOptionChoice(name='negative_cts_offsets', help='Use negative CTS offsets (reducing the need for edit lists)', flags='E..........', value='negative_cts_offsets'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='moov_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='maximum moov size so it can be placed at the begin (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='rtpflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='RTP muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='latm', help='Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC', flags='E..........', value='latm'), FFMpegOptionChoice(name='rfc2190', help='Use RFC 2190 packetization instead of RFC 4629 for H.263', flags='E..........', value='rfc2190'), FFMpegOptionChoice(name='skip_rtcp', help=\"Don't send RTCP sender reports\", flags='E..........', value='skip_rtcp'), FFMpegOptionChoice(name='h264_mode0', help='Use mode 0 for H.264 in RTP', flags='E..........', value='h264_mode0'), FFMpegOptionChoice(name='send_bye', help='Send RTCP BYE packets when finishing', flags='E..........', value='send_bye'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='skip_iods', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Skip writing iods atom. (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_audio_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods audio profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='iods_video_profile', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='iods video profile atom. (from -1 to 255) (default -1)', argname=None, min='-1', max='255', default='-1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='min_frag_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Minimum fragment duration (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Maximum fragment size (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='ism_lookahead', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of lookahead entries for ISM files (from 0 to 255) (default 0)', argname=None, min='0', max='255', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='video_track_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set timescale of all video tracks (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='brand', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Override major brand', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_editlist', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use edit list (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='fragment_index', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Fragment number of the next fragment (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='mov_gamma', type=<FFMpegOptionType.float: 'float'>, flags='E..........', help='gamma value for gama atom (from 0 to 10) (default 0)', argname=None, min='0', max='10', default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='frag_interleave', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead) (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_scheme', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Configures the encryption scheme, allowed values are none, cenc-aes-ctr', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_key', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='encryption_kid', type=<FFMpegOptionType.binary: 'binary'>, flags='E..........', help='The media encryption key identifier (hex)', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='use_stream_ids_as_track_ids', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='use stream ids as track ids (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_btrt', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing btrt (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_tmcd', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='force or disable writing tmcd (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='write_prft', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Write producer reference time box with specified time source (from 0 to 2) (default 0)', argname=None, min='0', max='2', default='0', choices=(FFMpegOptionChoice(name='wallclock', help='', flags='E..........', value='1'), FFMpegOptionChoice(name='pts', help='', flags='E..........', value='2'))), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='empty_hdlr_name', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write zero-length name string in hdlr atoms within mdia and minf atoms (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:', name='movie_timescale', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set movie timescale (from 1 to INT_MAX) (default 1000)', argname=None, min=None, max=None, default='1000', choices=())))",
  "FFMpegMuxer(name='pulse', flags='E', help='Pulse audio output', options=(FFMpegAVOption(section='PulseAudio outdev AVOptions:', name='server', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set PulseAudio server', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='PulseAudio outdev AVOptions:', name='name', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set application name (default \"Lavf60.16.100\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='PulseAudio outdev AVOptions:', name='stream_name', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set stream description', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='PulseAudio outdev AVOptions:', name='device', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set device name', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='PulseAudio outdev AVOptions:', name='buffer_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set buffer size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='PulseAudio outdev AVOptions:', name='buffer_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set buffer duration in millisecs (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='PulseAudio outdev AVOptions:', name='prebuf', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set pre-buffering size (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='PulseAudio outdev AVOptions:', name='minreq', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set minimum request size (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=())))",
  "FFMpegMuxer(name='rawvideo', flags='E', help='raw video', options=())",
  "FFMpegMuxer(name='rm', flags='E', help='RealMedia', options=())",
  "FFMpegMuxer(name='roq', flags='E', help='raw id RoQ', options=())",
  "FFMpegMuxer(name='rso', flags='E', help='Lego Mindstorms RSO', options=())",
  "FFMpegMuxer(name='rtp', flags='E', help='RTP output', options=(FFMpegAVOption(section='RTP muxer AVOptions:', name='rtpflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='RTP muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='latm', help='Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC', flags='E..........', value='latm'), FFMpegOptionChoice(name='rfc2190', help='Use RFC 2190 packetization instead of RFC 4629 for H.263', flags='E..........', value='rfc2190'), FFMpegOptionChoice(name='skip_rtcp', help=\"Don't send RTCP sender reports\", flags='E..........', value='skip_rtcp'), FFMpegOptionChoice(name='h264_mode0', help='Use mode 0 for H.264 in RTP', flags='E..........', value='h264_mode0'), FFMpegOptionChoice(name='send_bye', help='Send RTCP BYE packets when finishing', flags='E..........', value='send_bye'))), FFMpegAVOption(section='RTP muxer AVOptions:', name='payload_type', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Specify RTP payload type (from -1 to 127) (default -1)', argname=None, min='-1', max='127', default='-1', choices=()), FFMpegAVOption(section='RTP muxer AVOptions:', name='ssrc', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Stream identifier (from INT_MIN to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='RTP muxer AVOptions:', name='cname', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='CNAME to include in RTCP SR packets', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='RTP muxer AVOptions:', name='seq', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Starting sequence number (from -1 to 65535) (default -1)', argname=None, min='-1', max='65535', default='-1', choices=())))",
  "FFMpegMuxer(name='rtp_mpegts', flags='E', help='RTP/mpegts output format', options=(FFMpegAVOption(section='rtp_mpegts muxer AVOptions:', name='mpegts_muxer_options', type=<FFMpegOptionType.dictionary: 'dictionary'>, flags='E..........', help='set list of options for the MPEG-TS muxer', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='rtp_mpegts muxer AVOptions:', name='rtp_muxer_options', type=<FFMpegOptionType.dictionary: 'dictionary'>, flags='E..........', help='set list of options for the RTP muxer', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegMuxer(name='rtsp', flags='E', help='RTSP output', options=(FFMpegAVOption(section='RTSP muxer AVOptions:', name='rtpflags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='RTP muxer flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='latm', help='Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC', flags='E..........', value='latm'), FFMpegOptionChoice(name='rfc2190', help='Use RFC 2190 packetization instead of RFC 4629 for H.263', flags='E..........', value='rfc2190'), FFMpegOptionChoice(name='skip_rtcp', help=\"Don't send RTCP sender reports\", flags='E..........', value='skip_rtcp'), FFMpegOptionChoice(name='h264_mode0', help='Use mode 0 for H.264 in RTP', flags='E..........', value='h264_mode0'), FFMpegOptionChoice(name='send_bye', help='Send RTCP BYE packets when finishing', flags='E..........', value='send_bye'))), FFMpegAVOption(section='RTSP muxer AVOptions:', name='rtsp_transport', type=<FFMpegOptionType.flags: 'flags'>, flags='ED.........', help='set RTSP transport protocols (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='udp', help='UDP', flags='ED.........', value='udp'), FFMpegOptionChoice(name='tcp', help='TCP', flags='ED.........', value='tcp'))), FFMpegAVOption(section='RTSP muxer AVOptions:', name='min_port', type=<FFMpegOptionType.int: 'int'>, flags='ED.........', help='set minimum local UDP port (from 0 to 65535) (default 5000)', argname=None, min='0', max='65535', default='5000', choices=()), FFMpegAVOption(section='RTSP muxer AVOptions:', name='max_port', type=<FFMpegOptionType.int: 'int'>, flags='ED.........', help='set maximum local UDP port (from 0 to 65535) (default 65000)', argname=None, min='0', max='65535', default='65000', choices=()), FFMpegAVOption(section='RTSP muxer AVOptions:', name='buffer_size', type=<FFMpegOptionType.int: 'int'>, flags='ED.........', help='Underlying protocol send/receive buffer size (from -1 to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='RTSP muxer AVOptions:', name='pkt_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Underlying protocol send packet size (from -1 to INT_MAX) (default 1472)', argname=None, min=None, max=None, default='1472', choices=())))",
  "FFMpegMuxer(name='s16be', flags='E', help='PCM signed 16-bit big-endian', options=())",
  "FFMpegMuxer(name='s16le', flags='E', help='PCM signed 16-bit little-endian', options=())",
  "FFMpegMuxer(name='s24be', flags='E', help='PCM signed 24-bit big-endian', options=())",
  "FFMpegMuxer(name='s24le', flags='E', help='PCM signed 24-bit little-endian', options=())",
  "FFMpegMuxer(name='s32be', flags='E', help='PCM signed 32-bit big-endian', options=())",
  "FFMpegMuxer(name='s32le', flags='E', help='PCM signed 32-bit little-endian', options=())",
  "FFMpegMuxer(name='s8', flags='E', help='PCM signed 8-bit', options=())",
  "FFMpegMuxer(name='sap', flags='E', help='SAP output', options=())",
  "FFMpegMuxer(name='sbc', flags='E', help='raw SBC', options=())",
  "FFMpegMuxer(name='scc', flags='E', help='Scenarist Closed Captions', options=())",
  "FFMpegMuxer(name='segment', flags='E', help='segment', options=(FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='reference_stream', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set reference stream (default \"auto\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_format', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set container format used for the segments', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_format_options', type=<FFMpegOptionType.dictionary: 'dictionary'>, flags='E..........', help='set list of options for the container format used for the segments', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_list', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set the segment list filename', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_header_filename', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='write a single file containing the header', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_list_flags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='set flags affecting segment list generation (default cache)', argname=None, min=None, max=None, default='cache', choices=(FFMpegOptionChoice(name='cache', help='allow list caching', flags='E..........', value='cache'), FFMpegOptionChoice(name='live', help='enable live-friendly list generation (useful for HLS)', flags='E..........', value='live'))), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_list_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set the maximum number of playlist entries (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_list_type', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set the segment list type (from -1 to 4) (default -1)', argname=None, min='-1', max='4', default='-1', choices=(FFMpegOptionChoice(name='flat', help='flat format', flags='E..........', value='0'), FFMpegOptionChoice(name='csv', help='csv format', flags='E..........', value='1'), FFMpegOptionChoice(name='ext', help='extended format', flags='E..........', value='3'), FFMpegOptionChoice(name='ffconcat', help='ffconcat format', flags='E..........', value='4'), FFMpegOptionChoice(name='m3u8', help='M3U8 format', flags='E..........', value='2'), FFMpegOptionChoice(name='hls', help='Apple HTTP Live Streaming compatible', flags='E..........', value='2'))), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_atclocktime', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='set segment to be cut at clocktime (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_clocktime_offset', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='set segment clocktime offset (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_clocktime_wrap_duration', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='set segment clocktime wrapping duration (default INT64_MAX)', argname=None, min=None, max=None, default='INT64_MAX', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_time', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='set segment duration (default 2)', argname=None, min=None, max=None, default='2', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_time_delta', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='set approximation value used for the segment times (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='min_seg_duration', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='set minimum segment duration (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_times', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set segment split time points', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_frames', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set segment split frame numbers', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_wrap', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set number after which the index wraps (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_list_entry_prefix', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set base url prefix for segments', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_start_number', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set the sequence number of the first segment (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='segment_wrap_number', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set the number of wrap before the first segment (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='strftime', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='set filename expansion with strftime at segment creation (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='increment_tc', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='increment timecode between each segment (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='break_non_keyframes', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='allow breaking segments on non-keyframes (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='individual_header_trailer', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write header/trailer to each segment (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='write_header_trailer', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write a header to the first segment and a trailer to the last one (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='reset_timestamps', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='reset timestamps at the beginning of each segment (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='initial_offset', type=<FFMpegOptionType.duration: 'duration'>, flags='E..........', help='set initial timestamp offset (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='(stream) segment muxer AVOptions:', name='write_empty_segments', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help=\"allow writing empty 'filler' segments (default false)\", argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegMuxer(name='smjpeg', flags='E', help='Loki SDL MJPEG', options=())",
  "FFMpegMuxer(name='smoothstreaming', flags='E', help='Smooth Streaming Muxer', options=(FFMpegAVOption(section='smooth streaming muxer AVOptions:', name='window_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='number of fragments kept in the manifest (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='smooth streaming muxer AVOptions:', name='extra_window_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='number of fragments kept outside of the manifest before removing from disk (from 0 to INT_MAX) (default 5)', argname=None, min=None, max=None, default='5', choices=()), FFMpegAVOption(section='smooth streaming muxer AVOptions:', name='lookahead_count', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='number of lookahead fragments (from 0 to INT_MAX) (default 2)', argname=None, min=None, max=None, default='2', choices=()), FFMpegAVOption(section='smooth streaming muxer AVOptions:', name='min_frag_duration', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='minimum fragment duration (in microseconds) (from 0 to INT_MAX) (default 5000000)', argname=None, min=None, max=None, default='5000000', choices=()), FFMpegAVOption(section='smooth streaming muxer AVOptions:', name='remove_at_exit', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='remove all fragments when finished (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegMuxer(name='sox', flags='E', help='SoX (Sound eXchange) native', options=())",
  "FFMpegMuxer(name='spdif', flags='E', help='IEC 61937 (used on S/PDIF - IEC958)', options=(FFMpegAVOption(section='spdif AVOptions:', name='spdif_flags', type=<FFMpegOptionType.flags: 'flags'>, flags='E..........', help='IEC 61937 encapsulation flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='be', help='output in big-endian format (for use as s16be)', flags='E..........', value='be'),)), FFMpegAVOption(section='spdif AVOptions:', name='dtshd_rate', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='mux complete DTS frames in HD mode at the specified IEC958 rate (in Hz, default 0=disabled) (from 0 to 768000) (default 0)', argname=None, min='0', max='768000', default='0', choices=()), FFMpegAVOption(section='spdif AVOptions:', name='dtshd_fallback_time', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='min secs to strip HD for after an overflow (-1: till the end, default 60) (from -1 to INT_MAX) (default 60)', argname=None, min=None, max=None, default='60', choices=())))",
  "FFMpegMuxer(name='spx', flags='E', help='Ogg Speex', options=(FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='serial_offset', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='serial number offset (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='oggpagesize', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Set preferred Ogg page size. (from 0 to 65025) (default 0)', argname=None, min='0', max='65025', default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='pagesize', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='preferred page size in bytes (deprecated) (from 0 to 65025) (default 0)', argname=None, min='0', max='65025', default='0', choices=()), FFMpegAVOption(section='Ogg (audio/video/Speex/Opus) muxer AVOptions:', name='page_duration', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='preferred page duration, in microseconds (from 0 to I64_MAX) (default 1000000)', argname=None, min=None, max=None, default='1000000', choices=())))",
  "FFMpegMuxer(name='srt', flags='E', help='SubRip subtitle', options=())",
  "FFMpegMuxer(name='streamhash', flags='E', help='Per-stream hash testing', options=(FFMpegAVOption(section='(stream) hash muxer AVOptions:', name='hash', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set hash to use (default \"sha256\")', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegMuxer(name='sup', flags='E', help='raw HDMV Presentation Graphic Stream subtitles', options=())",
  "FFMpegMuxer(name='svcd', flags='E', help='MPEG-2 PS (SVCD)', options=(FFMpegAVOption(section='mpeg/(s)vcd/vob/dvd muxer AVOptions:', name='muxrate', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='(from 0 to 1.67772e+09) (default 0)', argname=None, min='0', max='1', default='0', choices=()), FFMpegAVOption(section='mpeg/(s)vcd/vob/dvd muxer AVOptions:', name='preload', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Initial demux-decode delay in microseconds. (from 0 to INT_MAX) (default 500000)', argname=None, min=None, max=None, default='500000', choices=())))",
  "FFMpegMuxer(name='swf', flags='E', help='SWF (ShockWave Flash)', options=())",
  "FFMpegMuxer(name='tee', flags='E', help='Multiple muxer tee', options=(FFMpegAVOption(section='Tee muxer AVOptions:', name='use_fifo', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Use fifo pseudo-muxer to separate actual muxers from encoder (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='Tee muxer AVOptions:', name='fifo_options', type=<FFMpegOptionType.dictionary: 'dictionary'>, flags='E..........', help='fifo pseudo-muxer options', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegMuxer(name='truehd', flags='E', help='raw TrueHD', options=())",
  "FFMpegMuxer(name='tta', flags='E', help='TTA (True Audio)', options=())",
  "FFMpegMuxer(name='ttml', flags='E', help='TTML subtitle', options=())",
  "FFMpegMuxer(name='u16be', flags='E', help='PCM unsigned 16-bit big-endian', options=())",
  "FFMpegMuxer(name='u16le', flags='E', help='PCM unsigned 16-bit little-endian', options=())",
  "FFMpegMuxer(name='u24be', flags='E', help='PCM unsigned 24-bit big-endian', options=())",
  "FFMpegMuxer(name='u24le', flags='E', help='PCM unsigned 24-bit little-endian', options=())",
  "FFMpegMuxer(name='u32be', flags='E', help='PCM unsigned 32-bit big-endian', options=())",
  "FFMpegMuxer(name='u32le', flags='E', help='PCM unsigned 32-bit little-endian', options=())",
  "FFMpegMuxer(name='u8', flags='E', help='PCM unsigned 8-bit', options=())",
  "FFMpegMuxer(name='uncodedframecrc', flags='E', help='uncoded framecrc testing', options=())",
  "FFMpegMuxer(name='vc1', flags='E', help='raw VC-1 video', options=())",
  "FFMpegMuxer(name='vc1test', flags='E', help='VC-1 test bitstream', options=())",
  "FFMpegMuxer(name='vcd', flags='E', help='MPEG-1 Systems / MPEG program stream (VCD)', options=(FFMpegAVOption(section='mpeg/(s)vcd/vob/dvd muxer AVOptions:', name='muxrate', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='(from 0 to 1.67772e+09) (default 0)', argname=None, min='0', max='1', default='0', choices=()), FFMpegAVOption(section='mpeg/(s)vcd/vob/dvd muxer AVOptions:', name='preload', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Initial demux-decode delay in microseconds. (from 0 to INT_MAX) (default 500000)', argname=None, min=None, max=None, default='500000', choices=())))",
  "FFMpegMuxer(name='vidc', flags='E', help='PCM Archimedes VIDC', options=())",
  "FFMpegMuxer(name='vob', flags='E', help='MPEG-2 PS (VOB)', options=(FFMpegAVOption(section='mpeg/(s)vcd/vob/dvd muxer AVOptions:', name='muxrate', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='(from 0 to 1.67772e+09) (default 0)', argname=None, min='0', max='1', default='0', choices=()), FFMpegAVOption(section='mpeg/(s)vcd/vob/dvd muxer AVOptions:', name='preload', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Initial demux-decode delay in microseconds. (from 0 to INT_MAX) (default 500000)', argname=None, min=None, max=None, default='500000', choices=())))",
  "FFMpegMuxer(name='voc', flags='E', help='Creative Voice', options=())",
  "FFMpegMuxer(name='vvc', flags='E', help='raw H.266/VVC video', options=())",
  "FFMpegMuxer(name='w64', flags='E', help='Sony Wave64', options=())",
  "FFMpegMuxer(name='wav', flags='E', help='WAV / WAVE (Waveform Audio)', options=(FFMpegAVOption(section='WAV muxer AVOptions:', name='write_bext', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Write BEXT chunk. (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='WAV muxer AVOptions:', name='write_peak', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Write Peak Envelope chunk. (from 0 to 2) (default off)', argname=None, min='0', max='2', default='off', choices=(FFMpegOptionChoice(name='off', help='Do not write peak chunk.', flags='E..........', value='0'), FFMpegOptionChoice(name='on', help='Append peak chunk after wav data.', flags='E..........', value='1'), FFMpegOptionChoice(name='only', help='Write only peak chunk, omit wav data.', flags='E..........', value='2'))), FFMpegAVOption(section='WAV muxer AVOptions:', name='rf64', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Use RF64 header rather than RIFF for large files. (from -1 to 1) (default never)', argname=None, min='-1', max='1', default='never', choices=(FFMpegOptionChoice(name='auto', help='Write RF64 header if file grows large enough.', flags='E..........', value='-1'), FFMpegOptionChoice(name='always', help='Always write RF64 header regardless of file size.', flags='E..........', value='1'), FFMpegOptionChoice(name='never', help='Never write RF64 header regardless of file size.', flags='E..........', value='0'))), FFMpegAVOption(section='WAV muxer AVOptions:', name='peak_block_size', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of audio samples used to generate each peak frame. (from 0 to 65536) (default 256)', argname=None, min='0', max='65536', default='256', choices=()), FFMpegAVOption(section='WAV muxer AVOptions:', name='peak_format', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='The format of the peak envelope data (1: uint8, 2: uint16). (from 1 to 2) (default 2)', argname=None, min='1', max='2', default='2', choices=()), FFMpegAVOption(section='WAV muxer AVOptions:', name='peak_ppv', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of peak points per peak value (1 or 2). (from 1 to 2) (default 2)', argname=None, min='1', max='2', default='2', choices=())))",
  "FFMpegMuxer(name='webm', flags='E', help='WebM', options=(FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='reserve_index_space', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Reserve a given amount of space (in bytes) at the beginning of the file for the index (cues). (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='cues_to_front', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Move Cues (the index) to the front by shifting data if necessary (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='cluster_size_limit', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Store at most the provided amount of bytes in a cluster.  (from -1 to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='cluster_time_limit', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='Store at most the provided number of milliseconds in a cluster. (from -1 to I64_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='dash', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Create a WebM file conforming to WebM DASH specification (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='dash_track_number', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Track number for the DASH stream (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='live', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Write files assuming it is a live stream. (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='allow_raw_vfw', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='allow RAW VFW mode (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='flipped_raw_rgb', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='Raw RGB bitmaps in VFW mode are stored bottom-up (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='write_crc32', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='write a CRC32 element inside every Level 1 element (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='matroska/webm muxer AVOptions:', name='default_mode', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help=\"Controls how a track's FlagDefault is inferred (from 0 to 2) (default passthrough)\", argname=None, min='0', max='2', default='passthrough', choices=(FFMpegOptionChoice(name='infer', help='For each track type, mark each track of disposition default as default; if none exists, mark the first track as default.', flags='E..........', value='0'), FFMpegOptionChoice(name='infer_no_subs', help='For each track type, mark each track of disposition default as default; for audio and video: if none exists, mark the first track as default.', flags='E..........', value='1'), FFMpegOptionChoice(name='passthrough', help='Use the disposition flag as-is', flags='E..........', value='2')))))",
  "FFMpegMuxer(name='webm_chunk', flags='E', help='WebM Chunk Muxer', options=(FFMpegAVOption(section='WebM Chunk Muxer AVOptions:', name='chunk_start_index', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='start index of the chunk (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='WebM Chunk Muxer AVOptions:', name='header', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='filename of the header where the initialization data will be written', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='WebM Chunk Muxer AVOptions:', name='audio_chunk_duration', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='duration of each chunk in milliseconds (from 0 to INT_MAX) (default 5000)', argname=None, min=None, max=None, default='5000', choices=()), FFMpegAVOption(section='WebM Chunk Muxer AVOptions:', name='method', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set the HTTP method', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegMuxer(name='webm_dash_manifest', flags='E', help='WebM DASH Manifest', options=(FFMpegAVOption(section='WebM DASH Manifest muxer AVOptions:', name='adaptation_sets', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='Adaptation sets. Syntax: id=0,streams=0,1,2 id=1,streams=3,4 and so on', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='WebM DASH Manifest muxer AVOptions:', name='live', type=<FFMpegOptionType.boolean: 'boolean'>, flags='E..........', help='create a live stream manifest (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='WebM DASH Manifest muxer AVOptions:', name='chunk_start_index', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='start index of the chunk (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='WebM DASH Manifest muxer AVOptions:', name='chunk_duration_ms', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='duration of each chunk (in milliseconds) (from 0 to INT_MAX) (default 1000)', argname=None, min=None, max=None, default='1000', choices=()), FFMpegAVOption(section='WebM DASH Manifest muxer AVOptions:', name='utc_timing_url', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='URL of the page that will return the UTC timestamp in ISO format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='WebM DASH Manifest muxer AVOptions:', name='time_shift_buffer_depth', type=<FFMpegOptionType.double: 'double'>, flags='E..........', help='Smallest time (in seconds) shifting buffer for which any Representation is guaranteed to be available. (from 1 to DBL_MAX) (default 60)', argname=None, min=None, max=None, default='60', choices=()), FFMpegAVOption(section='WebM DASH Manifest muxer AVOptions:', name='minimum_update_period', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Minimum Update Period (in seconds) of the manifest. (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=())))",
  "FFMpegMuxer(name='webp', flags='E', help='WebP', options=(FFMpegAVOption(section='WebP muxer AVOptions:', name='loop', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='Number of times to loop the output: 0 - infinite loop (from 0 to 65535) (default 1)', argname=None, min='0', max='65535', default='1', choices=()),))",
  "FFMpegMuxer(name='webvtt', flags='E', help='WebVTT subtitle', options=())",
  "FFMpegMuxer(name='wsaud', flags='E', help='Westwood Studios audio', options=())",
  "FFMpegMuxer(name='wtv', flags='E', help='Windows Television (WTV)', options=())",
  "FFMpegMuxer(name='wv', flags='E', help='raw WavPack', options=())",
  "FFMpegMuxer(name='xv', flags='E', help='XV (XVideo) output device', options=(FFMpegAVOption(section='xvideo outdev AVOptions:', name='display_name', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set display name', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='xvideo outdev AVOptions:', name='window_id', type=<FFMpegOptionType.int64: 'int64'>, flags='E..........', help='set existing window id (from 0 to I64_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='xvideo outdev AVOptions:', name='window_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='E..........', help='set window forced size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='xvideo outdev AVOptions:', name='window_title', type=<FFMpegOptionType.string: 'string'>, flags='E..........', help='set window title', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='xvideo outdev AVOptions:', name='window_x', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set window x offset (from -2.14748e+09 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='xvideo outdev AVOptions:', name='window_y', type=<FFMpegOptionType.int: 'int'>, flags='E..........', help='set window y offset (from -2.14748e+09 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=())))",
  "FFMpegMuxer(name='yuv4mpegpipe', flags='E', help='YUV4MPEG pipe', options=())",
  "FFMpegDemuxer(name='3dostr', flags='D', help='3DO STR', options=())",
  "FFMpegDemuxer(name='4xm', flags='D', help='4X Technologies', options=())",
  "FFMpegDemuxer(name='aa', flags='D', help='Audible AA format files', options=(FFMpegAVOption(section='aa AVOptions:', name='aa_fixed_key', type=<FFMpegOptionType.binary: 'binary'>, flags='.D.........', help='Fixed key used for handling Audible AA files', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegDemuxer(name='aac', flags='D', help='raw ADTS AAC (Advanced Audio Coding)', options=())",
  "FFMpegDemuxer(name='aax', flags='D', help='CRI AAX', options=())",
  "FFMpegDemuxer(name='ac3', flags='D', help='raw AC-3', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='ac4', flags='D', help='raw AC-4', options=())",
  "FFMpegDemuxer(name='ace', flags='D', help='tri-Ace Audio Container', options=())",
  "FFMpegDemuxer(name='acm', flags='D', help='Interplay ACM', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='act', flags='D', help='ACT Voice file format', options=())",
  "FFMpegDemuxer(name='adf', flags='D', help='Artworx Data Format', options=(FFMpegAVOption(section='Artworx Data Format demuxer AVOptions:', name='linespeed', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set simulated line speed (bytes per second) (from 1 to INT_MAX) (default 6000)', argname=None, min=None, max=None, default='6000', choices=()), FFMpegAVOption(section='Artworx Data Format demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size, such as 640x480 or hd720.', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='Artworx Data Format demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set framerate (frames per second) (default \"25\")', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='adp', flags='D', help='ADP', options=())",
  "FFMpegDemuxer(name='ads', flags='D', help='Sony PS2 ADS', options=())",
  "FFMpegDemuxer(name='adx', flags='D', help='CRI ADX', options=())",
  "FFMpegDemuxer(name='aea', flags='D', help='MD STUDIO audio', options=())",
  "FFMpegDemuxer(name='afc', flags='D', help='AFC', options=())",
  "FFMpegDemuxer(name='aiff', flags='D', help='Audio IFF', options=())",
  "FFMpegDemuxer(name='aix', flags='D', help='CRI AIX', options=())",
  "FFMpegDemuxer(name='alaw', flags='D', help='PCM A-law', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='alias_pix', flags='D', help='Alias/Wavefront PIX image', options=(FFMpegAVOption(section='alias_pix demuxer AVOptions:', name='pattern_type', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set pattern type (from 0 to INT_MAX) (default 4)', argname=None, min=None, max=None, default='4', choices=(FFMpegOptionChoice(name='glob_sequence', help='select glob/sequence pattern type', flags='.D.........', value='0'), FFMpegOptionChoice(name='glob', help='select glob pattern type', flags='.D.........', value='1'), FFMpegOptionChoice(name='sequence', help='select sequence pattern type', flags='.D.........', value='2'), FFMpegOptionChoice(name='none', help='disable pattern matching', flags='.D.........', value='3'))), FFMpegAVOption(section='alias_pix demuxer AVOptions:', name='start_number', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set first number in the sequence (from INT_MIN to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='alias_pix demuxer AVOptions:', name='start_number_range', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set range for looking at the first sequence number (from 1 to INT_MAX) (default 5)', argname=None, min=None, max=None, default='5', choices=()), FFMpegAVOption(section='alias_pix demuxer AVOptions:', name='ts_from_file', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help=\"set frame timestamp from file's one (from 0 to 2) (default none)\", argname=None, min='0', max='2', default='none', choices=(FFMpegOptionChoice(name='none', help='none', flags='.D.........', value='0'), FFMpegOptionChoice(name='sec', help='second precision', flags='.D.........', value='1'), FFMpegOptionChoice(name='ns', help='nano second precision', flags='.D.........', value='2'))), FFMpegAVOption(section='alias_pix demuxer AVOptions:', name='export_path_metadata', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='enable metadata containing input path information (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='alias_pix demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='alias_pix demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='alias_pix demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='alias_pix demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='alp', flags='D', help='LEGO Racers ALP', options=())",
  "FFMpegDemuxer(name='alsa', flags='D', help='ALSA audio input', options=(FFMpegAVOption(section='ALSA indev AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 48000)', argname=None, min=None, max=None, default='48000', choices=()), FFMpegAVOption(section='ALSA indev AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 2)', argname=None, min=None, max=None, default='2', choices=())))",
  "FFMpegDemuxer(name='amr', flags='D', help='3GPP AMR', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='amrnb', flags='D', help='raw AMR-NB', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='amrwb', flags='D', help='raw AMR-WB', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='anm', flags='D', help='Deluxe Paint Animation', options=())",
  "FFMpegDemuxer(name='apac', flags='D', help='raw APAC', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='apc', flags='D', help='CRYO APC', options=())",
  "FFMpegDemuxer(name='ape', flags='D', help=\"Monkey's Audio\", options=())",
  "FFMpegDemuxer(name='apm', flags='D', help='Ubisoft Rayman 2 APM', options=())",
  "FFMpegDemuxer(name='apng', flags='D', help='Animated Portable Network Graphics', options=(FFMpegAVOption(section='APNG demuxer AVOptions:', name='ignore_loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='ignore loop setting (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='APNG demuxer AVOptions:', name='max_fps', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='maximum framerate (0 is no limit) (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='APNG demuxer AVOptions:', name='default_fps', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='default framerate (0 is as fast as possible) (from 0 to INT_MAX) (default 15)', argname=None, min=None, max=None, default='framerate', choices=())))",
  "FFMpegDemuxer(name='aptx', flags='D', help='raw aptX', options=(FFMpegAVOption(section='aptx (hd) demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 48000)', argname=None, min=None, max=None, default='48000', choices=()),))",
  "FFMpegDemuxer(name='aptx_hd', flags='D', help='raw aptX HD', options=(FFMpegAVOption(section='aptx (hd) demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 48000)', argname=None, min=None, max=None, default='48000', choices=()),))",
  "FFMpegDemuxer(name='aqtitle', flags='D', help='AQTitle subtitles', options=(FFMpegAVOption(section='aqtdec AVOptions:', name='subfps', type=<FFMpegOptionType.rational: 'rational'>, flags='.D...S.....', help='set the movie frame rate (from 0 to INT_MAX) (default 25/1)', argname=None, min=None, max=None, default='25', choices=()),))",
  "FFMpegDemuxer(name='argo_asf', flags='D', help='Argonaut Games ASF', options=())",
  "FFMpegDemuxer(name='argo_brp', flags='D', help='Argonaut Games BRP', options=())",
  "FFMpegDemuxer(name='argo_cvg', flags='D', help='Argonaut Games CVG', options=())",
  "FFMpegDemuxer(name='asf', flags='D', help='ASF (Advanced / Active Streaming Format)', options=(FFMpegAVOption(section='asf demuxer AVOptions:', name='no_resync_search', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help=\"Don't try to resynchronize by looking for a certain optional start code (default false)\", argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='asf demuxer AVOptions:', name='export_xmp', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='Export full XMP metadata (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='asf_o', flags='D', help='ASF (Advanced / Active Streaming Format)', options=())",
  "FFMpegDemuxer(name='ass', flags='D', help='SSA (SubStation Alpha) subtitle', options=())",
  "FFMpegDemuxer(name='ast', flags='D', help='AST (Audio Stream)', options=())",
  "FFMpegDemuxer(name='au', flags='D', help='Sun AU', options=())",
  "FFMpegDemuxer(name='av1', flags='D', help='AV1 Annex B', options=(FFMpegAVOption(section='AV1 Annex B/low overhead OBU demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegDemuxer(name='avi', flags='D', help='AVI (Audio Video Interleaved)', options=(FFMpegAVOption(section='avi AVOptions:', name='use_odml', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='use odml index (default true)', argname=None, min=None, max=None, default='true', choices=()),))",
  "FFMpegDemuxer(name='avr', flags='D', help='AVR (Audio Visual Research)', options=())",
  "FFMpegDemuxer(name='avs', flags='D', help='Argonaut Games Creature Shock', options=())",
  "FFMpegDemuxer(name='avs2', flags='D', help='raw AVS2-P2/IEEE1857.4', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='avs3', flags='D', help='raw AVS3-P2/IEEE1857.10', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='bethsoftvid', flags='D', help='Bethesda Softworks VID', options=())",
  "FFMpegDemuxer(name='bfi', flags='D', help='Brute Force & Ignorance', options=())",
  "FFMpegDemuxer(name='bfstm', flags='D', help='BFSTM (Binary Cafe Stream)', options=())",
  "FFMpegDemuxer(name='bin', flags='D', help='Binary text', options=(FFMpegAVOption(section='Binary text demuxer AVOptions:', name='linespeed', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set simulated line speed (bytes per second) (from 1 to INT_MAX) (default 6000)', argname=None, min=None, max=None, default='6000', choices=()), FFMpegAVOption(section='Binary text demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size, such as 640x480 or hd720.', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='Binary text demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set framerate (frames per second) (default \"25\")', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='bink', flags='D', help='Bink', options=())",
  "FFMpegDemuxer(name='binka', flags='D', help='Bink Audio', options=())",
  "FFMpegDemuxer(name='bit', flags='D', help='G.729 BIT file format', options=())",
  "FFMpegDemuxer(name='bitpacked', flags='D', help='Bitpacked', options=(FFMpegAVOption(section='bitpacked demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set pixel format (default \"yuv420p\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='bitpacked demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set frame size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='bitpacked demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set frame rate (default \"25\")', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='bmp_pipe', flags='D', help='piped bmp sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='bmv', flags='D', help='Discworld II BMV', options=())",
  "FFMpegDemuxer(name='boa', flags='D', help='Black Ops Audio', options=())",
  "FFMpegDemuxer(name='bonk', flags='D', help='raw Bonk', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='brender_pix', flags='D', help='BRender PIX image', options=(FFMpegAVOption(section='brender_pix demuxer AVOptions:', name='pattern_type', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set pattern type (from 0 to INT_MAX) (default 4)', argname=None, min=None, max=None, default='4', choices=(FFMpegOptionChoice(name='glob_sequence', help='select glob/sequence pattern type', flags='.D.........', value='0'), FFMpegOptionChoice(name='glob', help='select glob pattern type', flags='.D.........', value='1'), FFMpegOptionChoice(name='sequence', help='select sequence pattern type', flags='.D.........', value='2'), FFMpegOptionChoice(name='none', help='disable pattern matching', flags='.D.........', value='3'))), FFMpegAVOption(section='brender_pix demuxer AVOptions:', name='start_number', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set first number in the sequence (from INT_MIN to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='brender_pix demuxer AVOptions:', name='start_number_range', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set range for looking at the first sequence number (from 1 to INT_MAX) (default 5)', argname=None, min=None, max=None, default='5', choices=()), FFMpegAVOption(section='brender_pix demuxer AVOptions:', name='ts_from_file', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help=\"set frame timestamp from file's one (from 0 to 2) (default none)\", argname=None, min='0', max='2', default='none', choices=(FFMpegOptionChoice(name='none', help='none', flags='.D.........', value='0'), FFMpegOptionChoice(name='sec', help='second precision', flags='.D.........', value='1'), FFMpegOptionChoice(name='ns', help='nano second precision', flags='.D.........', value='2'))), FFMpegAVOption(section='brender_pix demuxer AVOptions:', name='export_path_metadata', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='enable metadata containing input path information (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='brender_pix demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='brender_pix demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='brender_pix demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='brender_pix demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='brstm', flags='D', help='BRSTM (Binary Revolution Stream)', options=())",
  "FFMpegDemuxer(name='c93', flags='D', help='Interplay C93', options=())",
  "FFMpegDemuxer(name='caf', flags='D', help='Apple CAF (Core Audio Format)', options=())",
  "FFMpegDemuxer(name='cavsvideo', flags='D', help='raw Chinese AVS (Audio Video Standard)', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='cdg', flags='D', help='CD Graphics', options=())",
  "FFMpegDemuxer(name='cdxl', flags='D', help='Commodore CDXL video', options=(FFMpegAVOption(section='CDXL demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 8000 to INT_MAX) (default 11025)', argname=None, min=None, max=None, default='11025', choices=()), FFMpegAVOption(section='CDXL demuxer AVOptions:', name='frame_rate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"15\")', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='cine', flags='D', help='Phantom Cine', options=())",
  "FFMpegDemuxer(name='codec2', flags='D', help='codec2 .c2 demuxer', options=(FFMpegAVOption(section='codec2 demuxer AVOptions:', name='frames_per_packet', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Number of frames to read at a time. Higher = faster decoding, lower granularity (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()),))",
  "FFMpegDemuxer(name='codec2raw', flags='D', help='raw codec2 demuxer', options=(FFMpegAVOption(section='codec2raw demuxer AVOptions:', name='mode', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='codec2 mode [mandatory] (from -1 to 8) (default -1)', argname=None, min='-1', max='8', default='-1', choices=(FFMpegOptionChoice(name='3200', help='3200', flags='.D.........', value='0'), FFMpegOptionChoice(name='2400', help='2400', flags='.D.........', value='1'), FFMpegOptionChoice(name='1600', help='1600', flags='.D.........', value='2'), FFMpegOptionChoice(name='1400', help='1400', flags='.D.........', value='3'), FFMpegOptionChoice(name='1300', help='1300', flags='.D.........', value='4'), FFMpegOptionChoice(name='1200', help='1200', flags='.D.........', value='5'), FFMpegOptionChoice(name='700', help='700', flags='.D.........', value='6'), FFMpegOptionChoice(name='700B', help='700B', flags='.D.........', value='7'), FFMpegOptionChoice(name='700C', help='700C', flags='.D.........', value='8'))), FFMpegAVOption(section='codec2raw demuxer AVOptions:', name='frames_per_packet', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Number of frames to read at a time. Higher = faster decoding, lower granularity (from 1 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=())))",
  "FFMpegDemuxer(name='concat', flags='D', help='Virtual concatenation script', options=(FFMpegAVOption(section='concat demuxer AVOptions:', name='safe', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='enable safe mode (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='concat demuxer AVOptions:', name='auto_convert', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='automatically convert bitstream format (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='concat demuxer AVOptions:', name='segment_time_metadata', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='output file segment start time and duration as packet metadata (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='cri_pipe', flags='D', help='piped cri sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='dash', flags='D', help='Dynamic Adaptive Streaming over HTTP', options=(FFMpegAVOption(section='dash AVOptions:', name='allowed_extensions', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='List of file extensions that dash is allowed to access (default \"aac,m4a,m4s,m4v,mov,mp4,webm,ts\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='dash AVOptions:', name='cenc_decryption_key', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='Media decryption key (hex)', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='data', flags='D', help='raw data', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='daud', flags='D', help='D-Cinema audio', options=())",
  "FFMpegDemuxer(name='dcstr', flags='D', help='Sega DC STR', options=())",
  "FFMpegDemuxer(name='dds_pipe', flags='D', help='piped dds sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='derf', flags='D', help='Xilam DERF', options=())",
  "FFMpegDemuxer(name='dfa', flags='D', help='Chronomaster DFA', options=())",
  "FFMpegDemuxer(name='dfpwm', flags='D', help='raw DFPWM1a', options=(FFMpegAVOption(section='dfpwm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 48000)', argname=None, min=None, max=None, default='48000', choices=()), FFMpegAVOption(section='dfpwm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='dfpwm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='dhav', flags='D', help='Video DAV', options=())",
  "FFMpegDemuxer(name='dirac', flags='D', help='raw Dirac', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='dnxhd', flags='D', help='raw DNxHD (SMPTE VC-3)', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='dpx_pipe', flags='D', help='piped dpx sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='dsf', flags='D', help='DSD Stream File (DSF)', options=())",
  "FFMpegDemuxer(name='dsicin', flags='D', help='Delphine Software International CIN', options=())",
  "FFMpegDemuxer(name='dss', flags='D', help='Digital Speech Standard (DSS)', options=())",
  "FFMpegDemuxer(name='dts', flags='D', help='raw DTS', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='dtshd', flags='D', help='raw DTS-HD', options=())",
  "FFMpegDemuxer(name='dv', flags='D', help='DV (Digital Video)', options=())",
  "FFMpegDemuxer(name='dvbsub', flags='D', help='raw dvbsub', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='dvbtxt', flags='D', help='dvbtxt', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='dxa', flags='D', help='DXA', options=())",
  "FFMpegDemuxer(name='ea', flags='D', help='Electronic Arts Multimedia', options=(FFMpegAVOption(section='ea demuxer AVOptions:', name='merge_alpha', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.V.......', help='return VP6 alpha in the main video stream (default false)', argname=None, min=None, max=None, default='false', choices=()),))",
  "FFMpegDemuxer(name='ea_cdata', flags='D', help='Electronic Arts cdata', options=())",
  "FFMpegDemuxer(name='eac3', flags='D', help='raw E-AC-3', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='epaf', flags='D', help='Ensoniq Paris Audio File', options=())",
  "FFMpegDemuxer(name='evc', flags='D', help='EVC Annex B', options=(FFMpegAVOption(section='EVC Annex B demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegDemuxer(name='exr_pipe', flags='D', help='piped exr sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='f32be', flags='D', help='PCM 32-bit floating-point big-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='f32le', flags='D', help='PCM 32-bit floating-point little-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='f64be', flags='D', help='PCM 64-bit floating-point big-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='f64le', flags='D', help='PCM 64-bit floating-point little-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='fbdev', flags='D', help='Linux framebuffer', options=(FFMpegAVOption(section='fbdev indev AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegDemuxer(name='ffmetadata', flags='D', help='FFmpeg metadata in text', options=())",
  "FFMpegDemuxer(name='film_cpk', flags='D', help='Sega FILM / CPK', options=())",
  "FFMpegDemuxer(name='filmstrip', flags='D', help='Adobe Filmstrip', options=())",
  "FFMpegDemuxer(name='fits', flags='D', help='Flexible Image Transport System', options=(FFMpegAVOption(section='FITS demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the framerate (default \"1\")', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegDemuxer(name='flac', flags='D', help='raw FLAC', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='flic', flags='D', help='FLI/FLC/FLX animation', options=())",
  "FFMpegDemuxer(name='flv', flags='D', help='FLV (Flash Video)', options=(FFMpegAVOption(section='(live) flv/kux demuxer AVOptions:', name='flv_metadata', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.V.......', help='Allocate streams according to the onMetaData array (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(live) flv/kux demuxer AVOptions:', name='flv_full_metadata', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.V.......', help='Dump full metadata of the onMetadata (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(live) flv/kux demuxer AVOptions:', name='flv_ignore_prevtag', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.V.......', help='Ignore the Size of previous tag (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(live) flv/kux demuxer AVOptions:', name='missing_streams', type=<FFMpegOptionType.int: 'int'>, flags='.D.V..XR...', help='(from 0 to 255) (default 0)', argname=None, min='0', max='255', default='0', choices=())))",
  "FFMpegDemuxer(name='frm', flags='D', help='Megalux Frame', options=())",
  "FFMpegDemuxer(name='fsb', flags='D', help='FMOD Sample Bank', options=())",
  "FFMpegDemuxer(name='fwse', flags='D', help=\"Capcom's MT Framework sound\", options=())",
  "FFMpegDemuxer(name='g722', flags='D', help='raw G.722', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='g723_1', flags='D', help='G.723.1', options=())",
  "FFMpegDemuxer(name='g726', flags='D', help='raw big-endian G.726 (\"left aligned\")', options=(FFMpegAVOption(section='G.726 demuxer AVOptions:', name='code_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Bits per G.726 code (from 2 to 5) (default 4)', argname=None, min='2', max='5', default='4', choices=()), FFMpegAVOption(section='G.726 demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 8000)', argname=None, min=None, max=None, default='8000', choices=())))",
  "FFMpegDemuxer(name='g726le', flags='D', help='raw little-endian G.726 (\"right aligned\")', options=(FFMpegAVOption(section='G.726 demuxer AVOptions:', name='code_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Bits per G.726 code (from 2 to 5) (default 4)', argname=None, min='2', max='5', default='4', choices=()), FFMpegAVOption(section='G.726 demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 8000)', argname=None, min=None, max=None, default='8000', choices=())))",
  "FFMpegDemuxer(name='g729', flags='D', help='G.729 raw format demuxer', options=(FFMpegAVOption(section='g729 demuxer AVOptions:', name='bit_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 8000)', argname=None, min=None, max=None, default='8000', choices=()),))",
  "FFMpegDemuxer(name='gdv', flags='D', help='Gremlin Digital Video', options=())",
  "FFMpegDemuxer(name='gem_pipe', flags='D', help='piped gem sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='genh', flags='D', help='GENeric Header', options=())",
  "FFMpegDemuxer(name='gif', flags='D', help='CompuServe Graphics Interchange Format (GIF)', options=(FFMpegAVOption(section='GIF demuxer AVOptions:', name='min_delay', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='minimum valid delay between frames (in hundredths of second) (from 0 to 6000) (default 2)', argname=None, min='0', max='6000', default='2', choices=()), FFMpegAVOption(section='GIF demuxer AVOptions:', name='max_gif_delay', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='maximum valid delay between frames (in hundredths of seconds) (from 0 to 65535) (default 65535)', argname=None, min='0', max='65535', default='65535', choices=()), FFMpegAVOption(section='GIF demuxer AVOptions:', name='default_delay', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='default delay between frames (in hundredths of second) (from 0 to 6000) (default 10)', argname=None, min='0', max='6000', default='delay', choices=()), FFMpegAVOption(section='GIF demuxer AVOptions:', name='ignore_loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='ignore loop setting (netscape extension) (default true)', argname=None, min=None, max=None, default='true', choices=())))",
  "FFMpegDemuxer(name='gif_pipe', flags='D', help='piped gif sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='gsm', flags='D', help='raw GSM', options=(FFMpegAVOption(section='gsm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to 6.50753e+07) (default 8000)', argname=None, min='1', max='6', default='8000', choices=()),))",
  "FFMpegDemuxer(name='gxf', flags='D', help='GXF (General eXchange Format)', options=())",
  "FFMpegDemuxer(name='h261', flags='D', help='raw H.261', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='h263', flags='D', help='raw H.263', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='h264', flags='D', help='raw H.264 video', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='hca', flags='D', help='CRI HCA', options=(FFMpegAVOption(section='hca AVOptions:', name='hca_lowkey', type=<FFMpegOptionType.int64: 'int64'>, flags='.D.........', help='Low key used for handling CRI HCA files (from 0 to UINT32_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='hca AVOptions:', name='hca_highkey', type=<FFMpegOptionType.int64: 'int64'>, flags='.D.........', help='High key used for handling CRI HCA files (from 0 to UINT32_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='hca AVOptions:', name='hca_subkey', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Subkey used for handling CRI HCA files (from 0 to 65535) (default 0)', argname=None, min='0', max='65535', default='0', choices=())))",
  "FFMpegDemuxer(name='hcom', flags='D', help='Macintosh HCOM', options=())",
  "FFMpegDemuxer(name='hdr_pipe', flags='D', help='piped hdr sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='hevc', flags='D', help='raw HEVC video', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='hls', flags='D', help='Apple HTTP Live Streaming', options=(FFMpegAVOption(section='hls demuxer AVOptions:', name='live_start_index', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='segment index to start live streams at (negative values are from the end) (from INT_MIN to INT_MAX) (default -3)', argname=None, min=None, max=None, default='-3', choices=()), FFMpegAVOption(section='hls demuxer AVOptions:', name='prefer_x_start', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help=\"prefer to use #EXT-X-START if it's in playlist instead of live_start_index (default false)\", argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='hls demuxer AVOptions:', name='allowed_extensions', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='List of file extensions that hls is allowed to access (default \"3gp,aac,avi,ac3,eac3,flac,mkv,m3u8,m4a,m4s,m4v,mpg,mov,mp2,mp3,mp4,mpeg,mpegts,ogg,ogv,oga,ts,vob,wav\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls demuxer AVOptions:', name='max_reload', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Maximum number of times a insufficient list is attempted to be reloaded (from 0 to INT_MAX) (default 3)', argname=None, min=None, max=None, default='3', choices=()), FFMpegAVOption(section='hls demuxer AVOptions:', name='m3u8_hold_counters', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='The maximum number of times to load m3u8 when it refreshes without new segments (from 0 to INT_MAX) (default 1000)', argname=None, min=None, max=None, default='1000', choices=()), FFMpegAVOption(section='hls demuxer AVOptions:', name='http_persistent', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='Use persistent HTTP connections (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='hls demuxer AVOptions:', name='http_multiple', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='Use multiple HTTP connections for fetching segments (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='hls demuxer AVOptions:', name='http_seekable', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='Use HTTP partial requests, 0 = disable, 1 = enable, -1 = auto (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='hls demuxer AVOptions:', name='seg_format_options', type=<FFMpegOptionType.dictionary: 'dictionary'>, flags='.D.........', help='Set options for segment demuxer', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='hls demuxer AVOptions:', name='seg_max_retry', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Maximum number of times to reload a segment on error. (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=())))",
  "FFMpegDemuxer(name='hnm', flags='D', help='Cryo HNM v4', options=())",
  "FFMpegDemuxer(name='ico', flags='D', help='Microsoft Windows ICO', options=())",
  "FFMpegDemuxer(name='idcin', flags='D', help='id Cinematic', options=())",
  "FFMpegDemuxer(name='idf', flags='D', help='iCE Draw File', options=(FFMpegAVOption(section='iCE Draw File demuxer AVOptions:', name='linespeed', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set simulated line speed (bytes per second) (from 1 to INT_MAX) (default 6000)', argname=None, min=None, max=None, default='6000', choices=()), FFMpegAVOption(section='iCE Draw File demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size, such as 640x480 or hd720.', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='iCE Draw File demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set framerate (frames per second) (default \"25\")', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='iec61883', flags='D', help='libiec61883 (new DV1394) A/V input device', options=(FFMpegAVOption(section='iec61883 indev AVOptions:', name='dvtype', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='override autodetection of DV/HDV (from 0 to 2) (default auto)', argname=None, min='0', max='2', default='auto', choices=(FFMpegOptionChoice(name='auto', help='auto detect DV/HDV', flags='.D.........', value='0'), FFMpegOptionChoice(name='dv', help='force device being treated as DV device', flags='.D.........', value='1'), FFMpegOptionChoice(name='hdv', help='force device being treated as HDV device', flags='.D.........', value='2'))), FFMpegAVOption(section='iec61883 indev AVOptions:', name='dvbuffer', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set queue buffer size (in packets) (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='iec61883 indev AVOptions:', name='dvguid', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='select one of multiple DV devices by its GUID', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='iff', flags='D', help='IFF (Interchange File Format)', options=())",
  "FFMpegDemuxer(name='ifv', flags='D', help='IFV CCTV DVR', options=())",
  "FFMpegDemuxer(name='ilbc', flags='D', help='iLBC storage', options=())",
  "FFMpegDemuxer(name='image2', flags='D', help='image2 sequence', options=(FFMpegAVOption(section='image2 demuxer AVOptions:', name='pattern_type', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set pattern type (from 0 to INT_MAX) (default 4)', argname=None, min=None, max=None, default='4', choices=(FFMpegOptionChoice(name='glob_sequence', help='select glob/sequence pattern type', flags='.D.........', value='0'), FFMpegOptionChoice(name='glob', help='select glob pattern type', flags='.D.........', value='1'), FFMpegOptionChoice(name='sequence', help='select sequence pattern type', flags='.D.........', value='2'), FFMpegOptionChoice(name='none', help='disable pattern matching', flags='.D.........', value='3'))), FFMpegAVOption(section='image2 demuxer AVOptions:', name='start_number', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set first number in the sequence (from INT_MIN to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='image2 demuxer AVOptions:', name='start_number_range', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set range for looking at the first sequence number (from 1 to INT_MAX) (default 5)', argname=None, min=None, max=None, default='5', choices=()), FFMpegAVOption(section='image2 demuxer AVOptions:', name='ts_from_file', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help=\"set frame timestamp from file's one (from 0 to 2) (default none)\", argname=None, min='0', max='2', default='none', choices=(FFMpegOptionChoice(name='none', help='none', flags='.D.........', value='0'), FFMpegOptionChoice(name='sec', help='second precision', flags='.D.........', value='1'), FFMpegOptionChoice(name='ns', help='nano second precision', flags='.D.........', value='2'))), FFMpegAVOption(section='image2 demuxer AVOptions:', name='export_path_metadata', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='enable metadata containing input path information (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='image2 demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='image2 demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='image2 demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='image2 demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='image2pipe', flags='D', help='piped image2 sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='imf', flags='D', help='IMF (Interoperable Master Format)', options=(FFMpegAVOption(section='imf AVOptions:', name='assetmaps', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='Comma-separated paths to ASSETMAP files.If not specified, the `ASSETMAP.xml` file in the same directory as the CPL is used.', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegDemuxer(name='ingenient', flags='D', help='raw Ingenient MJPEG', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='ipmovie', flags='D', help='Interplay MVE', options=())",
  "FFMpegDemuxer(name='ipu', flags='D', help='raw IPU Video', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='ircam', flags='D', help='Berkeley/IRCAM/CARL Sound Format', options=())",
  "FFMpegDemuxer(name='iss', flags='D', help='Funcom ISS', options=())",
  "FFMpegDemuxer(name='iv8', flags='D', help='IndigoVision 8000 video', options=())",
  "FFMpegDemuxer(name='ivf', flags='D', help='On2 IVF', options=())",
  "FFMpegDemuxer(name='ivr', flags='D', help='IVR (Internet Video Recording)', options=())",
  "FFMpegDemuxer(name='j2k_pipe', flags='D', help='piped j2k sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='jack', flags='D', help='JACK Audio Connection Kit', options=(FFMpegAVOption(section='JACK indev AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Number of audio channels. (from 1 to INT_MAX) (default 2)', argname=None, min=None, max=None, default='2', choices=()),))",
  "FFMpegDemuxer(name='jacosub', flags='D', help='JACOsub subtitle format', options=())",
  "FFMpegDemuxer(name='jpeg_pipe', flags='D', help='piped jpeg sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='jpegls_pipe', flags='D', help='piped jpegls sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='jpegxl_anim', flags='D', help='Animated JPEG XL', options=())",
  "FFMpegDemuxer(name='jpegxl_pipe', flags='D', help='piped jpegxl sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='jv', flags='D', help='Bitmap Brothers JV', options=())",
  "FFMpegDemuxer(name='kmsgrab', flags='D', help='KMS screen capture', options=(FFMpegAVOption(section='kmsgrab indev AVOptions:', name='device', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='DRM device path (default \"/dev/dri/card0\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='kmsgrab indev AVOptions:', name='format', type=<FFMpegOptionType.pix_fmt: 'pix_fmt'>, flags='.D.........', help='Pixel format for framebuffer (default none)', argname=None, min=None, max=None, default='none', choices=()), FFMpegAVOption(section='kmsgrab indev AVOptions:', name='format_modifier', type=<FFMpegOptionType.int64: 'int64'>, flags='.D.........', help='DRM format modifier for framebuffer (from 0 to I64_MAX) (default 72057594037927935)', argname=None, min=None, max=None, default='72057594037927935', choices=()), FFMpegAVOption(section='kmsgrab indev AVOptions:', name='crtc_id', type=<FFMpegOptionType.int64: 'int64'>, flags='.D.........', help='CRTC ID to define capture source (from 0 to UINT32_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='kmsgrab indev AVOptions:', name='plane_id', type=<FFMpegOptionType.int64: 'int64'>, flags='.D.........', help='Plane ID to define capture source (from 0 to UINT32_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='kmsgrab indev AVOptions:', name='framerate', type=<FFMpegOptionType.rational: 'rational'>, flags='.D.........', help='Framerate to capture at (from 0 to 1000) (default 30/1)', argname=None, min='0', max='1000', default='30', choices=())))",
  "FFMpegDemuxer(name='kux', flags='D', help='KUX (YouKu)', options=(FFMpegAVOption(section='(live) flv/kux demuxer AVOptions:', name='flv_metadata', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.V.......', help='Allocate streams according to the onMetaData array (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(live) flv/kux demuxer AVOptions:', name='flv_full_metadata', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.V.......', help='Dump full metadata of the onMetadata (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(live) flv/kux demuxer AVOptions:', name='flv_ignore_prevtag', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.V.......', help='Ignore the Size of previous tag (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(live) flv/kux demuxer AVOptions:', name='missing_streams', type=<FFMpegOptionType.int: 'int'>, flags='.D.V..XR...', help='(from 0 to 255) (default 0)', argname=None, min='0', max='255', default='0', choices=())))",
  "FFMpegDemuxer(name='kvag', flags='D', help='Simon & Schuster Interactive VAG', options=())",
  "FFMpegDemuxer(name='laf', flags='D', help='LAF (Limitless Audio Format)', options=())",
  "FFMpegDemuxer(name='lavfi', flags='D', help='Libavfilter virtual input device', options=(FFMpegAVOption(section='lavfi indev AVOptions:', name='graph', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set libavfilter graph', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='lavfi indev AVOptions:', name='graph_file', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set libavfilter graph filename', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='lavfi indev AVOptions:', name='dumpgraph', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='dump graph to stderr', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='libcdio', flags='D', help='', options=(FFMpegAVOption(section='libcdio indev AVOptions:', name='speed', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set drive reading speed (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='libcdio indev AVOptions:', name='paranoia_mode', type=<FFMpegOptionType.flags: 'flags'>, flags='.D.........', help='set error recovery mode (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='disable', help='apply no fixups', flags='.D.........', value='disable'), FFMpegOptionChoice(name='verify', help='verify data integrity in overlap area', flags='.D.........', value='verify'), FFMpegOptionChoice(name='overlap', help='perform overlapped reads', flags='.D.........', value='overlap'), FFMpegOptionChoice(name='neverskip', help='do not skip failed reads', flags='.D.........', value='neverskip'), FFMpegOptionChoice(name='full', help='apply all recovery modes', flags='.D.........', value='full')))))",
  "FFMpegDemuxer(name='libdc1394', flags='D', help='dc1394 v.2 A/V grab', options=(FFMpegAVOption(section='libdc1394 indev AVOptions:', name='video_size', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='A string describing frame size, such as 640x480 or hd720. (default \"qvga\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='libdc1394 indev AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='(default \"uyvy422\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='libdc1394 indev AVOptions:', name='framerate', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='(default \"ntsc\")', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='libgme', flags='D', help='Game Music Emu demuxer', options=(FFMpegAVOption(section='Game Music Emu demuxer AVOptions:', name='track_index', type=<FFMpegOptionType.int: 'int'>, flags='.D..A......', help='set track that should be played (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='Game Music Emu demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D..A......', help='set sample rate (from 1000 to 999999) (default 44100)', argname=None, min='1000', max='999999', default='44100', choices=()), FFMpegAVOption(section='Game Music Emu demuxer AVOptions:', name='max_size', type=<FFMpegOptionType.int64: 'int64'>, flags='.D..A......', help='set max file size supported (in bytes) (from 0 to 1.84467e+19) (default 52428800)', argname=None, min='0', max='1', default='52428800', choices=())))",
  "FFMpegDemuxer(name='libopenmpt', flags='D', help='Tracker formats (libopenmpt)', options=(FFMpegAVOption(section='libopenmpt AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D..A......', help='set sample rate (from 1000 to INT_MAX) (default 48000)', argname=None, min=None, max=None, default='48000', choices=()), FFMpegAVOption(section='libopenmpt AVOptions:', name='layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D..A......', help='set channel layout (default \"stereo\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='libopenmpt AVOptions:', name='subsong', type=<FFMpegOptionType.int: 'int'>, flags='.D..A......', help='set subsong (from -2 to INT_MAX) (default auto)', argname=None, min=None, max=None, default='auto', choices=(FFMpegOptionChoice(name='all', help='all', flags='.D..A......', value='-1'), FFMpegOptionChoice(name='auto', help='auto', flags='.D..A......', value='-2')))))",
  "FFMpegDemuxer(name='live_flv', flags='D', help='live RTMP FLV (Flash Video)', options=(FFMpegAVOption(section='(live) flv/kux demuxer AVOptions:', name='flv_metadata', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.V.......', help='Allocate streams according to the onMetaData array (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(live) flv/kux demuxer AVOptions:', name='flv_full_metadata', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.V.......', help='Dump full metadata of the onMetadata (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(live) flv/kux demuxer AVOptions:', name='flv_ignore_prevtag', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.V.......', help='Ignore the Size of previous tag (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='(live) flv/kux demuxer AVOptions:', name='missing_streams', type=<FFMpegOptionType.int: 'int'>, flags='.D.V..XR...', help='(from 0 to 255) (default 0)', argname=None, min='0', max='255', default='0', choices=())))",
  "FFMpegDemuxer(name='lmlm4', flags='D', help='raw lmlm4', options=())",
  "FFMpegDemuxer(name='loas', flags='D', help='LOAS AudioSyncStream', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='lrc', flags='D', help='LRC lyrics', options=())",
  "FFMpegDemuxer(name='luodat', flags='D', help='Video CCTV DAT', options=())",
  "FFMpegDemuxer(name='lvf', flags='D', help='LVF', options=())",
  "FFMpegDemuxer(name='lxf', flags='D', help='VR native stream (LXF)', options=())",
  "FFMpegDemuxer(name='m4v', flags='D', help='raw MPEG-4 video', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='mca', flags='D', help='MCA Audio Format', options=())",
  "FFMpegDemuxer(name='mcc', flags='D', help='MacCaption', options=())",
  "FFMpegDemuxer(name='mgsts', flags='D', help='Metal Gear Solid: The Twin Snakes', options=())",
  "FFMpegDemuxer(name='microdvd', flags='D', help='MicroDVD subtitle format', options=(FFMpegAVOption(section='microdvddec AVOptions:', name='subfps', type=<FFMpegOptionType.rational: 'rational'>, flags='.D...S.....', help='set the movie frame rate fallback (from 0 to INT_MAX) (default 0/1)', argname=None, min=None, max=None, default='0', choices=()),))",
  "FFMpegDemuxer(name='mjpeg', flags='D', help='raw MJPEG video', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='mjpeg_2000', flags='D', help='raw MJPEG 2000 video', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='mlp', flags='D', help='raw MLP', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='mlv', flags='D', help='Magic Lantern Video (MLV)', options=())",
  "FFMpegDemuxer(name='mm', flags='D', help='American Laser Games MM', options=())",
  "FFMpegDemuxer(name='mmf', flags='D', help='Yamaha SMAF', options=())",
  "FFMpegDemuxer(name='mods', flags='D', help='MobiClip MODS', options=())",
  "FFMpegDemuxer(name='moflex', flags='D', help='MobiClip MOFLEX', options=())",
  "FFMpegDemuxer(name='mp3', flags='D', help='MP2/3 (MPEG audio layer 2/3)', options=(FFMpegAVOption(section='mp3 AVOptions:', name='usetoc', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='use table of contents (default false)', argname=None, min=None, max=None, default='false', choices=()),))",
  "FFMpegDemuxer(name='mpc', flags='D', help='Musepack', options=())",
  "FFMpegDemuxer(name='mpc8', flags='D', help='Musepack SV8', options=())",
  "FFMpegDemuxer(name='mpeg', flags='D', help='MPEG-PS (MPEG-2 Program Stream)', options=())",
  "FFMpegDemuxer(name='mpegts', flags='D', help='MPEG-TS (MPEG-2 Transport Stream)', options=(FFMpegAVOption(section='mpegts demuxer AVOptions:', name='resync_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set size limit for looking up a new synchronization (from 0 to INT_MAX) (default 65536)', argname=None, min=None, max=None, default='65536', choices=()), FFMpegAVOption(section='mpegts demuxer AVOptions:', name='fix_teletext_pts', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='try to fix pts values of dvb teletext streams (default true)', argname=None, min=None, max=None, default='true', choices=()), FFMpegAVOption(section='mpegts demuxer AVOptions:', name='ts_packetsize', type=<FFMpegOptionType.int: 'int'>, flags='.D....XR...', help='output option carrying the raw packet size (from 0 to 0) (default 0)', argname=None, min='0', max='0', default='0', choices=()), FFMpegAVOption(section='mpegts demuxer AVOptions:', name='scan_all_pmts', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='scan and combine all PMTs (default auto)', argname=None, min=None, max=None, default='auto', choices=()), FFMpegAVOption(section='mpegts demuxer AVOptions:', name='skip_unknown_pmt', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='skip PMTs for programs not advertised in the PAT (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mpegts demuxer AVOptions:', name='merge_pmt_versions', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help=\"re-use streams when PMT's version/pids change (default false)\", argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mpegts demuxer AVOptions:', name='max_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='maximum size of emitted packet (from 1 to 1.07374e+09) (default 204800)', argname=None, min='1', max='1', default='204800', choices=())))",
  "FFMpegDemuxer(name='mpegtsraw', flags='D', help='raw MPEG-TS (MPEG-2 Transport Stream)', options=(FFMpegAVOption(section='mpegtsraw demuxer AVOptions:', name='resync_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set size limit for looking up a new synchronization (from 0 to INT_MAX) (default 65536)', argname=None, min=None, max=None, default='65536', choices=()), FFMpegAVOption(section='mpegtsraw demuxer AVOptions:', name='compute_pcr', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='compute exact PCR for each transport stream packet (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='mpegtsraw demuxer AVOptions:', name='ts_packetsize', type=<FFMpegOptionType.int: 'int'>, flags='.D....XR...', help='output option carrying the raw packet size (from 0 to 0) (default 0)', argname=None, min='0', max='0', default='0', choices=())))",
  "FFMpegDemuxer(name='mpegvideo', flags='D', help='raw MPEG video', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='mpjpeg', flags='D', help='MIME multipart JPEG', options=(FFMpegAVOption(section='MPJPEG demuxer AVOptions:', name='strict_mime_boundary', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='require MIME boundaries match (default false)', argname=None, min=None, max=None, default='false', choices=()),))",
  "FFMpegDemuxer(name='mpl2', flags='D', help='MPL2 subtitles', options=())",
  "FFMpegDemuxer(name='mpsub', flags='D', help='MPlayer subtitles', options=())",
  "FFMpegDemuxer(name='msf', flags='D', help='Sony PS3 MSF', options=())",
  "FFMpegDemuxer(name='msnwctcp', flags='D', help='MSN TCP Webcam stream', options=())",
  "FFMpegDemuxer(name='msp', flags='D', help='Microsoft Paint (MSP))', options=())",
  "FFMpegDemuxer(name='mtaf', flags='D', help='Konami PS2 MTAF', options=())",
  "FFMpegDemuxer(name='mtv', flags='D', help='MTV', options=())",
  "FFMpegDemuxer(name='mulaw', flags='D', help='PCM mu-law', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='musx', flags='D', help='Eurocom MUSX', options=())",
  "FFMpegDemuxer(name='mv', flags='D', help='Silicon Graphics Movie', options=())",
  "FFMpegDemuxer(name='mvi', flags='D', help='Motion Pixels MVI', options=())",
  "FFMpegDemuxer(name='mxf', flags='D', help='MXF (Material eXchange Format)', options=(FFMpegAVOption(section='mxf AVOptions:', name='eia608_extract', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='extract eia 608 captions from s436m track (default false)', argname=None, min=None, max=None, default='false', choices=()),))",
  "FFMpegDemuxer(name='mxg', flags='D', help='MxPEG clip', options=())",
  "FFMpegDemuxer(name='nc', flags='D', help='NC camera feed', options=())",
  "FFMpegDemuxer(name='nistsphere', flags='D', help='NIST SPeech HEader REsources', options=())",
  "FFMpegDemuxer(name='nsp', flags='D', help='Computerized Speech Lab NSP', options=())",
  "FFMpegDemuxer(name='nsv', flags='D', help='Nullsoft Streaming Video', options=())",
  "FFMpegDemuxer(name='nut', flags='D', help='NUT', options=())",
  "FFMpegDemuxer(name='nuv', flags='D', help='NuppelVideo', options=())",
  "FFMpegDemuxer(name='obu', flags='D', help='AV1 low overhead OBU', options=(FFMpegAVOption(section='AV1 Annex B/low overhead OBU demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegDemuxer(name='ogg', flags='D', help='Ogg', options=())",
  "FFMpegDemuxer(name='oma', flags='D', help='Sony OpenMG audio', options=())",
  "FFMpegDemuxer(name='openal', flags='D', help='OpenAL audio capture device', options=(FFMpegAVOption(section='openal indev AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set number of channels (from 1 to 2) (default 2)', argname=None, min='1', max='2', default='2', choices=()), FFMpegAVOption(section='openal indev AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set sample rate (from 1 to 192000) (default 44100)', argname=None, min='1', max='192000', default='44100', choices=()), FFMpegAVOption(section='openal indev AVOptions:', name='sample_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set sample size (from 8 to 16) (default 16)', argname=None, min='8', max='16', default='16', choices=()), FFMpegAVOption(section='openal indev AVOptions:', name='list_devices', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='list available devices (from 0 to 1) (default false)', argname=None, min='0', max='1', default='false', choices=(FFMpegOptionChoice(name='true', help='', flags='.D.........', value='1'), FFMpegOptionChoice(name='false', help='', flags='.D.........', value='0')))))",
  "FFMpegDemuxer(name='osq', flags='D', help='raw OSQ', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='oss', flags='D', help='OSS (Open Sound System) capture', options=(FFMpegAVOption(section='OSS indev AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 48000)', argname=None, min=None, max=None, default='48000', choices=()), FFMpegAVOption(section='OSS indev AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 2)', argname=None, min=None, max=None, default='2', choices=())))",
  "FFMpegDemuxer(name='paf', flags='D', help='Amazing Studio Packed Animation File', options=())",
  "FFMpegDemuxer(name='pam_pipe', flags='D', help='piped pam sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='pbm_pipe', flags='D', help='piped pbm sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='pcx_pipe', flags='D', help='piped pcx sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='pdv', flags='D', help='PlayDate Video', options=())",
  "FFMpegDemuxer(name='pfm_pipe', flags='D', help='piped pfm sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='pgm_pipe', flags='D', help='piped pgm sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='pgmyuv_pipe', flags='D', help='piped pgmyuv sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='pgx_pipe', flags='D', help='piped pgx sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='phm_pipe', flags='D', help='piped phm sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='photocd_pipe', flags='D', help='piped photocd sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='pictor_pipe', flags='D', help='piped pictor sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='pjs', flags='D', help='PJS (Phoenix Japanimation Society) subtitles', options=())",
  "FFMpegDemuxer(name='pmp', flags='D', help='Playstation Portable PMP', options=())",
  "FFMpegDemuxer(name='png_pipe', flags='D', help='piped png sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='pp_bnk', flags='D', help='Pro Pinball Series Soundbank', options=())",
  "FFMpegDemuxer(name='ppm_pipe', flags='D', help='piped ppm sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='psd_pipe', flags='D', help='piped psd sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='psxstr', flags='D', help='Sony Playstation STR', options=())",
  "FFMpegDemuxer(name='pulse', flags='D', help='Pulse audio input', options=(FFMpegAVOption(section='Pulse indev AVOptions:', name='server', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set PulseAudio server', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='Pulse indev AVOptions:', name='name', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set application name (default \"Lavf60.16.100\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='Pulse indev AVOptions:', name='stream_name', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set stream description (default \"record\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='Pulse indev AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set sample rate in Hz (from 1 to INT_MAX) (default 48000)', argname=None, min=None, max=None, default='48000', choices=()), FFMpegAVOption(section='Pulse indev AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set number of audio channels (from 1 to INT_MAX) (default 2)', argname=None, min=None, max=None, default='2', choices=()), FFMpegAVOption(section='Pulse indev AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='set number of bytes per frame (from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()), FFMpegAVOption(section='Pulse indev AVOptions:', name='fragment_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set buffering size, affects latency and cpu usage (from -1 to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='Pulse indev AVOptions:', name='wallclock', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set the initial pts using the current time (from -1 to 1) (default 1)', argname=None, min='-1', max='1', default='1', choices=())))",
  "FFMpegDemuxer(name='pva', flags='D', help='TechnoTrend PVA', options=())",
  "FFMpegDemuxer(name='pvf', flags='D', help='PVF (Portable Voice Format)', options=())",
  "FFMpegDemuxer(name='qcp', flags='D', help='QCP', options=())",
  "FFMpegDemuxer(name='qdraw_pipe', flags='D', help='piped qdraw sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='qoi_pipe', flags='D', help='piped qoi sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='r3d', flags='D', help='REDCODE R3D', options=())",
  "FFMpegDemuxer(name='rawvideo', flags='D', help='raw video', options=(FFMpegAVOption(section='rawvideo demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set pixel format (default \"yuv420p\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='rawvideo demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set frame size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='rawvideo demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set frame rate (default \"25\")', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='realtext', flags='D', help='RealText subtitle format', options=())",
  "FFMpegDemuxer(name='redspark', flags='D', help='RedSpark', options=())",
  "FFMpegDemuxer(name='rka', flags='D', help='RKA (RK Audio)', options=())",
  "FFMpegDemuxer(name='rl2', flags='D', help='RL2', options=())",
  "FFMpegDemuxer(name='rm', flags='D', help='RealMedia', options=())",
  "FFMpegDemuxer(name='roq', flags='D', help='id RoQ', options=())",
  "FFMpegDemuxer(name='rpl', flags='D', help='RPL / ARMovie', options=())",
  "FFMpegDemuxer(name='rsd', flags='D', help='GameCube RSD', options=())",
  "FFMpegDemuxer(name='rso', flags='D', help='Lego Mindstorms RSO', options=())",
  "FFMpegDemuxer(name='rtp', flags='D', help='RTP input', options=(FFMpegAVOption(section='RTP demuxer AVOptions:', name='rtp_flags', type=<FFMpegOptionType.flags: 'flags'>, flags='.D.........', help='set RTP flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='filter_src', help='only receive packets from the negotiated peer IP', flags='.D.........', value='filter_src'),)), FFMpegAVOption(section='RTP demuxer AVOptions:', name='listen_timeout', type=<FFMpegOptionType.duration: 'duration'>, flags='.D.........', help='set maximum timeout (in seconds) to wait for incoming connections (default 10)', argname=None, min=None, max=None, default='10', choices=()), FFMpegAVOption(section='RTP demuxer AVOptions:', name='localaddr', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='local address', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='RTP demuxer AVOptions:', name='allowed_media_types', type=<FFMpegOptionType.flags: 'flags'>, flags='.D.........', help='set media types to accept from the server (default video+audio+data+subtitle)', argname=None, min=None, max=None, default='video', choices=(FFMpegOptionChoice(name='video', help='Video', flags='.D.........', value='video'), FFMpegOptionChoice(name='audio', help='Audio', flags='.D.........', value='audio'), FFMpegOptionChoice(name='data', help='Data', flags='.D.........', value='data'), FFMpegOptionChoice(name='subtitle', help='Subtitle', flags='.D.........', value='subtitle'))), FFMpegAVOption(section='RTP demuxer AVOptions:', name='reorder_queue_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set number of packets to buffer for handling of reordered packets (from -1 to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='RTP demuxer AVOptions:', name='buffer_size', type=<FFMpegOptionType.int: 'int'>, flags='ED.........', help='Underlying protocol send/receive buffer size (from -1 to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=())))",
  "FFMpegDemuxer(name='rtsp', flags='D', help='RTSP input', options=(FFMpegAVOption(section='RTSP demuxer AVOptions:', name='initial_pause', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='do not start playing the stream immediately (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='RTSP demuxer AVOptions:', name='rtsp_transport', type=<FFMpegOptionType.flags: 'flags'>, flags='ED.........', help='set RTSP transport protocols (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='udp', help='UDP', flags='ED.........', value='udp'), FFMpegOptionChoice(name='tcp', help='TCP', flags='ED.........', value='tcp'), FFMpegOptionChoice(name='udp_multicast', help='UDP multicast', flags='.D.........', value='udp_multicast'), FFMpegOptionChoice(name='http', help='HTTP tunneling', flags='.D.........', value='http'), FFMpegOptionChoice(name='https', help='HTTPS tunneling', flags='.D.........', value='https'))), FFMpegAVOption(section='RTSP demuxer AVOptions:', name='rtsp_flags', type=<FFMpegOptionType.flags: 'flags'>, flags='.D.........', help='set RTSP flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='filter_src', help='only receive packets from the negotiated peer IP', flags='.D.........', value='filter_src'), FFMpegOptionChoice(name='listen', help='wait for incoming connections', flags='.D.........', value='listen'), FFMpegOptionChoice(name='prefer_tcp', help='try RTP via TCP first, if available', flags='ED.........', value='prefer_tcp'), FFMpegOptionChoice(name='satip_raw', help='export raw MPEG-TS stream instead of demuxing', flags='.D.........', value='satip_raw'))), FFMpegAVOption(section='RTSP demuxer AVOptions:', name='allowed_media_types', type=<FFMpegOptionType.flags: 'flags'>, flags='.D.........', help='set media types to accept from the server (default video+audio+data+subtitle)', argname=None, min=None, max=None, default='video', choices=(FFMpegOptionChoice(name='video', help='Video', flags='.D.........', value='video'), FFMpegOptionChoice(name='audio', help='Audio', flags='.D.........', value='audio'), FFMpegOptionChoice(name='data', help='Data', flags='.D.........', value='data'), FFMpegOptionChoice(name='subtitle', help='Subtitle', flags='.D.........', value='subtitle'))), FFMpegAVOption(section='RTSP demuxer AVOptions:', name='min_port', type=<FFMpegOptionType.int: 'int'>, flags='ED.........', help='set minimum local UDP port (from 0 to 65535) (default 5000)', argname=None, min='0', max='65535', default='5000', choices=()), FFMpegAVOption(section='RTSP demuxer AVOptions:', name='max_port', type=<FFMpegOptionType.int: 'int'>, flags='ED.........', help='set maximum local UDP port (from 0 to 65535) (default 65000)', argname=None, min='0', max='65535', default='65000', choices=()), FFMpegAVOption(section='RTSP demuxer AVOptions:', name='listen_timeout', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set maximum timeout (in seconds) to wait for incoming connections (-1 is infinite, imply flag listen) (from INT_MIN to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='RTSP demuxer AVOptions:', name='timeout', type=<FFMpegOptionType.int64: 'int64'>, flags='.D.........', help='set timeout (in microseconds) of socket I/O operations (from INT_MIN to I64_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='RTSP demuxer AVOptions:', name='reorder_queue_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set number of packets to buffer for handling of reordered packets (from -1 to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='RTSP demuxer AVOptions:', name='buffer_size', type=<FFMpegOptionType.int: 'int'>, flags='ED.........', help='Underlying protocol send/receive buffer size (from -1 to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='RTSP demuxer AVOptions:', name='user_agent', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='override User-Agent header (default \"Lavf60.16.100\")', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='s16be', flags='D', help='PCM signed 16-bit big-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='s16le', flags='D', help='PCM signed 16-bit little-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='s24be', flags='D', help='PCM signed 24-bit big-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='s24le', flags='D', help='PCM signed 24-bit little-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='s32be', flags='D', help='PCM signed 32-bit big-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='s32le', flags='D', help='PCM signed 32-bit little-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='s337m', flags='D', help='SMPTE 337M', options=())",
  "FFMpegDemuxer(name='s8', flags='D', help='PCM signed 8-bit', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='sami', flags='D', help='SAMI subtitle format', options=())",
  "FFMpegDemuxer(name='sap', flags='D', help='SAP input', options=())",
  "FFMpegDemuxer(name='sbc', flags='D', help='raw SBC (low-complexity subband codec)', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='sbg', flags='D', help='SBaGen binaural beats script', options=(FFMpegAVOption(section='sbg_demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='sbg_demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='sbg_demuxer AVOptions:', name='max_file_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 5000000)', argname=None, min=None, max=None, default='5000000', choices=())))",
  "FFMpegDemuxer(name='scc', flags='D', help='Scenarist Closed Captions', options=())",
  "FFMpegDemuxer(name='scd', flags='D', help='Square Enix SCD', options=())",
  "FFMpegDemuxer(name='sdns', flags='D', help='Xbox SDNS', options=())",
  "FFMpegDemuxer(name='sdp', flags='D', help='SDP', options=(FFMpegAVOption(section='SDP demuxer AVOptions:', name='sdp_flags', type=<FFMpegOptionType.flags: 'flags'>, flags='.D.........', help='SDP flags (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='filter_src', help='only receive packets from the negotiated peer IP', flags='.D.........', value='filter_src'), FFMpegOptionChoice(name='custom_io', help='use custom I/O', flags='.D.........', value='custom_io'), FFMpegOptionChoice(name='rtcp_to_source', help='send RTCP packets to the source address of received packets', flags='.D.........', value='rtcp_to_source'))), FFMpegAVOption(section='SDP demuxer AVOptions:', name='listen_timeout', type=<FFMpegOptionType.duration: 'duration'>, flags='.D.........', help='set maximum timeout (in seconds) to wait for incoming connections (default 10)', argname=None, min=None, max=None, default='10', choices=()), FFMpegAVOption(section='SDP demuxer AVOptions:', name='localaddr', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='local address', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='SDP demuxer AVOptions:', name='allowed_media_types', type=<FFMpegOptionType.flags: 'flags'>, flags='.D.........', help='set media types to accept from the server (default video+audio+data+subtitle)', argname=None, min=None, max=None, default='video', choices=(FFMpegOptionChoice(name='video', help='Video', flags='.D.........', value='video'), FFMpegOptionChoice(name='audio', help='Audio', flags='.D.........', value='audio'), FFMpegOptionChoice(name='data', help='Data', flags='.D.........', value='data'), FFMpegOptionChoice(name='subtitle', help='Subtitle', flags='.D.........', value='subtitle'))), FFMpegAVOption(section='SDP demuxer AVOptions:', name='reorder_queue_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set number of packets to buffer for handling of reordered packets (from -1 to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=()), FFMpegAVOption(section='SDP demuxer AVOptions:', name='buffer_size', type=<FFMpegOptionType.int: 'int'>, flags='ED.........', help='Underlying protocol send/receive buffer size (from -1 to INT_MAX) (default -1)', argname=None, min=None, max=None, default='-1', choices=())))",
  "FFMpegDemuxer(name='sdr2', flags='D', help='SDR2', options=())",
  "FFMpegDemuxer(name='sds', flags='D', help='MIDI Sample Dump Standard', options=())",
  "FFMpegDemuxer(name='sdx', flags='D', help='Sample Dump eXchange', options=())",
  "FFMpegDemuxer(name='ser', flags='D', help='SER (Simple uncompressed video format for astronomical capturing)', options=(FFMpegAVOption(section='ser demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set frame rate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegDemuxer(name='sga', flags='D', help='Digital Pictures SGA', options=())",
  "FFMpegDemuxer(name='sgi_pipe', flags='D', help='piped sgi sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='shn', flags='D', help='raw Shorten', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='siff', flags='D', help='Beam Software SIFF', options=())",
  "FFMpegDemuxer(name='simbiosis_imx', flags='D', help='Simbiosis Interactive IMX', options=())",
  "FFMpegDemuxer(name='sln', flags='D', help='Asterisk raw pcm', options=(FFMpegAVOption(section='sln demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 8000)', argname=None, min=None, max=None, default='8000', choices=()), FFMpegAVOption(section='sln demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='sln demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='smjpeg', flags='D', help='Loki SDL MJPEG', options=())",
  "FFMpegDemuxer(name='smk', flags='D', help='Smacker', options=())",
  "FFMpegDemuxer(name='smush', flags='D', help='LucasArts Smush', options=())",
  "FFMpegDemuxer(name='sol', flags='D', help='Sierra SOL', options=())",
  "FFMpegDemuxer(name='sox', flags='D', help='SoX (Sound eXchange) native', options=())",
  "FFMpegDemuxer(name='spdif', flags='D', help='IEC 61937 (compressed data in S/PDIF)', options=())",
  "FFMpegDemuxer(name='srt', flags='D', help='SubRip subtitle', options=())",
  "FFMpegDemuxer(name='stl', flags='D', help='Spruce subtitle format', options=())",
  "FFMpegDemuxer(name='subviewer', flags='D', help='SubViewer subtitle format', options=())",
  "FFMpegDemuxer(name='subviewer1', flags='D', help='SubViewer v1 subtitle format', options=())",
  "FFMpegDemuxer(name='sunrast_pipe', flags='D', help='piped sunrast sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='sup', flags='D', help='raw HDMV Presentation Graphic Stream subtitles', options=())",
  "FFMpegDemuxer(name='svag', flags='D', help='Konami PS2 SVAG', options=())",
  "FFMpegDemuxer(name='svg_pipe', flags='D', help='piped svg sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='svs', flags='D', help='Square SVS', options=())",
  "FFMpegDemuxer(name='swf', flags='D', help='SWF (ShockWave Flash)', options=())",
  "FFMpegDemuxer(name='tak', flags='D', help='raw TAK', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='tedcaptions', flags='D', help='TED Talks captions', options=(FFMpegAVOption(section='tedcaptions_demuxer AVOptions:', name='start_time', type=<FFMpegOptionType.int64: 'int64'>, flags='.D...S.....', help='set the start time (offset) of the subtitles, in ms (from I64_MIN to I64_MAX) (default 15000)', argname=None, min=None, max=None, default='15000', choices=()),))",
  "FFMpegDemuxer(name='thp', flags='D', help='THP', options=())",
  "FFMpegDemuxer(name='tiertexseq', flags='D', help='Tiertex Limited SEQ', options=())",
  "FFMpegDemuxer(name='tiff_pipe', flags='D', help='piped tiff sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='tmv', flags='D', help='8088flex TMV', options=())",
  "FFMpegDemuxer(name='truehd', flags='D', help='raw TrueHD', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='tta', flags='D', help='TTA (True Audio)', options=())",
  "FFMpegDemuxer(name='tty', flags='D', help='Tele-typewriter', options=(FFMpegAVOption(section='TTY demuxer AVOptions:', name='chars_per_frame', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 6000)', argname=None, min=None, max=None, default='6000', choices=()), FFMpegAVOption(section='TTY demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='A string describing frame size, such as 640x480 or hd720.', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='TTY demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='txd', flags='D', help='Renderware TeXture Dictionary', options=())",
  "FFMpegDemuxer(name='ty', flags='D', help='TiVo TY Stream', options=())",
  "FFMpegDemuxer(name='u16be', flags='D', help='PCM unsigned 16-bit big-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='u16le', flags='D', help='PCM unsigned 16-bit little-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='u24be', flags='D', help='PCM unsigned 24-bit big-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='u24le', flags='D', help='PCM unsigned 24-bit little-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='u32be', flags='D', help='PCM unsigned 32-bit big-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='u32le', flags='D', help='PCM unsigned 32-bit little-endian', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='u8', flags='D', help='PCM unsigned 8-bit', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='usm', flags='D', help='CRI USM', options=())",
  "FFMpegDemuxer(name='v210', flags='D', help='Uncompressed 4:2:2 10-bit', options=(FFMpegAVOption(section='v210(x) demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set frame size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='v210(x) demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set frame rate (default \"25\")', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='v210x', flags='D', help='Uncompressed 4:2:2 10-bit', options=(FFMpegAVOption(section='v210(x) demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set frame size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='v210(x) demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set frame rate (default \"25\")', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='vag', flags='D', help='Sony PS2 VAG', options=())",
  "FFMpegDemuxer(name='vbn_pipe', flags='D', help='piped vbn sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='vc1', flags='D', help='raw VC-1', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='vc1test', flags='D', help='VC-1 test bitstream', options=())",
  "FFMpegDemuxer(name='vidc', flags='D', help='PCM Archimedes VIDC', options=(FFMpegAVOption(section='pcm demuxer AVOptions:', name='sample_rate', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 0 to INT_MAX) (default 44100)', argname=None, min=None, max=None, default='44100', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='channels', type=<FFMpegOptionType.int: 'int'>, flags='.D........P', help='(from 0 to INT_MAX) (default 1)', argname=None, min=None, max=None, default='1', choices=()), FFMpegAVOption(section='pcm demuxer AVOptions:', name='ch_layout', type=<FFMpegOptionType.channel_layout: 'channel_layout'>, flags='.D.........', help='', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='vividas', flags='D', help='Vividas VIV', options=())",
  "FFMpegDemuxer(name='vivo', flags='D', help='Vivo', options=())",
  "FFMpegDemuxer(name='vmd', flags='D', help='Sierra VMD', options=())",
  "FFMpegDemuxer(name='vobsub', flags='D', help='VobSub subtitle format', options=(FFMpegAVOption(section='vobsub AVOptions:', name='sub_name', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='URI for .sub file', argname=None, min=None, max=None, default=None, choices=()),))",
  "FFMpegDemuxer(name='voc', flags='D', help='Creative Voice', options=())",
  "FFMpegDemuxer(name='vpk', flags='D', help='Sony PS2 VPK', options=())",
  "FFMpegDemuxer(name='vplayer', flags='D', help='VPlayer subtitles', options=())",
  "FFMpegDemuxer(name='vqf', flags='D', help='Nippon Telegraph and Telephone Corporation (NTT) TwinVQ', options=())",
  "FFMpegDemuxer(name='vvc', flags='D', help='raw H.266/VVC video', options=(FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='(default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='generic raw video demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=())))",
  "FFMpegDemuxer(name='w64', flags='D', help='Sony Wave64', options=(FFMpegAVOption(section='W64 demuxer AVOptions:', name='max_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='max size of single packet (from 1024 to 4.1943e+06) (default 4096)', argname=None, min='1024', max='4', default='4096', choices=()),))",
  "FFMpegDemuxer(name='wady', flags='D', help='Marble WADY', options=())",
  "FFMpegDemuxer(name='wav', flags='D', help='WAV / WAVE (Waveform Audio)', options=(FFMpegAVOption(section='WAV demuxer AVOptions:', name='ignore_length', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='Ignore length (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='WAV demuxer AVOptions:', name='max_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='max size of single packet (from 1024 to 4.1943e+06) (default 4096)', argname=None, min='1024', max='4', default='4096', choices=())))",
  "FFMpegDemuxer(name='wavarc', flags='D', help='Waveform Archiver', options=())",
  "FFMpegDemuxer(name='wc3movie', flags='D', help='Wing Commander III movie', options=())",
  "FFMpegDemuxer(name='webm_dash_manifest', flags='D', help='WebM DASH Manifest', options=(FFMpegAVOption(section='WebM DASH Manifest demuxer AVOptions:', name='live', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='flag indicating that the input is a live file that only has the headers. (default false)', argname=None, min=None, max=None, default='false', choices=()), FFMpegAVOption(section='WebM DASH Manifest demuxer AVOptions:', name='bandwidth', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='bandwidth of this stream to be specified in the DASH manifest. (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=())))",
  "FFMpegDemuxer(name='webp_pipe', flags='D', help='piped webp sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='webvtt', flags='D', help='WebVTT subtitle', options=(FFMpegAVOption(section='WebVTT demuxer AVOptions:', name='kind', type=<FFMpegOptionType.int: 'int'>, flags='.D...S.....', help='Set kind of WebVTT track (from 0 to INT_MAX) (default subtitles)', argname=None, min=None, max=None, default='subtitles', choices=(FFMpegOptionChoice(name='subtitles', help='WebVTT subtitles kind', flags='.D...S.....', value='0'), FFMpegOptionChoice(name='captions', help='WebVTT captions kind', flags='.D...S.....', value='65536'), FFMpegOptionChoice(name='descriptions', help='WebVTT descriptions kind', flags='.D...S.....', value='131072'), FFMpegOptionChoice(name='metadata', help='WebVTT metadata kind', flags='.D...S.....', value='262144'))),))",
  "FFMpegDemuxer(name='wsaud', flags='D', help='Westwood Studios audio', options=())",
  "FFMpegDemuxer(name='wsd', flags='D', help='Wideband Single-bit Data (WSD)', options=(FFMpegAVOption(section='generic raw demuxer AVOptions:', name='raw_packet_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='(from 1 to INT_MAX) (default 1024)', argname=None, min=None, max=None, default='1024', choices=()),))",
  "FFMpegDemuxer(name='wsvqa', flags='D', help='Westwood Studios VQA', options=())",
  "FFMpegDemuxer(name='wtv', flags='D', help='Windows Television (WTV)', options=())",
  "FFMpegDemuxer(name='wv', flags='D', help='WavPack', options=())",
  "FFMpegDemuxer(name='wve', flags='D', help='Psion 3 audio', options=())",
  "FFMpegDemuxer(name='x11grab', flags='D', help='X11 screen capture, using XCB', options=(FFMpegAVOption(section='xcbgrab indev AVOptions:', name='window_id', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Window to capture. (from 0 to UINT32_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='xcbgrab indev AVOptions:', name='x', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Initial x coordinate. (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='xcbgrab indev AVOptions:', name='y', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Initial y coordinate. (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='xcbgrab indev AVOptions:', name='grab_x', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Initial x coordinate. (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='xcbgrab indev AVOptions:', name='grab_y', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Initial y coordinate. (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='xcbgrab indev AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='A string describing frame size, such as 640x480 or hd720.', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='xcbgrab indev AVOptions:', name='framerate', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='(default \"ntsc\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='xcbgrab indev AVOptions:', name='draw_mouse', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Draw the mouse pointer. (from 0 to 1) (default 1)', argname=None, min='0', max='1', default='1', choices=()), FFMpegAVOption(section='xcbgrab indev AVOptions:', name='follow_mouse', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Move the grabbing region when the mouse pointer reaches within specified amount of pixels to the edge of region. (from -1 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=(FFMpegOptionChoice(name='centered', help='Keep the mouse pointer at the center of grabbing region when following.', flags='.D.........', value='-1'),)), FFMpegAVOption(section='xcbgrab indev AVOptions:', name='show_region', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Show the grabbing region. (from 0 to 1) (default 0)', argname=None, min='0', max='1', default='0', choices=()), FFMpegAVOption(section='xcbgrab indev AVOptions:', name='region_border', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='Set the region border thickness. (from 1 to 128) (default 3)', argname=None, min='1', max='128', default='3', choices=()), FFMpegAVOption(section='xcbgrab indev AVOptions:', name='select_region', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='Select the grabbing region graphically using the pointer. (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='xa', flags='D', help='Maxis XA', options=())",
  "FFMpegDemuxer(name='xbin', flags='D', help='eXtended BINary text (XBIN)', options=(FFMpegAVOption(section='eXtended BINary text (XBIN) demuxer AVOptions:', name='linespeed', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='set simulated line speed (bytes per second) (from 1 to INT_MAX) (default 6000)', argname=None, min=None, max=None, default='6000', choices=()), FFMpegAVOption(section='eXtended BINary text (XBIN) demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size, such as 640x480 or hd720.', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='eXtended BINary text (XBIN) demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set framerate (frames per second) (default \"25\")', argname=None, min=None, max=None, default=None, choices=())))",
  "FFMpegDemuxer(name='xbm_pipe', flags='D', help='piped xbm sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='xmd', flags='D', help='Konami XMD', options=())",
  "FFMpegDemuxer(name='xmv', flags='D', help='Microsoft XMV', options=())",
  "FFMpegDemuxer(name='xpm_pipe', flags='D', help='piped xpm sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='xvag', flags='D', help='Sony PS3 XVAG', options=())",
  "FFMpegDemuxer(name='xwd_pipe', flags='D', help='piped xwd sequence', options=(FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='frame_size', type=<FFMpegOptionType.int: 'int'>, flags='.D.........', help='force frame size in bytes (from 0 to INT_MAX) (default 0)', argname=None, min=None, max=None, default='0', choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='framerate', type=<FFMpegOptionType.video_rate: 'video_rate'>, flags='.D.........', help='set the video framerate (default \"25\")', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='pixel_format', type=<FFMpegOptionType.string: 'string'>, flags='.D.........', help='set video pixel format', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='video_size', type=<FFMpegOptionType.image_size: 'image_size'>, flags='.D.........', help='set video size', argname=None, min=None, max=None, default=None, choices=()), FFMpegAVOption(section='imagepipe demuxer AVOptions:', name='loop', type=<FFMpegOptionType.boolean: 'boolean'>, flags='.D.........', help='force loop over input file sequence (default false)', argname=None, min=None, max=None, default='false', choices=())))",
  "FFMpegDemuxer(name='xwma', flags='D', help='Microsoft xWMA', options=())",
  "FFMpegDemuxer(name='yop', flags='D', help='Psygnosis YOP', options=())",
  "FFMpegDemuxer(name='yuv4mpegpipe', flags='D', help='YUV4MPEG pipe', options=())"
]
