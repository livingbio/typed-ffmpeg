[
  "FFMpegFilter(name='abench', flags='...', help='Benchmark part of a filtergraph.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='acompressor', flags='..C', help='Audio compressor.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='acontrast', flags='...', help='Simple audio dynamic range compression/expansion filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='acopy', flags='...', help='Copy the input audio unchanged to the output.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='acue', flags='...', help='Delay filtering to match a cue.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='acrossfade', flags='...', help='Cross fade two input audio streams.', options=(), io_flags='AA->A')",
  "FFMpegFilter(name='acrossover', flags='.S.', help='Split audio into per-bands streams.', options=(), io_flags='A->N')",
  "FFMpegFilter(name='acrusher', flags='T.C', help='Reduce audio bit resolution.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='adeclick', flags='TS.', help='Remove impulsive noise from input audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='adeclip', flags='TS.', help='Remove clipping from input audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='adecorrelate', flags='TS.', help='Apply decorrelation to input audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='adelay', flags='T.C', help='Delay one or more audio channels.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='adenorm', flags='TSC', help='Remedy denormals by adding extremely low-level noise.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aderivative', flags='T..', help='Compute derivative of input audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='adrc', flags='TSC', help='Audio Spectral Dynamic Range Controller.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='adynamicequalizer', flags='TSC', help='Apply Dynamic Equalization of input audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='adynamicsmooth', flags='T.C', help='Apply Dynamic Smoothing of input audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aecho', flags='...', help='Add echoing to the audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aemphasis', flags='TSC', help='Audio emphasis.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aeval', flags='T..', help='Filter audio signal according to a specified expression.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aexciter', flags='T.C', help='Enhance high frequency part of audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='afade', flags='T.C', help='Fade in/out input audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='afftdn', flags='TSC', help='Denoise audio samples using FFT.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='afftfilt', flags='TS.', help='Apply arbitrary expressions to samples in frequency domain.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='afir', flags='.SC', help='Apply Finite Impulse Response filter with supplied coefficients in additional stream(s).', options=(), io_flags='N->N')",
  "FFMpegFilter(name='aformat', flags='...', help='Convert the input audio to one of the specified formats.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='afreqshift', flags='TSC', help='Apply frequency shifting to input audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='afwtdn', flags='TSC', help='Denoise audio stream using Wavelets.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='agate', flags='T.C', help='Audio gate.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aiir', flags='.S.', help='Apply Infinite Impulse Response filter with supplied coefficients.', options=(), io_flags='A->N')",
  "FFMpegFilter(name='aintegral', flags='T..', help='Compute integral of input audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='ainterleave', flags='...', help='Temporally interleave audio inputs.', options=(), io_flags='N->A')",
  "FFMpegFilter(name='alatency', flags='T..', help='Report audio filtering latency.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='alimiter', flags='T.C', help='Audio lookahead limiter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='allpass', flags='TSC', help='Apply a two-pole all-pass filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aloop', flags='...', help='Loop audio samples.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='amerge', flags='...', help='Merge two or more audio streams into a single multi-channel stream.', options=(), io_flags='N->A')",
  "FFMpegFilter(name='ametadata', flags='T..', help='Manipulate audio frame metadata.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='amix', flags='..C', help='Audio mixing.', options=(), io_flags='N->A')",
  "FFMpegFilter(name='amultiply', flags='...', help='Multiply two audio streams.', options=(), io_flags='AA->A')",
  "FFMpegFilter(name='anequalizer', flags='TSC', help='Apply high-order audio parametric multi band equalizer.', options=(), io_flags='A->N')",
  "FFMpegFilter(name='anlmdn', flags='TSC', help='Reduce broadband noise from stream using Non-Local Means.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='anlmf', flags='TSC', help='Apply Normalized Least-Mean-Fourth algorithm to first audio stream.', options=(), io_flags='AA->A')",
  "FFMpegFilter(name='anlms', flags='TSC', help='Apply Normalized Least-Mean-Squares algorithm to first audio stream.', options=(), io_flags='AA->A')",
  "FFMpegFilter(name='anull', flags='...', help='Pass the source unchanged to the output.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='apad', flags='T..', help='Pad audio with silence.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aperms', flags='T.C', help='Set permissions for the output audio frame.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aphaser', flags='...', help='Add a phasing effect to the audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aphaseshift', flags='TSC', help='Apply phase shifting to input audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='apsnr', flags='TS.', help='Measure Audio Peak Signal-to-Noise Ratio.', options=(), io_flags='AA->A')",
  "FFMpegFilter(name='apsyclip', flags='TSC', help='Audio Psychoacoustic Clipper.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='apulsator', flags='...', help='Audio pulsator.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='arealtime', flags='..C', help='Slow down filtering to match realtime.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aresample', flags='...', help='Resample audio data.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='areverse', flags='...', help='Reverse an audio clip.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='arls', flags='TSC', help='Apply Recursive Least Squares algorithm to first audio stream.', options=(), io_flags='AA->A')",
  "FFMpegFilter(name='arnndn', flags='TSC', help='Reduce noise from speech using Recurrent Neural Networks.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='asdr', flags='TS.', help='Measure Audio Signal-to-Distortion Ratio.', options=(), io_flags='AA->A')",
  "FFMpegFilter(name='asegment', flags='...', help='Segment audio stream.', options=(), io_flags='A->N')",
  "FFMpegFilter(name='aselect', flags='...', help='Select audio frames to pass in output.', options=(), io_flags='A->N')",
  "FFMpegFilter(name='asendcmd', flags='...', help='Send commands to filters.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='asetnsamples', flags='T.C', help='Set the number of samples for each output audio frames.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='asetpts', flags='..C', help='Set PTS for the output audio frame.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='asetrate', flags='...', help='Change the sample rate without altering the data.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='asettb', flags='...', help='Set timebase for the audio output link.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='ashowinfo', flags='...', help='Show textual information for each audio frame.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='asidedata', flags='T..', help='Manipulate audio frame side data.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='asisdr', flags='TS.', help='Measure Audio Scale-Invariant Signal-to-Distortion Ratio.', options=(), io_flags='AA->A')",
  "FFMpegFilter(name='asoftclip', flags='TSC', help='Audio Soft Clipper.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aspectralstats', flags='.S.', help='Show frequency domain statistics about audio frames.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='asplit', flags='...', help='Pass on the audio input to N audio outputs.', options=(), io_flags='A->N')",
  "FFMpegFilter(name='asr', flags='...', help='Automatic Speech Recognition.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='astats', flags='.S.', help='Show time domain statistics about audio frames.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='astreamselect', flags='..C', help='Select audio streams', options=(), io_flags='N->N')",
  "FFMpegFilter(name='asubboost', flags='TSC', help='Boost subwoofer frequencies.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='asubcut', flags='TSC', help='Cut subwoofer frequencies.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='asupercut', flags='TSC', help='Cut super frequencies.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='asuperpass', flags='TSC', help='Apply high order Butterworth band-pass filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='asuperstop', flags='TSC', help='Apply high order Butterworth band-stop filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='atempo', flags='..C', help='Adjust audio tempo.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='atilt', flags='TSC', help='Apply spectral tilt to audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='atrim', flags='...', help='Pick one continuous section from the input, drop the rest.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='axcorrelate', flags='...', help='Cross-correlate two audio streams.', options=(), io_flags='AA->A')",
  "FFMpegFilter(name='azmq', flags='...', help='Receive commands through ZMQ and broker them to filters.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='bandpass', flags='TSC', help='Apply a two-pole Butterworth band-pass filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='bandreject', flags='TSC', help='Apply a two-pole Butterworth band-reject filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='bass', flags='TSC', help='Boost or cut lower frequencies.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='biquad', flags='TSC', help='Apply a biquad IIR filter with the given coefficients.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='bs2b', flags='...', help='Bauer stereo-to-binaural filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='channelmap', flags='...', help='Remap audio channels.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='channelsplit', flags='...', help='Split audio into per-channel streams.', options=(), io_flags='A->N')",
  "FFMpegFilter(name='chorus', flags='...', help='Add a chorus effect to the audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='compand', flags='...', help='Compress or expand audio dynamic range.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='compensationdelay', flags='T.C', help='Audio Compensation Delay Line.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='crossfeed', flags='T.C', help='Apply headphone crossfeed filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='crystalizer', flags='TSC', help='Simple audio noise sharpening filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='dcshift', flags='T..', help='Apply a DC shift to the audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='deesser', flags='T..', help='Apply de-essing to the audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='dialoguenhance', flags='T.C', help='Audio Dialogue Enhancement.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='drmeter', flags='...', help='Measure audio dynamic range.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='dynaudnorm', flags='TSC', help='Dynamic Audio Normalizer.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='earwax', flags='...', help='Widen the stereo image.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='ebur128', flags='...', help='EBU R128 scanner.', options=(), io_flags='A->N')",
  "FFMpegFilter(name='equalizer', flags='TSC', help='Apply two-pole peaking equalization (EQ) filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='extrastereo', flags='T.C', help='Increase difference between stereo audio channels.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='firequalizer', flags='..C', help='Finite Impulse Response Equalizer.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='flanger', flags='...', help='Apply a flanging effect to the audio.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='haas', flags='...', help='Apply Haas Stereo Enhancer.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='hdcd', flags='...', help='Apply High Definition Compatible Digital (HDCD) decoding.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='headphone', flags='.S.', help='Apply headphone binaural spatialization with HRTFs in additional streams.', options=(), io_flags='N->A')",
  "FFMpegFilter(name='highpass', flags='TSC', help='Apply a high-pass filter with 3dB point frequency.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='highshelf', flags='TSC', help='Apply a high shelf filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='join', flags='...', help='Join multiple audio streams into multi-channel output.', options=(), io_flags='N->A')",
  "FFMpegFilter(name='ladspa', flags='..C', help='Apply LADSPA effect.', options=(), io_flags='N->A')",
  "FFMpegFilter(name='loudnorm', flags='...', help='EBU R128 loudness normalization', options=(), io_flags='A->A')",
  "FFMpegFilter(name='lowpass', flags='TSC', help='Apply a low-pass filter with 3dB point frequency.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='lowshelf', flags='TSC', help='Apply a low shelf filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='lv2', flags='..C', help='Apply LV2 effect.', options=(), io_flags='N->A')",
  "FFMpegFilter(name='mcompand', flags='...', help='Multiband Compress or expand audio dynamic range.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='pan', flags='...', help='Remix channels with coefficients (panning).', options=(), io_flags='A->A')",
  "FFMpegFilter(name='replaygain', flags='...', help='ReplayGain scanner.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='rubberband', flags='..C', help='Apply time-stretching and pitch-shifting.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='sidechaincompress', flags='..C', help='Sidechain compressor.', options=(), io_flags='AA->A')",
  "FFMpegFilter(name='sidechaingate', flags='T.C', help='Audio sidechain gate.', options=(), io_flags='AA->A')",
  "FFMpegFilter(name='silencedetect', flags='...', help='Detect silence.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='silenceremove', flags='T.C', help='Remove silence.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='sofalizer', flags='.S.', help='SOFAlizer (Spatially Oriented Format for Acoustics).', options=(), io_flags='A->A')",
  "FFMpegFilter(name='speechnorm', flags='T.C', help='Speech Normalizer.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='stereotools', flags='T.C', help='Apply various stereo tools.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='stereowiden', flags='T.C', help='Apply stereo widening effect.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='superequalizer', flags='...', help='Apply 18 band equalization filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='surround', flags='.SC', help='Apply audio surround upmix filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='tiltshelf', flags='TSC', help='Apply a tilt shelf filter.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='treble', flags='TSC', help='Boost or cut upper frequencies.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='tremolo', flags='T..', help='Apply tremolo effect.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='vibrato', flags='T..', help='Apply vibrato effect.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='virtualbass', flags='T.C', help='Audio Virtual Bass.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='volume', flags='T.C', help='Change input volume.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='volumedetect', flags='...', help='Detect audio volume.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='aevalsrc', flags='...', help='Generate an audio signal generated by an expression.', options=(), io_flags='|->A')",
  "FFMpegFilter(name='afdelaysrc', flags='...', help='Generate a Fractional delay FIR coefficients.', options=(), io_flags='|->A')",
  "FFMpegFilter(name='afireqsrc', flags='...', help='Generate a FIR equalizer coefficients audio stream.', options=(), io_flags='|->A')",
  "FFMpegFilter(name='afirsrc', flags='...', help='Generate a FIR coefficients audio stream.', options=(), io_flags='|->A')",
  "FFMpegFilter(name='anoisesrc', flags='...', help='Generate a noise audio signal.', options=(), io_flags='|->A')",
  "FFMpegFilter(name='anullsrc', flags='...', help='Null audio source, return empty audio frames.', options=(), io_flags='|->A')",
  "FFMpegFilter(name='flite', flags='...', help='Synthesize voice from text using libflite.', options=(), io_flags='|->A')",
  "FFMpegFilter(name='hilbert', flags='...', help='Generate a Hilbert transform FIR coefficients.', options=(), io_flags='|->A')",
  "FFMpegFilter(name='sinc', flags='...', help='Generate a sinc kaiser-windowed low-pass, high-pass, band-pass, or band-reject FIR coefficients.', options=(), io_flags='|->A')",
  "FFMpegFilter(name='sine', flags='...', help='Generate sine wave audio signal.', options=(), io_flags='|->A')",
  "FFMpegFilter(name='anullsink', flags='...', help='Do absolutely nothing with the input audio.', options=(), io_flags='A->|')",
  "FFMpegFilter(name='addroi', flags='...', help='Add region of interest to frame.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='alphaextract', flags='...', help='Extract an alpha channel as a grayscale image component.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='alphamerge', flags='T..', help='Copy the luma value of the second input into the alpha channel of the first input.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='amplify', flags='TSC', help='Amplify changes between successive video frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='ass', flags='...', help='Render ASS subtitles onto input video using the libass library.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='atadenoise', flags='TSC', help='Apply an Adaptive Temporal Averaging Denoiser.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='avgblur', flags='T.C', help='Apply Average Blur filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='avgblur_opencl', flags='...', help='Apply average blur filter', options=(), io_flags='V->V')",
  "FFMpegFilter(name='avgblur_vulkan', flags='...', help='Apply avgblur mask to input video', options=(), io_flags='V->V')",
  "FFMpegFilter(name='backgroundkey', flags='TSC', help='Turns a static background into transparency.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='bbox', flags='T.C', help='Compute bounding box for each frame.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='bench', flags='...', help='Benchmark part of a filtergraph.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='bilateral', flags='TSC', help='Apply Bilateral filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='bilateral_cuda', flags='...', help='GPU accelerated bilateral filter', options=(), io_flags='V->V')",
  "FFMpegFilter(name='bitplanenoise', flags='T..', help='Measure bit plane noise.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='blackdetect', flags='.S.', help='Detect video intervals that are (almost) black.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='blackframe', flags='...', help='Detect frames that are (almost) black.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='blend', flags='TSC', help='Blend two video frames into each other.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='blend_vulkan', flags='..C', help='Blend two video frames in Vulkan', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='blockdetect', flags='...', help='Blockdetect filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='blurdetect', flags='...', help='Blurdetect filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='bm3d', flags='TS.', help='Block-Matching 3D denoiser.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='boxblur', flags='T..', help='Blur the input.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='boxblur_opencl', flags='...', help='Apply boxblur filter to input video', options=(), io_flags='V->V')",
  "FFMpegFilter(name='bwdif', flags='TS.', help='Deinterlace the input image.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='bwdif_cuda', flags='T..', help='Deinterlace CUDA frames', options=(), io_flags='V->V')",
  "FFMpegFilter(name='bwdif_vulkan', flags='T..', help='Deinterlace Vulkan frames via bwdif', options=(), io_flags='V->V')",
  "FFMpegFilter(name='cas', flags='TSC', help='Contrast Adaptive Sharpen.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='ccrepack', flags='...', help='Repack CEA-708 closed caption metadata', options=(), io_flags='V->V')",
  "FFMpegFilter(name='chromaber_vulkan', flags='...', help='Offset chroma of input video (chromatic aberration)', options=(), io_flags='V->V')",
  "FFMpegFilter(name='chromahold', flags='TSC', help='Turns a certain color range into gray.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='chromakey', flags='TSC', help='Turns a certain color into transparency. Operates on YUV colors.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='chromakey_cuda', flags='...', help='GPU accelerated chromakey filter', options=(), io_flags='V->V')",
  "FFMpegFilter(name='chromanr', flags='TSC', help='Reduce chrominance noise.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='chromashift', flags='TSC', help='Shift chroma.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='ciescope', flags='...', help='Video CIE scope.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='codecview', flags='T..', help='Visualize information about some codecs.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colorbalance', flags='TSC', help='Adjust the color balance.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colorchannelmixer', flags='TSC', help='Adjust colors by mixing color channels.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colorcontrast', flags='TSC', help='Adjust color contrast between RGB components.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colorcorrect', flags='TSC', help='Adjust color white balance selectively for blacks and whites.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colorize', flags='TSC', help='Overlay a solid color on the video stream.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colorkey', flags='TSC', help='Turns a certain color into transparency. Operates on RGB colors.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colorkey_opencl', flags='...', help='Turns a certain color into transparency. Operates on RGB colors.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colorhold', flags='TSC', help='Turns a certain color range into gray. Operates on RGB colors.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colorlevels', flags='TSC', help='Adjust the color levels.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colormap', flags='TSC', help='Apply custom Color Maps to video stream.', options=(), io_flags='VVV->V')",
  "FFMpegFilter(name='colormatrix', flags='TS.', help='Convert color matrix.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colorspace', flags='TS.', help='Convert between colorspaces.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colorspace_cuda', flags='...', help='CUDA accelerated video color converter', options=(), io_flags='V->V')",
  "FFMpegFilter(name='colortemperature', flags='TSC', help='Adjust color temperature of video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='convolution', flags='TSC', help='Apply convolution filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='convolution_opencl', flags='...', help='Apply convolution mask to input video', options=(), io_flags='V->V')",
  "FFMpegFilter(name='convolve', flags='TS.', help='Convolve first video stream with second video stream.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='copy', flags='...', help='Copy the input video unchanged to the output.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='corr', flags='T..', help='Calculate the correlation between two video streams.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='cover_rect', flags='...', help='Find and cover a user specified object.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='crop', flags='..C', help='Crop the input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='cropdetect', flags='T.C', help='Auto-detect crop size.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='cue', flags='...', help='Delay filtering to match a cue.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='curves', flags='TSC', help='Adjust components curves.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='datascope', flags='.SC', help='Video data analysis.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='dblur', flags='T.C', help='Apply Directional Blur filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='dctdnoiz', flags='TS.', help='Denoise frames using 2D DCT.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='deband', flags='TSC', help='Debands video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='deblock', flags='T.C', help='Deblock video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='decimate', flags='...', help='Decimate frames (post field matching filter).', options=(), io_flags='N->V')",
  "FFMpegFilter(name='deconvolve', flags='TS.', help='Deconvolve first video stream with second video stream.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='dedot', flags='TS.', help='Reduce cross-luminance and cross-color.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='deflate', flags='TSC', help='Apply deflate effect.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='deflicker', flags='...', help='Remove temporal frame luminance variations.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='deinterlace_vaapi', flags='...', help='Deinterlacing of VAAPI surfaces', options=(), io_flags='V->V')",
  "FFMpegFilter(name='dejudder', flags='...', help='Remove judder produced by pullup.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='delogo', flags='T..', help='Remove logo from input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='denoise_vaapi', flags='...', help='VAAPI VPP for de-noise', options=(), io_flags='V->V')",
  "FFMpegFilter(name='derain', flags='T..', help='Apply derain filter to the input.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='deshake', flags='...', help='Stabilize shaky video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='deshake_opencl', flags='...', help='Feature-point based video stabilization filter', options=(), io_flags='V->V')",
  "FFMpegFilter(name='despill', flags='TSC', help='Despill video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='detelecine', flags='...', help='Apply an inverse telecine pattern.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='dilation', flags='TSC', help='Apply dilation effect.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='dilation_opencl', flags='...', help='Apply dilation effect', options=(), io_flags='V->V')",
  "FFMpegFilter(name='displace', flags='TSC', help='Displace pixels.', options=(), io_flags='VVV->V')",
  "FFMpegFilter(name='dnn_classify', flags='...', help='Apply DNN classify filter to the input.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='dnn_detect', flags='...', help='Apply DNN detect filter to the input.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='dnn_processing', flags='...', help='Apply DNN processing filter to the input.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='doubleweave', flags='.S.', help='Weave input video fields into double number of frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='drawbox', flags='T.C', help='Draw a colored box on the input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='drawgraph', flags='...', help='Draw a graph using input video metadata.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='drawgrid', flags='T.C', help='Draw a colored grid on the input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='drawtext', flags='T.C', help='Draw text on top of video frames using libfreetype library.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='edgedetect', flags='T..', help='Detect and draw edge.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='elbg', flags='...', help='Apply posterize effect, using the ELBG algorithm.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='entropy', flags='T..', help='Measure video frames entropy.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='epx', flags='.S.', help='Scale the input using EPX algorithm.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='eq', flags='T.C', help='Adjust brightness, contrast, gamma, and saturation.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='erosion', flags='TSC', help='Apply erosion effect.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='erosion_opencl', flags='...', help='Apply erosion effect', options=(), io_flags='V->V')",
  "FFMpegFilter(name='estdif', flags='TSC', help='Apply Edge Slope Tracing deinterlace.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='exposure', flags='TSC', help='Adjust exposure of the video stream.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='extractplanes', flags='...', help='Extract planes as grayscale frames.', options=(), io_flags='V->N')",
  "FFMpegFilter(name='fade', flags='TS.', help='Fade in/out input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='feedback', flags='..C', help='Apply feedback video filter.', options=(), io_flags='VV->VV')",
  "FFMpegFilter(name='fftdnoiz', flags='TSC', help='Denoise frames using 3D FFT.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='fftfilt', flags='TS.', help='Apply arbitrary expressions to pixels in frequency domain.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='field', flags='...', help='Extract a field from the input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='fieldhint', flags='...', help='Field matching using hints.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='fieldmatch', flags='...', help='Field matching for inverse telecine.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='fieldorder', flags='T..', help='Set the field order.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='fillborders', flags='T.C', help='Fill borders of the input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='find_rect', flags='...', help='Find a user specified object.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='flip_vulkan', flags='...', help='Flip both horizontally and vertically', options=(), io_flags='V->V')",
  "FFMpegFilter(name='floodfill', flags='T..', help='Fill area with same color with another color.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='format', flags='...', help='Convert the input video to one of the specified pixel formats.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='fps', flags='...', help='Force constant framerate.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='framepack', flags='...', help='Generate a frame packed stereoscopic video.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='framerate', flags='.S.', help='Upsamples or downsamples progressive source between specified frame rates.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='framestep', flags='T..', help='Select one frame every N frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='freezedetect', flags='...', help='Detects frozen video input.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='freezeframes', flags='...', help='Freeze video frames.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='frei0r', flags='T.C', help='Apply a frei0r effect.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='fspp', flags='T..', help='Apply Fast Simple Post-processing filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='gblur', flags='TSC', help='Apply Gaussian Blur filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='gblur_vulkan', flags='...', help='Gaussian Blur in Vulkan', options=(), io_flags='V->V')",
  "FFMpegFilter(name='geq', flags='TS.', help='Apply generic equation to each pixel.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='gradfun', flags='T..', help='Debands video quickly using gradients.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='graphmonitor', flags='..C', help='Show various filtergraph stats.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='grayworld', flags='TS.', help='Adjust white balance using LAB gray world algorithm', options=(), io_flags='V->V')",
  "FFMpegFilter(name='greyedge', flags='TS.', help='Estimates scene illumination by grey edge assumption.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='guided', flags='TSC', help='Apply Guided filter.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='haldclut', flags='TSC', help='Adjust colors using a Hald CLUT.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='hflip', flags='TS.', help='Horizontally flip the input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='hflip_vulkan', flags='...', help='Horizontally flip the input video in Vulkan', options=(), io_flags='V->V')",
  "FFMpegFilter(name='histeq', flags='T..', help='Apply global color histogram equalization.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='histogram', flags='...', help='Compute and draw a histogram.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='hqdn3d', flags='TSC', help='Apply a High Quality 3D Denoiser.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='hqx', flags='.S.', help='Scale the input by 2, 3 or 4 using the hq*x magnification algorithm.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='hstack', flags='.S.', help='Stack video inputs horizontally.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='hsvhold', flags='TSC', help='Turns a certain HSV range into gray.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='hsvkey', flags='TSC', help='Turns a certain HSV range into transparency. Operates on YUV colors.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='hue', flags='T.C', help='Adjust the hue and saturation of the input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='huesaturation', flags='TSC', help='Apply hue-saturation-intensity adjustments.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='hwdownload', flags='...', help='Download a hardware frame to a normal frame', options=(), io_flags='V->V')",
  "FFMpegFilter(name='hwmap', flags='...', help='Map hardware frames', options=(), io_flags='V->V')",
  "FFMpegFilter(name='hwupload', flags='...', help='Upload a normal frame to a hardware frame', options=(), io_flags='V->V')",
  "FFMpegFilter(name='hwupload_cuda', flags='...', help='Upload a system memory frame to a CUDA device.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='hysteresis', flags='T..', help='Grow first stream into second stream by connecting components.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='identity', flags='TS.', help='Calculate the Identity between two video streams.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='idet', flags='...', help='Interlace detect Filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='il', flags='T.C', help='Deinterleave or interleave fields.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='inflate', flags='TSC', help='Apply inflate effect.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='interlace', flags='...', help='Convert progressive video into interlaced.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='interleave', flags='...', help='Temporally interleave video inputs.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='kerndeint', flags='...', help='Apply kernel deinterlacing to the input.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='kirsch', flags='TSC', help='Apply kirsch operator.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='lagfun', flags='TSC', help='Slowly update darker pixels.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='latency', flags='T..', help='Report video filtering latency.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='lenscorrection', flags='TSC', help='Rectify the image by correcting for lens distortion.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='libplacebo', flags='..C', help='Apply various GPU filters from libplacebo', options=(), io_flags='N->V')",
  "FFMpegFilter(name='limitdiff', flags='TSC', help='Apply filtering with limiting difference.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='limiter', flags='TSC', help='Limit pixels components to the specified range.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='loop', flags='...', help='Loop video frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='lumakey', flags='TSC', help='Turns a certain luma into transparency.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='lut', flags='TSC', help='Compute and apply a lookup table to the RGB/YUV input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='lut1d', flags='TSC', help='Adjust colors using a 1D LUT.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='lut2', flags='TSC', help='Compute and apply a lookup table from two video inputs.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='lut3d', flags='TSC', help='Adjust colors using a 3D LUT.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='lutrgb', flags='TSC', help='Compute and apply a lookup table to the RGB input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='lutyuv', flags='TSC', help='Compute and apply a lookup table to the YUV input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='maskedclamp', flags='TSC', help='Clamp first stream with second stream and third stream.', options=(), io_flags='VVV->V')",
  "FFMpegFilter(name='maskedmax', flags='TSC', help='Apply filtering with maximum difference of two streams.', options=(), io_flags='VVV->V')",
  "FFMpegFilter(name='maskedmerge', flags='TSC', help='Merge first stream with second stream using third stream as mask.', options=(), io_flags='VVV->V')",
  "FFMpegFilter(name='maskedmin', flags='TSC', help='Apply filtering with minimum difference of two streams.', options=(), io_flags='VVV->V')",
  "FFMpegFilter(name='maskedthreshold', flags='TSC', help='Pick pixels comparing absolute difference of two streams with threshold.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='maskfun', flags='TSC', help='Create Mask.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='mcdeint', flags='...', help='Apply motion compensating deinterlacing.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='median', flags='TSC', help='Apply Median filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='mergeplanes', flags='...', help='Merge planes.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='mestimate', flags='...', help='Generate motion vectors.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='metadata', flags='T..', help='Manipulate video frame metadata.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='midequalizer', flags='T..', help='Apply Midway Equalization.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='minterpolate', flags='...', help='Frame rate conversion using Motion Interpolation.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='mix', flags='TSC', help='Mix video inputs.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='monochrome', flags='TSC', help='Convert video to gray using custom color filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='morpho', flags='TSC', help='Apply Morphological filter.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='mpdecimate', flags='...', help='Remove near-duplicate frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='msad', flags='TS.', help='Calculate the MSAD between two video streams.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='multiply', flags='TSC', help='Multiply first video stream with second video stream.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='negate', flags='TSC', help='Negate input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='nlmeans', flags='TS.', help='Non-local means denoiser.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='nlmeans_opencl', flags='...', help='Non-local means denoiser through OpenCL', options=(), io_flags='V->V')",
  "FFMpegFilter(name='nlmeans_vulkan', flags='...', help='Non-local means denoiser (Vulkan)', options=(), io_flags='V->V')",
  "FFMpegFilter(name='nnedi', flags='TSC', help='Apply neural network edge directed interpolation intra-only deinterlacer.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='noformat', flags='...', help='Force libavfilter not to use any of the specified pixel formats for the input to the next filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='noise', flags='TS.', help='Add noise.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='normalize', flags='T.C', help='Normalize RGB video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='null', flags='...', help='Pass the source unchanged to the output.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='oscilloscope', flags='T.C', help='2D Video Oscilloscope.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='overlay', flags='TSC', help='Overlay a video source on top of the input.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='overlay_opencl', flags='...', help='Overlay one video on top of another', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='overlay_vaapi', flags='...', help='Overlay one video on top of another', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='overlay_vulkan', flags='...', help='Overlay a source on top of another', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='overlay_cuda', flags='...', help='Overlay one video on top of another using CUDA', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='owdenoise', flags='T..', help='Denoise using wavelets.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='pad', flags='...', help='Pad the input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='pad_opencl', flags='...', help='Pad the input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='palettegen', flags='...', help='Find the optimal palette for a given stream.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='paletteuse', flags='...', help='Use a palette to downsample an input video stream.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='perms', flags='T.C', help='Set permissions for the output video frame.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='perspective', flags='TS.', help='Correct the perspective of video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='phase', flags='T.C', help='Phase shift fields.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='photosensitivity', flags='...', help='Filter out photosensitive epilepsy seizure-inducing flashes.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='pixdesctest', flags='...', help='Test pixel format definitions.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='pixelize', flags='TSC', help='Pixelize video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='pixscope', flags='T.C', help='Pixel data analysis.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='pp', flags='T.C', help='Filter video using libpostproc.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='pp7', flags='T..', help='Apply Postprocessing 7 filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='premultiply', flags='TS.', help='PreMultiply first stream with first plane of second stream.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='prewitt', flags='TSC', help='Apply prewitt operator.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='prewitt_opencl', flags='...', help='Apply prewitt operator', options=(), io_flags='V->V')",
  "FFMpegFilter(name='procamp_vaapi', flags='...', help='ProcAmp (color balance) adjustments for hue, saturation, brightness, contrast', options=(), io_flags='V->V')",
  "FFMpegFilter(name='program_opencl', flags='...', help='Filter video using an OpenCL program', options=(), io_flags='N->V')",
  "FFMpegFilter(name='pseudocolor', flags='TSC', help='Make pseudocolored video frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='psnr', flags='TS.', help='Calculate the PSNR between two video streams.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='pullup', flags='...', help='Pullup from field sequence to frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='qp', flags='T..', help='Change video quantization parameters.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='random', flags='...', help='Return random frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='readeia608', flags='TSC', help='Read EIA-608 Closed Caption codes from input video and write them to frame metadata.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='readvitc', flags='...', help='Read vertical interval timecode and write it to frame metadata.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='realtime', flags='..C', help='Slow down filtering to match realtime.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='remap', flags='.S.', help='Remap pixels.', options=(), io_flags='VVV->V')",
  "FFMpegFilter(name='remap_opencl', flags='...', help='Remap pixels using OpenCL.', options=(), io_flags='VVV->V')",
  "FFMpegFilter(name='removegrain', flags='TS.', help='Remove grain.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='removelogo', flags='T..', help='Remove a TV logo based on a mask image.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='repeatfields', flags='...', help='Hard repeat fields based on MPEG repeat field flag.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='reverse', flags='...', help='Reverse a clip.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='rgbashift', flags='TSC', help='Shift RGBA.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='roberts', flags='TSC', help='Apply roberts cross operator.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='roberts_opencl', flags='...', help='Apply roberts operator', options=(), io_flags='V->V')",
  "FFMpegFilter(name='rotate', flags='TSC', help='Rotate the input image.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='sab', flags='T..', help='Apply shape adaptive blur.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='scale', flags='..C', help='Scale the input video size and/or convert the image format.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='scale_cuda', flags='...', help='GPU accelerated video resizer', options=(), io_flags='V->V')",
  "FFMpegFilter(name='scale_vaapi', flags='...', help='Scale to/from VAAPI surfaces.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='scale_vulkan', flags='...', help='Scale Vulkan frames', options=(), io_flags='V->V')",
  "FFMpegFilter(name='scale2ref', flags='..C', help='Scale the input video size and/or convert the image format to the given reference.', options=(), io_flags='VV->VV')",
  "FFMpegFilter(name='scdet', flags='...', help='Detect video scene change', options=(), io_flags='V->V')",
  "FFMpegFilter(name='scharr', flags='TSC', help='Apply scharr operator.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='scroll', flags='TSC', help='Scroll input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='segment', flags='...', help='Segment video stream.', options=(), io_flags='V->N')",
  "FFMpegFilter(name='select', flags='...', help='Select video frames to pass in output.', options=(), io_flags='V->N')",
  "FFMpegFilter(name='selectivecolor', flags='TS.', help='Apply CMYK adjustments to specific color ranges.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='sendcmd', flags='...', help='Send commands to filters.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='separatefields', flags='...', help='Split input video frames into fields.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='setdar', flags='...', help='Set the frame display aspect ratio.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='setfield', flags='...', help='Force field for the output video frame.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='setparams', flags='...', help='Force field, or color property for the output video frame.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='setpts', flags='..C', help='Set PTS for the output video frame.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='setrange', flags='...', help='Force color range for the output video frame.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='setsar', flags='...', help='Set the pixel sample aspect ratio.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='settb', flags='...', help='Set timebase for the video output link.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='sharpness_vaapi', flags='...', help='VAAPI VPP for sharpness', options=(), io_flags='V->V')",
  "FFMpegFilter(name='shear', flags='TSC', help='Shear transform the input image.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='showinfo', flags='...', help='Show textual information for each video frame.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='showpalette', flags='...', help='Display frame palette.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='shuffleframes', flags='T..', help='Shuffle video frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='shufflepixels', flags='TS.', help='Shuffle video pixels.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='shuffleplanes', flags='T..', help='Shuffle video planes.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='sidedata', flags='T..', help='Manipulate video frame side data.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='signalstats', flags='.S.', help='Generate statistics from video analysis.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='signature', flags='...', help='Calculate the MPEG-7 video signature', options=(), io_flags='N->V')",
  "FFMpegFilter(name='siti', flags='...', help='Calculate spatial information (SI) and temporal information (TI).', options=(), io_flags='V->V')",
  "FFMpegFilter(name='smartblur', flags='T..', help='Blur the input video without impacting the outlines.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='sobel', flags='TSC', help='Apply sobel operator.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='sobel_opencl', flags='...', help='Apply sobel operator', options=(), io_flags='V->V')",
  "FFMpegFilter(name='split', flags='...', help='Pass on the input to N video outputs.', options=(), io_flags='V->N')",
  "FFMpegFilter(name='spp', flags='T.C', help='Apply a simple post processing filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='sr', flags='...', help='Apply DNN-based image super resolution to the input.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='ssim', flags='TS.', help='Calculate the SSIM between two video streams.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='ssim360', flags='...', help='Calculate the SSIM between two 360 video streams.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='stereo3d', flags='.S.', help='Convert video stereoscopic 3D view.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='streamselect', flags='..C', help='Select video streams', options=(), io_flags='N->N')",
  "FFMpegFilter(name='subtitles', flags='...', help='Render text subtitles onto input video using the libass library.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='super2xsai', flags='.S.', help='Scale the input by 2x using the Super2xSaI pixel art algorithm.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='swaprect', flags='T.C', help='Swap 2 rectangular objects in video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='swapuv', flags='T..', help='Swap U and V components.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='tblend', flags='TSC', help='Blend successive frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='telecine', flags='...', help='Apply a telecine pattern.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='thistogram', flags='...', help='Compute and draw a temporal histogram.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='threshold', flags='TSC', help='Threshold first video stream using other video streams.', options=(), io_flags='VVVV->V')",
  "FFMpegFilter(name='thumbnail', flags='TS.', help='Select the most representative frame in a given sequence of consecutive frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='thumbnail_cuda', flags='...', help='Select the most representative frame in a given sequence of consecutive frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='tile', flags='...', help='Tile several successive frames together.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='tinterlace', flags='...', help='Perform temporal field interlacing.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='tlut2', flags='TSC', help='Compute and apply a lookup table from two successive frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='tmedian', flags='TSC', help='Pick median pixels from successive frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='tmidequalizer', flags='T..', help='Apply Temporal Midway Equalization.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='tmix', flags='TSC', help='Mix successive video frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='tonemap', flags='.S.', help='Conversion to/from different dynamic ranges.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='tonemap_opencl', flags='...', help='Perform HDR to SDR conversion with tonemapping.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='tonemap_vaapi', flags='...', help='VAAPI VPP for tone-mapping', options=(), io_flags='V->V')",
  "FFMpegFilter(name='tpad', flags='...', help='Temporarily pad video frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='transpose', flags='.S.', help='Transpose input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='transpose_opencl', flags='...', help='Transpose input video', options=(), io_flags='V->V')",
  "FFMpegFilter(name='transpose_vaapi', flags='...', help='VAAPI VPP for transpose', options=(), io_flags='V->V')",
  "FFMpegFilter(name='transpose_vulkan', flags='...', help='Transpose Vulkan Filter', options=(), io_flags='V->V')",
  "FFMpegFilter(name='trim', flags='...', help='Pick one continuous section from the input, drop the rest.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='unpremultiply', flags='TS.', help='UnPreMultiply first stream with first plane of second stream.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='unsharp', flags='TS.', help='Sharpen or blur the input video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='unsharp_opencl', flags='...', help='Apply unsharp mask to input video', options=(), io_flags='V->V')",
  "FFMpegFilter(name='untile', flags='...', help='Untile a frame into a sequence of frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='uspp', flags='TS.', help='Apply Ultra Simple / Slow Post-processing filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='v360', flags='.SC', help='Convert 360 projection of video.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='vaguedenoiser', flags='T..', help='Apply a Wavelet based Denoiser.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='varblur', flags='TSC', help='Apply Variable Blur filter.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='vectorscope', flags='..C', help='Video vectorscope.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='vflip', flags='T..', help='Flip the input video vertically.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='vflip_vulkan', flags='...', help='Vertically flip the input video in Vulkan', options=(), io_flags='V->V')",
  "FFMpegFilter(name='vfrdet', flags='...', help='Variable frame rate detect filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='vibrance', flags='TSC', help='Boost or alter saturation.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='vidstabdetect', flags='...', help='Extract relative transformations, pass 1 of 2 for stabilization (see vidstabtransform for pass 2).', options=(), io_flags='V->V')",
  "FFMpegFilter(name='vidstabtransform', flags='...', help='Transform the frames, pass 2 of 2 for stabilization (see vidstabdetect for pass 1).', options=(), io_flags='V->V')",
  "FFMpegFilter(name='vif', flags='TS.', help='Calculate the VIF between two video streams.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='vignette', flags='T..', help='Make or reverse a vignette effect.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='vmafmotion', flags='...', help='Calculate the VMAF Motion score.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='vstack', flags='.S.', help='Stack video inputs vertically.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='w3fdif', flags='TSC', help='Apply Martin Weston three field deinterlace.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='waveform', flags='.SC', help='Video waveform monitor.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='weave', flags='.S.', help='Weave input video fields into frames.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='xbr', flags='.S.', help='Scale the input using xBR algorithm.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='xcorrelate', flags='TS.', help='Cross-correlate first video stream with second video stream.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='xfade', flags='.S.', help='Cross fade one video with another video.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='xfade_opencl', flags='...', help='Cross fade one video with another video.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='xfade_vulkan', flags='...', help='Cross fade one video with another video.', options=(), io_flags='VV->V')",
  "FFMpegFilter(name='xmedian', flags='TSC', help='Pick median pixels from several video inputs.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='xstack', flags='.S.', help='Stack video inputs into custom layout.', options=(), io_flags='N->V')",
  "FFMpegFilter(name='yadif', flags='TS.', help='Deinterlace the input image.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='yadif_cuda', flags='T..', help='Deinterlace CUDA frames', options=(), io_flags='V->V')",
  "FFMpegFilter(name='yaepblur', flags='TSC', help='Yet another edge preserving blur filter.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='zmq', flags='...', help='Receive commands through ZMQ and broker them to filters.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='zoompan', flags='...', help='Apply Zoom & Pan effect.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='zscale', flags='.SC', help='Apply resizing, colorspace and bit depth conversion.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='hstack_vaapi', flags='...', help='\"VA-API\" hstack', options=(), io_flags='N->V')",
  "FFMpegFilter(name='vstack_vaapi', flags='...', help='\"VA-API\" vstack', options=(), io_flags='N->V')",
  "FFMpegFilter(name='xstack_vaapi', flags='...', help='\"VA-API\" xstack', options=(), io_flags='N->V')",
  "FFMpegFilter(name='allrgb', flags='...', help='Generate all RGB colors.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='allyuv', flags='...', help='Generate all yuv colors.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='cellauto', flags='...', help='Create pattern generated by an elementary cellular automaton.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='color', flags='..C', help='Provide an uniformly colored input.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='color_vulkan', flags='...', help='Generate a constant color (Vulkan)', options=(), io_flags='|->V')",
  "FFMpegFilter(name='colorchart', flags='...', help='Generate color checker chart.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='colorspectrum', flags='...', help='Generate colors spectrum.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='frei0r_src', flags='...', help='Generate a frei0r source.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='gradients', flags='.S.', help='Draw a gradients.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='haldclutsrc', flags='...', help='Provide an identity Hald CLUT.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='life', flags='...', help='Create life.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='mandelbrot', flags='...', help='Render a Mandelbrot fractal.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='mptestsrc', flags='...', help='Generate various test pattern.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='nullsrc', flags='...', help='Null video source, return unprocessed video frames.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='openclsrc', flags='...', help='Generate video using an OpenCL program', options=(), io_flags='|->V')",
  "FFMpegFilter(name='pal75bars', flags='...', help='Generate PAL 75% color bars.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='pal100bars', flags='...', help='Generate PAL 100% color bars.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='rgbtestsrc', flags='...', help='Generate RGB test pattern.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='sierpinski', flags='.S.', help='Render a Sierpinski fractal.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='smptebars', flags='...', help='Generate SMPTE color bars.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='smptehdbars', flags='...', help='Generate SMPTE HD color bars.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='testsrc', flags='...', help='Generate test pattern.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='testsrc2', flags='...', help='Generate another test pattern.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='yuvtestsrc', flags='...', help='Generate YUV test pattern.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='zoneplate', flags='.SC', help='Generate zone-plate.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='nullsink', flags='...', help='Do absolutely nothing with the input video.', options=(), io_flags='V->|')",
  "FFMpegFilter(name='a3dscope', flags='..C', help='Convert input audio to 3d scope video output.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='abitscope', flags='...', help='Convert input audio to audio bit scope video output.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='adrawgraph', flags='...', help='Draw a graph using input audio metadata.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='agraphmonitor', flags='..C', help='Show various filtergraph stats.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='ahistogram', flags='...', help='Convert input audio to histogram video output.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='aphasemeter', flags='...', help='Convert input audio to phase meter video output.', options=(), io_flags='A->N')",
  "FFMpegFilter(name='avectorscope', flags='.SC', help='Convert input audio to vectorscope video output.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='concat', flags='..C', help='Concatenate audio and video streams.', options=(), io_flags='N->N')",
  "FFMpegFilter(name='showcqt', flags='...', help='Convert input audio to a CQT (Constant/Clamped Q Transform) spectrum video output.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='showcwt', flags='.S.', help='Convert input audio to a CWT (Continuous Wavelet Transform) spectrum video output.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='showfreqs', flags='...', help='Convert input audio to a frequencies video output.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='showspatial', flags='.S.', help='Convert input audio to a spatial video output.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='showspectrum', flags='.S.', help='Convert input audio to a spectrum video output.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='showspectrumpic', flags='.S.', help='Convert input audio to a spectrum video output single picture.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='showvolume', flags='...', help='Convert input audio volume to video output.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='showwaves', flags='...', help='Convert input audio to a video output.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='showwavespic', flags='...', help='Convert input audio to a video output single picture.', options=(), io_flags='A->V')",
  "FFMpegFilter(name='spectrumsynth', flags='...', help='Convert input spectrum videos to audio output.', options=(), io_flags='VV->A')",
  "FFMpegFilter(name='avsynctest', flags='..C', help='Generate an Audio Video Sync Test.', options=(), io_flags='|->AV')",
  "FFMpegFilter(name='amovie', flags='..C', help='Read audio from a movie source.', options=(), io_flags='|->N')",
  "FFMpegFilter(name='movie', flags='..C', help='Read from a movie source.', options=(), io_flags='|->N')",
  "FFMpegFilter(name='afifo', flags='...', help='Buffer input frames and send them when they are requested.', options=(), io_flags='A->A')",
  "FFMpegFilter(name='fifo', flags='...', help='Buffer input images and send them when they are requested.', options=(), io_flags='V->V')",
  "FFMpegFilter(name='abuffer', flags='...', help='Buffer audio frames, and make them accessible to the filterchain.', options=(), io_flags='|->A')",
  "FFMpegFilter(name='buffer', flags='...', help='Buffer video frames, and make them accessible to the filterchain.', options=(), io_flags='|->V')",
  "FFMpegFilter(name='abuffersink', flags='...', help='Buffer audio frames, and make them available to the end of the filter graph.', options=(), io_flags='A->|')",
  "FFMpegFilter(name='buffersink', flags='...', help='Buffer video frames, and make them available to the end of the filter graph.', options=(), io_flags='V->|')"
]
