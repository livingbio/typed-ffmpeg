from typing import Any, Literal

from .nodes.nodes import FilterNode, FilterableStream
from .schema import Default, StreamType, BOOLEAN, DURATION, COLOR, FLAGS, DICTIONARY, PIX_FMT, INT, INT64, DOUBLE, FLOAT, STRING, VIDEO_RATE, IMAGE_SIZE, RATIONAL, SAMPLE_FMT, BINARY
from .streams.video import VideoStream
from .streams.audio import AudioStream
from .streams.av import AVStream
from .streams.channel_layout import CHANNEL_LAYOUT

import re




    

def aap(
    

    
        
        _input: "AudioStream",
        
    
        
        _desired: "AudioStream",
        
    


    *,
    

    
        order: 

int = 
Default(None)


,
    

    
        projection: 

int = 
Default(None)


,
    


    **kwargs: Any
)-> "AudioStream":
    """
    
description

Parameters:
----------

:param int order: set the filter order
:param int projection: set the filter projection

Ref: None

    """
    filter_node = FilterNode(
        name="aap",
        input_typings=tuple([StreamType.audio, StreamType.audio]),
        output_typings=tuple([StreamType.audio]),
        inputs=(
            

        
            
            _input,
            
        
            
            _desired,
            
        


        ),
        kwargs=tuple(({
            
            "order": order,
            
            "projection": projection,
            
        } | kwargs).items()),
    )
    return filter_node.audio(0)


    
