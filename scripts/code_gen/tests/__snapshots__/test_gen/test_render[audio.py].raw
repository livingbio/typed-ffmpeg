

from __future__ import annotations

import re
from typing import TYPE_CHECKING, Any, Literal

from ..dag.nodes import FilterableStream, FilterNode
from ..schema import Default, StreamType, to_tuple
from ..types import Boolean, Duration, Color, Flags, Dictionary, Pix_fmt, Int, Int64, Double, Float, String, Video_rate, Image_size, Rational, Sample_fmt, Binary
from ..utils.typing import override
from .channel_layout import CHANNEL_LAYOUT

if TYPE_CHECKING:
    from .video import VideoStream


class AudioStream(FilterableStream):
    @property
    @override
    def video(self) -> "VideoStream":
        raise NotImplementedError("This stream does not have a video component")

    @property
    @override
    def audio(self) -> "AudioStream":
        return AudioStream(node=self.node, selector=StreamType.audio, index=self.index)

    
        
    
    def aap(
    
    self,


    
        
        
    
        
        _desired: "AudioStream",
        
    


    *,
    

    
        order: 

int = 

Default(None)



,
    

    
        projection: 

int = 

Default(None)



,
    


    **kwargs: Any
    )-> "AudioStream":
        """
        
description

Args:
    order: set the filter order
    projection: set the filter projection

Returns:
    the audio stream

References:
    [FFmpeg Documentation](None)

        """
        filter_node = FilterNode(
            name="aap",
            input_typings=tuple([StreamType.audio, StreamType.audio]),
            output_typings=tuple([StreamType.audio]),
            inputs=(
                
            self,


            
                
                
            
                
                _desired,
                
            


            ),
            kwargs=to_tuple(({
                
                "order": order,
                
                "projection": projection,
                
            } | kwargs)),
        )
        return filter_node.audio(0)


        
    