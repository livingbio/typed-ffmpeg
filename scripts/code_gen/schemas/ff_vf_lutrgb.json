{
  "description": "### 11.153 lut, lutrgb, lutyuv\n\nCompute a look-up table for binding each pixel component input value\nto an output value, and apply it to the input video.\n\n\nlutyuv applies a lookup table to a YUV input video, lutrgb\nto an RGB input video.\n\n\nThese filters accept the following parameters:\n\n\n- **`c0`**\n  - set first pixel component expression\n- **`c1`**\n  - set second pixel component expression\n- **`c2`**\n  - set third pixel component expression\n- **`c3`**\n  - set fourth pixel component expression, corresponds to the alpha component\n- **`r`**\n  - set red component expression\n- **`g`**\n  - set green component expression\n- **`b`**\n  - set blue component expression\n- **`a`**\n  - alpha component expression\n- **`y`**\n  - set Y/luma component expression\n- **`u`**\n  - set U/Cb component expression\n- **`v`**\n  - set V/Cr component expression\nset first pixel component expression\n\n\nset second pixel component expression\n\n\nset third pixel component expression\n\n\nset fourth pixel component expression, corresponds to the alpha component\n\n\nset red component expression\n\n\nset green component expression\n\n\nset blue component expression\n\n\nalpha component expression\n\n\nset Y/luma component expression\n\n\nset U/Cb component expression\n\n\nset V/Cr component expression\n\n\nEach of them specifies the expression to use for computing the lookup table for\nthe corresponding pixel component values.\n\n\nThe exact component associated to each of the c* options depends on the\nformat in input.\n\n\nThe lut filter requires either YUV or RGB pixel formats in input,\nlutrgb requires RGB pixel formats in input, and lutyuv requires YUV.\n\n\nThe expressions can contain the following constants and functions:\n\n\n- **`w`**\n- **`h`**\n  - The input width and height.\n- **`val`**\n  - The input value for the pixel component.\n- **`clipval`**\n  - The input value, clipped to the\nminval\n-\nmaxval\nrange.\n- **`maxval`**\n  - The maximum value for the pixel component.\n- **`minval`**\n  - The minimum value for the pixel component.\n- **`negval`**\n  - The negated value for the pixel component value, clipped to the\nminval\n-\nmaxval\nrange; it corresponds to the expression\n\"maxval-clipval+minval\".\n- **`clip(val)`**\n  - The computed value in\nval\n, clipped to the\nminval\n-\nmaxval\nrange.\n- **`gammaval(gamma)`**\n  - The computed gamma correction value of the pixel component value,\nclipped to the\nminval\n-\nmaxval\nrange. It corresponds to the\nexpression\n\"pow((clipval-minval)/(maxval-minval)\\,\ngamma\n)*(maxval-minval)+minval\"\nThe input width and height.\n\n\nThe input value for the pixel component.\n\n\nThe input value, clipped to the minval-maxval range.\n\n\nThe maximum value for the pixel component.\n\n\nThe minimum value for the pixel component.\n\n\nThe negated value for the pixel component value, clipped to the\nminval-maxval range; it corresponds to the expression\n\"maxval-clipval+minval\".\n\n\nThe computed value in val, clipped to the\nminval-maxval range.\n\n\nThe computed gamma correction value of the pixel component value,\nclipped to the minval-maxval range. It corresponds to the\nexpression\n\"pow((clipval-minval)/(maxval-minval)\\,gamma)*(maxval-minval)+minval\"\n\n\nAll expressions default to \"clipval\".\n\n\n",
  "filter_type": "vf",
  "formula_input_typings": null,
  "formula_output_typings": null,
  "id": "ff_vf_lutrgb",
  "input_stream_typings": [
    {
      "name": "default",
      "type": "AVMEDIA_TYPE_VIDEO"
    }
  ],
  "is_input_dynamic": false,
  "is_output_dynamic": false,
  "name": "lutrgb",
  "options": [
    {
      "alias": [
        "c0",
        "y",
        "r"
      ],
      "choices": [],
      "default": "clipval",
      "description": "<dd><p>set first pixel component expression\n</p></dd>",
      "name": "c0",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "c1",
        "u",
        "g"
      ],
      "choices": [],
      "default": "clipval",
      "description": "<dd><p>set second pixel component expression\n</p></dd>",
      "name": "c1",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "c2",
        "v",
        "b"
      ],
      "choices": [],
      "default": "clipval",
      "description": "<dd><p>set third pixel component expression\n</p></dd>",
      "name": "c2",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "c3",
        "a"
      ],
      "choices": [],
      "default": "clipval",
      "description": "<dd><p>set fourth pixel component expression, corresponds to the alpha component\n</p>\n</dd>",
      "name": "c3",
      "required": false,
      "typing": "str"
    }
  ],
  "output_stream_typings": [
    {
      "name": "default",
      "type": "AVMEDIA_TYPE_VIDEO"
    }
  ],
  "ref": "https://ffmpeg.org/ffmpeg-filters.html#lut_002c-lutrgb_002c-lutyuv"
}
