{
  "description": "### 11.60 deconvolve\n\nApply 2D deconvolution of video stream in frequency domain using second stream\nas impulse.\n\nThe filter accepts the following options:\n\n**planes**\n\n    Set which planes to process. \n\n**impulse**\n\n    Set which impulse video frames will be processed, can be first or all. Default is all. \n\n**noise**\n\n    Set noise when doing divisions. Default is 0.0000001. Useful when width and height are not same and not power of 2 or if stream prior to convolving had noise. \n\nThe `deconvolve` filter also supports the framesync options.\n\n",
  "filter_type": "vf",
  "formula_input_typings": null,
  "formula_output_typings": null,
  "id": "ff_vf_deconvolve",
  "input_stream_typings": [
    {
      "name": "main",
      "type": "AVMEDIA_TYPE_VIDEO"
    },
    {
      "name": "impulse",
      "type": "AVMEDIA_TYPE_VIDEO"
    }
  ],
  "is_input_dynamic": false,
  "is_output_dynamic": false,
  "is_support_framesync": true,
  "is_support_timeline": true,
  "name": "deconvolve",
  "options": [
    {
      "alias": [
        "planes"
      ],
      "choices": [],
      "default": 7,
      "description": "<dd><p>Set which planes to process.\n</p>\n</dd>",
      "name": "planes",
      "required": false,
      "typing": "int"
    },
    {
      "alias": [
        "impulse"
      ],
      "choices": [
        {
          "help": "process only first impulse, ignore rest",
          "name": "first",
          "value": 0
        },
        {
          "help": "process all impulses",
          "name": "all",
          "value": 1
        }
      ],
      "default": 1,
      "description": "<dd><p>Set which impulse video frames will be processed, can be <var>first</var>\nor <var>all</var>. Default is <var>all</var>.\n</p>\n</dd>",
      "name": "impulse",
      "required": false,
      "typing": "int"
    },
    {
      "alias": [
        "noise"
      ],
      "choices": [],
      "default": 1e-07,
      "description": "<dd><p>Set noise when doing divisions. Default is <var>0.0000001</var>. Useful when width\nand height are not same and not power of 2 or if stream prior to convolving\nhad noise.\n</p></dd>",
      "name": "noise",
      "required": false,
      "typing": "float"
    },
    {
      "alias": [],
      "choices": [],
      "default": null,
      "description": "timeline editing",
      "name": "enable",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [],
      "choices": [
        {
          "help": "Repeat the last frame.",
          "name": "repeat",
          "value": "repeat"
        },
        {
          "help": "End both streams.",
          "name": "endall",
          "value": "endall"
        },
        {
          "help": "Pass the main input through.",
          "name": "pass",
          "value": "pass"
        }
      ],
      "default": "repeat",
      "description": "The action to take when EOF is encountered on the secondary input; it accepts one of the following values",
      "name": "eof_action",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [],
      "choices": [],
      "default": 0,
      "description": "Force the output to terminate when the shortest input terminates.",
      "name": "shortest",
      "required": false,
      "typing": "bool"
    },
    {
      "alias": [],
      "choices": [],
      "default": 1,
      "description": "force the filter to extend the last frame of secondary streams until the end of the primary stream.",
      "name": "repeatlast",
      "required": false,
      "typing": "bool"
    },
    {
      "alias": [],
      "choices": [
        {
          "help": "Frame from secondary input with the nearest lower or equal timestamp to the primary input frame.",
          "name": "default",
          "value": "default"
        },
        {
          "help": "Frame from secondary input with the absolute nearest timestamp to the primary input frame.",
          "name": "nearest",
          "value": "nearest"
        }
      ],
      "default": "default",
      "description": "How strictly to sync streams based on secondary input timestamps; it accepts one of the following values:",
      "name": "ts_sync_mode",
      "required": false,
      "typing": "str"
    }
  ],
  "output_stream_typings": [
    {
      "name": "default",
      "type": "AVMEDIA_TYPE_VIDEO"
    }
  ],
  "ref": "https://ffmpeg.org/ffmpeg-filters.html#deconvolve"
}
