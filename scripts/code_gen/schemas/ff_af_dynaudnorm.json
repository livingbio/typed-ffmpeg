{
  "description": "### 8.85 dynaudnorm\n\nDynamic Audio Normalizer.\n\n\nThis filter applies a certain amount of gain to the input audio in order\nto bring its peak magnitude to a target level (e.g. 0 dBFS). However, in\ncontrast to more \"simple\" normalization algorithms, the Dynamic Audio\nNormalizer *dynamically* re-adjusts the gain factor to the input audio.\nThis allows for applying extra gain to the \"quiet\" sections of the audio\nwhile avoiding distortions or clipping the \"loud\" sections. In other words:\nThe Dynamic Audio Normalizer will \"even out\" the volume of quiet and loud\nsections, in the sense that the volume of each section is brought to the\nsame target level. Note, however, that the Dynamic Audio Normalizer achieves\nthis goal *without* applying \"dynamic range compressing\". It will retain 100%\nof the dynamic range *within* each section of the audio file.\n\n\n- **`framelen, f`**\n  - Set the frame length in milliseconds. In range from 10 to 8000 milliseconds.\nDefault is 500 milliseconds.\nThe Dynamic Audio Normalizer processes the input audio in small chunks,\nreferred to as frames. This is required, because a peak magnitude has no\nmeaning for just a single sample value. Instead, we need to determine the\npeak magnitude for a contiguous sequence of sample values. While a \"standard\"\nnormalizer would simply use the peak magnitude of the complete file, the\nDynamic Audio Normalizer determines the peak magnitude individually for each\nframe. The length of a frame is specified in milliseconds. By default, the\nDynamic Audio Normalizer uses a frame length of 500 milliseconds, which has\nbeen found to give good results with most files.\nNote that the exact frame length, in number of samples, will be determined\nautomatically, based on the sampling rate of the individual input audio file.\n- **`gausssize, g`**\n  - Set the Gaussian filter window size. In range from 3 to 301, must be odd\nnumber. Default is 31.\nProbably the most important parameter of the Dynamic Audio Normalizer is the\nwindow size\nof the Gaussian smoothing filter. The filter\u2019s window size\nis specified in frames, centered around the current frame. For the sake of\nsimplicity, this must be an odd number. Consequently, the default value of 31\ntakes into account the current frame, as well as the 15 preceding frames and\nthe 15 subsequent frames. Using a larger window results in a stronger\nsmoothing effect and thus in less gain variation, i.e. slower gain\nadaptation. Conversely, using a smaller window results in a weaker smoothing\neffect and thus in more gain variation, i.e. faster gain adaptation.\nIn other words, the more you increase this value, the more the Dynamic Audio\nNormalizer will behave like a \"traditional\" normalization filter. On the\ncontrary, the more you decrease this value, the more the Dynamic Audio\nNormalizer will behave like a dynamic range compressor.\n- **`peak, p`**\n  - Set the target peak value. This specifies the highest permissible magnitude\nlevel for the normalized audio input. This filter will try to approach the\ntarget peak magnitude as closely as possible, but at the same time it also\nmakes sure that the normalized signal will never exceed the peak magnitude.\nA frame\u2019s maximum local gain factor is imposed directly by the target peak\nmagnitude. The default value is 0.95 and thus leaves a headroom of 5%*.\nIt is not recommended to go above this value.\n- **`maxgain, m`**\n  - Set the maximum gain factor. In range from 1.0 to 100.0. Default is 10.0.\nThe Dynamic Audio Normalizer determines the maximum possible (local) gain\nfactor for each input frame, i.e. the maximum gain factor that does not\nresult in clipping or distortion. The maximum gain factor is determined by\nthe frame\u2019s highest magnitude sample. However, the Dynamic Audio Normalizer\nadditionally bounds the frame\u2019s maximum gain factor by a predetermined\n(global) maximum gain factor. This is done in order to avoid excessive gain\nfactors in \"silent\" or almost silent frames. By default, the maximum gain\nfactor is 10.0, For most inputs the default value should be sufficient and\nit usually is not recommended to increase this value. Though, for input\nwith an extremely low overall volume level, it may be necessary to allow even\nhigher gain factors. Note, however, that the Dynamic Audio Normalizer does\nnot simply apply a \"hard\" threshold (i.e. cut off values above the threshold).\nInstead, a \"sigmoid\" threshold function will be applied. This way, the\ngain factors will smoothly approach the threshold value, but never exceed that\nvalue.\n- **`targetrms, r`**\n  - Set the target RMS. In range from 0.0 to 1.0. Default is 0.0 - disabled.\nBy default, the Dynamic Audio Normalizer performs \"peak\" normalization.\nThis means that the maximum local gain factor for each frame is defined\n(only) by the frame\u2019s highest magnitude sample. This way, the samples can\nbe amplified as much as possible without exceeding the maximum signal\nlevel, i.e. without clipping. Optionally, however, the Dynamic Audio\nNormalizer can also take into account the frame\u2019s root mean square,\nabbreviated RMS. In electrical engineering, the RMS is commonly used to\ndetermine the power of a time-varying signal. It is therefore considered\nthat the RMS is a better approximation of the \"perceived loudness\" than\njust looking at the signal\u2019s peak magnitude. Consequently, by adjusting all\nframes to a constant RMS value, a uniform \"perceived loudness\" can be\nestablished. If a target RMS value has been specified, a frame\u2019s local gain\nfactor is defined as the factor that would result in exactly that RMS value.\nNote, however, that the maximum local gain factor is still restricted by the\nframe\u2019s highest magnitude sample, in order to prevent clipping.\n- **`coupling, n`**\n  - Enable channels coupling. By default is enabled.\nBy default, the Dynamic Audio Normalizer will amplify all channels by the same\namount. This means the same gain factor will be applied to all channels, i.e.\nthe maximum possible gain factor is determined by the \"loudest\" channel.\nHowever, in some recordings, it may happen that the volume of the different\nchannels is uneven, e.g. one channel may be \"quieter\" than the other one(s).\nIn this case, this option can be used to disable the channel coupling. This way,\nthe gain factor will be determined independently for each channel, depending\nonly on the individual channel\u2019s highest magnitude sample. This allows for\nharmonizing the volume of the different channels.\n- **`correctdc, c`**\n  - Enable DC bias correction. By default is disabled.\nAn audio signal (in the time domain) is a sequence of sample values.\nIn the Dynamic Audio Normalizer these sample values are represented in the\n-1.0 to 1.0 range, regardless of the original input format. Normally, the\naudio signal, or \"waveform\", should be centered around the zero point.\nThat means if we calculate the mean value of all samples in a file, or in a\nsingle frame, then the result should be 0.0 or at least very close to that\nvalue. If, however, there is a significant deviation of the mean value from\n0.0, in either positive or negative direction, this is referred to as a\nDC bias or DC offset. Since a DC bias is clearly undesirable, the Dynamic\nAudio Normalizer provides optional DC bias correction.\nWith DC bias correction enabled, the Dynamic Audio Normalizer will determine\nthe mean value, or \"DC correction\" offset, of each input frame and subtract\nthat value from all of the frame\u2019s sample values which ensures those samples\nare centered around 0.0 again. Also, in order to avoid \"gaps\" at the frame\nboundaries, the DC correction offset values will be interpolated smoothly\nbetween neighbouring frames.\n- **`altboundary, b`**\n  - Enable alternative boundary mode. By default is disabled.\nThe Dynamic Audio Normalizer takes into account a certain neighbourhood\naround each frame. This includes the preceding frames as well as the\nsubsequent frames. However, for the \"boundary\" frames, located at the very\nbeginning and at the very end of the audio file, not all neighbouring\nframes are available. In particular, for the first few frames in the audio\nfile, the preceding frames are not known. And, similarly, for the last few\nframes in the audio file, the subsequent frames are not known. Thus, the\nquestion arises which gain factors should be assumed for the missing frames\nin the \"boundary\" region. The Dynamic Audio Normalizer implements two modes\nto deal with this situation. The default boundary mode assumes a gain factor\nof exactly 1.0 for the missing frames, resulting in a smooth \"fade in\" and\n\"fade out\" at the beginning and at the end of the input, respectively.\n- **`compress, s`**\n  - Set the compress factor. In range from 0.0 to 30.0. Default is 0.0.\nBy default, the Dynamic Audio Normalizer does not apply \"traditional\"\ncompression. This means that signal peaks will not be pruned and thus the\nfull dynamic range will be retained within each local neighbourhood. However,\nin some cases it may be desirable to combine the Dynamic Audio Normalizer\u2019s\nnormalization algorithm with a more \"traditional\" compression.\nFor this purpose, the Dynamic Audio Normalizer provides an optional compression\n(thresholding) function. If (and only if) the compression feature is enabled,\nall input frames will be processed by a soft knee thresholding function prior\nto the actual normalization process. Put simply, the thresholding function is\ngoing to prune all samples whose magnitude exceeds a certain threshold value.\nHowever, the Dynamic Audio Normalizer does not simply apply a fixed threshold\nvalue. Instead, the threshold value will be adjusted for each individual\nframe.\nIn general, smaller parameters result in stronger compression, and vice versa.\nValues below 3.0 are not recommended, because audible distortion may appear.\n- **`threshold, t`**\n  - Set the target threshold value. This specifies the lowest permissible\nmagnitude level for the audio input which will be normalized.\nIf input frame volume is above this value frame will be normalized.\nOtherwise frame may not be normalized at all. The default value is set\nto 0, which means all input frames will be normalized.\nThis option is mostly useful if digital noise is not wanted to be amplified.\n- **`channels, h`**\n  - Specify which channels to filter, by default all available channels are filtered.\n- **`overlap, o`**\n  - Specify overlap for frames. If set to 0 (default) no frame overlapping is done.\nUsing >0 and <1 values will make less conservative gain adjustments, like\nwhen framelen option is set to smaller value, if framelen option value is\ncompensated for non-zero overlap then gain adjustments will be smoother across time\ncompared to zero overlap case.\n- **`curve, v`**\n  - Specify the peak mapping curve expression which is going to be used when calculating\ngain applied to frames. The max output frame gain will still be limited by other\noptions mentioned previously for this filter.\nThe expression can contain the following constants:\nch\ncurrent channel number\nsn\ncurrent sample number\nnb_channels\nnumber of channels\nt\ntimestamp expressed in seconds\nsr\nsample rate\np\ncurrent frame peak value\nSet the frame length in milliseconds. In range from 10 to 8000 milliseconds.\nDefault is 500 milliseconds.\nThe Dynamic Audio Normalizer processes the input audio in small chunks,\nreferred to as frames. This is required, because a peak magnitude has no\nmeaning for just a single sample value. Instead, we need to determine the\npeak magnitude for a contiguous sequence of sample values. While a \"standard\"\nnormalizer would simply use the peak magnitude of the complete file, the\nDynamic Audio Normalizer determines the peak magnitude individually for each\nframe. The length of a frame is specified in milliseconds. By default, the\nDynamic Audio Normalizer uses a frame length of 500 milliseconds, which has\nbeen found to give good results with most files.\nNote that the exact frame length, in number of samples, will be determined\nautomatically, based on the sampling rate of the individual input audio file.\n\n\nSet the Gaussian filter window size. In range from 3 to 301, must be odd\nnumber. Default is 31.\nProbably the most important parameter of the Dynamic Audio Normalizer is the\nwindow size of the Gaussian smoothing filter. The filter\u2019s window size\nis specified in frames, centered around the current frame. For the sake of\nsimplicity, this must be an odd number. Consequently, the default value of 31\ntakes into account the current frame, as well as the 15 preceding frames and\nthe 15 subsequent frames. Using a larger window results in a stronger\nsmoothing effect and thus in less gain variation, i.e. slower gain\nadaptation. Conversely, using a smaller window results in a weaker smoothing\neffect and thus in more gain variation, i.e. faster gain adaptation.\nIn other words, the more you increase this value, the more the Dynamic Audio\nNormalizer will behave like a \"traditional\" normalization filter. On the\ncontrary, the more you decrease this value, the more the Dynamic Audio\nNormalizer will behave like a dynamic range compressor.\n\n\nSet the target peak value. This specifies the highest permissible magnitude\nlevel for the normalized audio input. This filter will try to approach the\ntarget peak magnitude as closely as possible, but at the same time it also\nmakes sure that the normalized signal will never exceed the peak magnitude.\nA frame\u2019s maximum local gain factor is imposed directly by the target peak\nmagnitude. The default value is 0.95 and thus leaves a headroom of 5%*.\nIt is not recommended to go above this value.\n\n\nSet the maximum gain factor. In range from 1.0 to 100.0. Default is 10.0.\nThe Dynamic Audio Normalizer determines the maximum possible (local) gain\nfactor for each input frame, i.e. the maximum gain factor that does not\nresult in clipping or distortion. The maximum gain factor is determined by\nthe frame\u2019s highest magnitude sample. However, the Dynamic Audio Normalizer\nadditionally bounds the frame\u2019s maximum gain factor by a predetermined\n(global) maximum gain factor. This is done in order to avoid excessive gain\nfactors in \"silent\" or almost silent frames. By default, the maximum gain\nfactor is 10.0, For most inputs the default value should be sufficient and\nit usually is not recommended to increase this value. Though, for input\nwith an extremely low overall volume level, it may be necessary to allow even\nhigher gain factors. Note, however, that the Dynamic Audio Normalizer does\nnot simply apply a \"hard\" threshold (i.e. cut off values above the threshold).\nInstead, a \"sigmoid\" threshold function will be applied. This way, the\ngain factors will smoothly approach the threshold value, but never exceed that\nvalue.\n\n\nSet the target RMS. In range from 0.0 to 1.0. Default is 0.0 - disabled.\nBy default, the Dynamic Audio Normalizer performs \"peak\" normalization.\nThis means that the maximum local gain factor for each frame is defined\n(only) by the frame\u2019s highest magnitude sample. This way, the samples can\nbe amplified as much as possible without exceeding the maximum signal\nlevel, i.e. without clipping. Optionally, however, the Dynamic Audio\nNormalizer can also take into account the frame\u2019s root mean square,\nabbreviated RMS. In electrical engineering, the RMS is commonly used to\ndetermine the power of a time-varying signal. It is therefore considered\nthat the RMS is a better approximation of the \"perceived loudness\" than\njust looking at the signal\u2019s peak magnitude. Consequently, by adjusting all\nframes to a constant RMS value, a uniform \"perceived loudness\" can be\nestablished. If a target RMS value has been specified, a frame\u2019s local gain\nfactor is defined as the factor that would result in exactly that RMS value.\nNote, however, that the maximum local gain factor is still restricted by the\nframe\u2019s highest magnitude sample, in order to prevent clipping.\n\n\nEnable channels coupling. By default is enabled.\nBy default, the Dynamic Audio Normalizer will amplify all channels by the same\namount. This means the same gain factor will be applied to all channels, i.e.\nthe maximum possible gain factor is determined by the \"loudest\" channel.\nHowever, in some recordings, it may happen that the volume of the different\nchannels is uneven, e.g. one channel may be \"quieter\" than the other one(s).\nIn this case, this option can be used to disable the channel coupling. This way,\nthe gain factor will be determined independently for each channel, depending\nonly on the individual channel\u2019s highest magnitude sample. This allows for\nharmonizing the volume of the different channels.\n\n\nEnable DC bias correction. By default is disabled.\nAn audio signal (in the time domain) is a sequence of sample values.\nIn the Dynamic Audio Normalizer these sample values are represented in the\n-1.0 to 1.0 range, regardless of the original input format. Normally, the\naudio signal, or \"waveform\", should be centered around the zero point.\nThat means if we calculate the mean value of all samples in a file, or in a\nsingle frame, then the result should be 0.0 or at least very close to that\nvalue. If, however, there is a significant deviation of the mean value from\n0.0, in either positive or negative direction, this is referred to as a\nDC bias or DC offset. Since a DC bias is clearly undesirable, the Dynamic\nAudio Normalizer provides optional DC bias correction.\nWith DC bias correction enabled, the Dynamic Audio Normalizer will determine\nthe mean value, or \"DC correction\" offset, of each input frame and subtract\nthat value from all of the frame\u2019s sample values which ensures those samples\nare centered around 0.0 again. Also, in order to avoid \"gaps\" at the frame\nboundaries, the DC correction offset values will be interpolated smoothly\nbetween neighbouring frames.\n\n\nEnable alternative boundary mode. By default is disabled.\nThe Dynamic Audio Normalizer takes into account a certain neighbourhood\naround each frame. This includes the preceding frames as well as the\nsubsequent frames. However, for the \"boundary\" frames, located at the very\nbeginning and at the very end of the audio file, not all neighbouring\nframes are available. In particular, for the first few frames in the audio\nfile, the preceding frames are not known. And, similarly, for the last few\nframes in the audio file, the subsequent frames are not known. Thus, the\nquestion arises which gain factors should be assumed for the missing frames\nin the \"boundary\" region. The Dynamic Audio Normalizer implements two modes\nto deal with this situation. The default boundary mode assumes a gain factor\nof exactly 1.0 for the missing frames, resulting in a smooth \"fade in\" and\n\"fade out\" at the beginning and at the end of the input, respectively.\n\n\nSet the compress factor. In range from 0.0 to 30.0. Default is 0.0.\nBy default, the Dynamic Audio Normalizer does not apply \"traditional\"\ncompression. This means that signal peaks will not be pruned and thus the\nfull dynamic range will be retained within each local neighbourhood. However,\nin some cases it may be desirable to combine the Dynamic Audio Normalizer\u2019s\nnormalization algorithm with a more \"traditional\" compression.\nFor this purpose, the Dynamic Audio Normalizer provides an optional compression\n(thresholding) function. If (and only if) the compression feature is enabled,\nall input frames will be processed by a soft knee thresholding function prior\nto the actual normalization process. Put simply, the thresholding function is\ngoing to prune all samples whose magnitude exceeds a certain threshold value.\nHowever, the Dynamic Audio Normalizer does not simply apply a fixed threshold\nvalue. Instead, the threshold value will be adjusted for each individual\nframe.\nIn general, smaller parameters result in stronger compression, and vice versa.\nValues below 3.0 are not recommended, because audible distortion may appear.\n\n\nSet the target threshold value. This specifies the lowest permissible\nmagnitude level for the audio input which will be normalized.\nIf input frame volume is above this value frame will be normalized.\nOtherwise frame may not be normalized at all. The default value is set\nto 0, which means all input frames will be normalized.\nThis option is mostly useful if digital noise is not wanted to be amplified.\n\n\nSpecify which channels to filter, by default all available channels are filtered.\n\n\nSpecify overlap for frames. If set to 0 (default) no frame overlapping is done.\nUsing >0 and <1 values will make less conservative gain adjustments, like\nwhen framelen option is set to smaller value, if framelen option value is\ncompensated for non-zero overlap then gain adjustments will be smoother across time\ncompared to zero overlap case.\n\n\nSpecify the peak mapping curve expression which is going to be used when calculating\ngain applied to frames. The max output frame gain will still be limited by other\noptions mentioned previously for this filter.\n\n\nThe expression can contain the following constants:\n\n\n- **`ch`**\n  - current channel number\n- **`sn`**\n  - current sample number\n- **`nb_channels`**\n  - number of channels\n- **`t`**\n  - timestamp expressed in seconds\n- **`sr`**\n  - sample rate\n- **`p`**\n  - current frame peak value\ncurrent channel number\n\n\ncurrent sample number\n\n\nnumber of channels\n\n\ntimestamp expressed in seconds\n\n\nsample rate\n\n\ncurrent frame peak value\n\n\n",
  "filter_type": "af",
  "formula_input_typings": null,
  "formula_output_typings": null,
  "id": "ff_af_dynaudnorm",
  "input_stream_typings": [
    {
      "name": "default",
      "type": "AVMEDIA_TYPE_AUDIO"
    }
  ],
  "is_input_dynamic": false,
  "is_output_dynamic": false,
  "name": "dynaudnorm",
  "options": [
    {
      "alias": [
        "framelen",
        "f"
      ],
      "choices": [],
      "default": 500,
      "description": null,
      "name": "framelen",
      "required": false,
      "typing": "int"
    },
    {
      "alias": [
        "gausssize",
        "g"
      ],
      "choices": [],
      "default": 31,
      "description": null,
      "name": "gausssize",
      "required": false,
      "typing": "int"
    },
    {
      "alias": [
        "peak",
        "p"
      ],
      "choices": [],
      "default": 0.95,
      "description": null,
      "name": "peak",
      "required": false,
      "typing": "float"
    },
    {
      "alias": [
        "maxgain",
        "m"
      ],
      "choices": [],
      "default": 10.0,
      "description": null,
      "name": "maxgain",
      "required": false,
      "typing": "float"
    },
    {
      "alias": [
        "targetrms",
        "r"
      ],
      "choices": [],
      "default": 0.0,
      "description": null,
      "name": "targetrms",
      "required": false,
      "typing": "float"
    },
    {
      "alias": [
        "coupling",
        "n"
      ],
      "choices": [],
      "default": 1,
      "description": null,
      "name": "coupling",
      "required": false,
      "typing": "bool"
    },
    {
      "alias": [
        "correctdc",
        "c"
      ],
      "choices": [],
      "default": 0,
      "description": null,
      "name": "correctdc",
      "required": false,
      "typing": "bool"
    },
    {
      "alias": [
        "altboundary",
        "b"
      ],
      "choices": [],
      "default": 0,
      "description": null,
      "name": "altboundary",
      "required": false,
      "typing": "bool"
    },
    {
      "alias": [
        "compress",
        "s"
      ],
      "choices": [],
      "default": 0.0,
      "description": null,
      "name": "compress",
      "required": false,
      "typing": "float"
    },
    {
      "alias": [
        "threshold",
        "t"
      ],
      "choices": [],
      "default": 0.0,
      "description": null,
      "name": "threshold",
      "required": false,
      "typing": "float"
    },
    {
      "alias": [
        "channels",
        "h"
      ],
      "choices": [],
      "default": "all",
      "description": null,
      "name": "channels",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "overlap",
        "o"
      ],
      "choices": [],
      "default": 0.0,
      "description": null,
      "name": "overlap",
      "required": false,
      "typing": "float"
    },
    {
      "alias": [
        "curve",
        "v"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": null,
      "name": "curve",
      "required": true,
      "typing": "str"
    }
  ],
  "output_stream_typings": [
    {
      "name": "default",
      "type": "AVMEDIA_TYPE_AUDIO"
    }
  ],
  "ref": "https://ffmpeg.org/ffmpeg-filters.html#dynaudnorm"
}
