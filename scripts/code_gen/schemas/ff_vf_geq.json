{
  "description": "### 11.110 geq\n\nApply generic equation to each pixel.\n\nThe filter accepts the following options:\n\n**lum_expr, lum**\n\n    Set the luma expression. \n\n**cb_expr, cb**\n\n    Set the chrominance blue expression. \n\n**cr_expr, cr**\n\n    Set the chrominance red expression. \n\n**alpha_expr, a**\n\n    Set the alpha expression. \n\n**red_expr, r**\n\n    Set the red expression. \n\n**green_expr, g**\n\n    Set the green expression. \n\n**blue_expr, b**\n\n    Set the blue expression. \n\nThe colorspace is selected according to the specified options. If one of the\nlum_expr, cb_expr, or cr_expr options is specified, the filter will\nautomatically select a YCbCr colorspace. If one of the red_expr, green_expr,\nor blue_expr options is specified, it will select an RGB colorspace.\n\nIf one of the chrominance expression is not defined, it falls back on the\nother one. If no alpha expression is specified it will evaluate to opaque\nvalue. If none of chrominance expressions are specified, they will evaluate to\nthe luma expression.\n\nThe expressions can use the following variables and functions:\n\n**N**\n\n    The sequential number of the filtered frame, starting from 0. \n\n**X**\n\n**Y**\n\n    The coordinates of the current sample. \n\n**W**\n\n**H**\n\n    The width and height of the image. \n\n**SW**\n\n**SH**\n\n    Width and height scale depending on the currently filtered plane. It is the ratio between the corresponding luma plane number of pixels and the current plane ones. E.g. for YUV4:2:0 the values are 1,1 for the luma plane, and 0.5,0.5 for chroma planes. \n\n**T**\n\n    Time of the current frame, expressed in seconds. \n\n**p(x, y)**\n\n    Return the value of the pixel at location (x,y) of the current plane. \n\n**lum(x, y)**\n\n    Return the value of the pixel at location (x,y) of the luma plane. \n\n**cb(x, y)**\n\n    Return the value of the pixel at location (x,y) of the blue-difference chroma plane. Return 0 if there is no such plane. \n\n**cr(x, y)**\n\n    Return the value of the pixel at location (x,y) of the red-difference chroma plane. Return 0 if there is no such plane. \n\n**r(x, y)**\n\n**g(x, y)**\n\n**b(x, y)**\n\n    Return the value of the pixel at location (x,y) of the red/green/blue component. Return 0 if there is no such component. \n\n**alpha(x, y)**\n\n    Return the value of the pixel at location (x,y) of the alpha plane. Return 0 if there is no such plane. \n\n**psum(x,y), lumsum(x, y), cbsum(x,y), crsum(x,y), rsum(x,y), gsum(x,y),\nbsum(x,y), alphasum(x,y)**\n\n    Sum of sample values in the rectangle from (0,0) to (x,y), this allows obtaining sums of samples within a rectangle. See the functions without the sum postfix. \n\n**interpolation**\n\n    Set one of interpolation methods: nearest, n bilinear, b Default is bilinear. \n\nFor functions, if x and y are outside the area, the value will be\nautomatically clipped to the closer edge.\n\nPlease note that this filter can use multiple threads in which case each slice\nwill have its own expression state. If you want to use only a single\nexpression state because your expressions depend on previous state then you\nshould limit the number of filter threads to 1.\n\n",
  "filter_type": "vf",
  "formula_input_typings": null,
  "formula_output_typings": null,
  "id": "ff_vf_geq",
  "input_stream_typings": [
    {
      "name": "default",
      "type": "AVMEDIA_TYPE_VIDEO"
    }
  ],
  "is_input_dynamic": false,
  "is_output_dynamic": false,
  "is_support_timeline": true,
  "name": "geq",
  "options": [
    {
      "alias": [
        "lum_expr",
        "lum"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the luma expression.\n</p></dd>",
      "name": "lum_expr",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "cb_expr",
        "cb"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the chrominance blue expression.\n</p></dd>",
      "name": "cb_expr",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "cr_expr",
        "cr"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the chrominance red expression.\n</p></dd>",
      "name": "cr_expr",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "alpha_expr",
        "a"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the alpha expression.\n</p></dd>",
      "name": "alpha_expr",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "red_expr",
        "r"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the red expression.\n</p></dd>",
      "name": "red_expr",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "green_expr",
        "g"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the green expression.\n</p></dd>",
      "name": "green_expr",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "blue_expr",
        "b"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the blue expression.\n</p></dd>",
      "name": "blue_expr",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "interpolation",
        "i"
      ],
      "choices": [
        {
          "help": "nearest interpolation",
          "name": "nearest",
          "value": "INTERP_NEAREST"
        },
        {
          "help": "nearest interpolation",
          "name": "n",
          "value": "INTERP_NEAREST"
        },
        {
          "help": "bilinear interpolation",
          "name": "bilinear",
          "value": "INTERP_BILINEAR"
        },
        {
          "help": "bilinear interpolation",
          "name": "b",
          "value": "INTERP_BILINEAR"
        }
      ],
      "default": "INTERP_BILINEAR",
      "description": "set interpolation method",
      "name": "interpolation",
      "required": false,
      "typing": "int"
    },
    {
      "alias": [],
      "choices": [],
      "default": null,
      "description": "timeline editing",
      "name": "enable",
      "required": false,
      "typing": "str"
    }
  ],
  "output_stream_typings": [
    {
      "name": "default",
      "type": "AVMEDIA_TYPE_VIDEO"
    }
  ],
  "ref": "https://ffmpeg.org/ffmpeg-filters.html#geq"
}
