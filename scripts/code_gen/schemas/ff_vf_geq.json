{
  "description": "### 11.110 geq\n\nApply generic equation to each pixel.\n\n\nThe filter accepts the following options:\n\n\n- **`lum_expr, lum`**\n  - Set the luma expression.\n- **`cb_expr, cb`**\n  - Set the chrominance blue expression.\n- **`cr_expr, cr`**\n  - Set the chrominance red expression.\n- **`alpha_expr, a`**\n  - Set the alpha expression.\n- **`red_expr, r`**\n  - Set the red expression.\n- **`green_expr, g`**\n  - Set the green expression.\n- **`blue_expr, b`**\n  - Set the blue expression.\nSet the luma expression.\n\n\nSet the chrominance blue expression.\n\n\nSet the chrominance red expression.\n\n\nSet the alpha expression.\n\n\nSet the red expression.\n\n\nSet the green expression.\n\n\nSet the blue expression.\n\n\nThe colorspace is selected according to the specified options. If one\nof the lum_expr, cb_expr, or cr_expr\noptions is specified, the filter will automatically select a YCbCr\ncolorspace. If one of the red_expr, green_expr, or\nblue_expr options is specified, it will select an RGB\ncolorspace.\n\n\nIf one of the chrominance expression is not defined, it falls back on the other\none. If no alpha expression is specified it will evaluate to opaque value.\nIf none of chrominance expressions are specified, they will evaluate\nto the luma expression.\n\n\nThe expressions can use the following variables and functions:\n\n\n- **`N`**\n  - The sequential number of the filtered frame, starting from\n0\n.\n- **`X`**\n- **`Y`**\n  - The coordinates of the current sample.\n- **`W`**\n- **`H`**\n  - The width and height of the image.\n- **`SW`**\n- **`SH`**\n  - Width and height scale depending on the currently filtered plane. It is the\nratio between the corresponding luma plane number of pixels and the current\nplane ones. E.g. for YUV4:2:0 the values are\n1,1\nfor the luma plane, and\n0.5,0.5\nfor chroma planes.\n- **`T`**\n  - Time of the current frame, expressed in seconds.\n- **`p(x, y)`**\n  - Return the value of the pixel at location (\nx\n,\ny\n) of the current\nplane.\n- **`lum(x, y)`**\n  - Return the value of the pixel at location (\nx\n,\ny\n) of the luma\nplane.\n- **`cb(x, y)`**\n  - Return the value of the pixel at location (\nx\n,\ny\n) of the\nblue-difference chroma plane. Return 0 if there is no such plane.\n- **`cr(x, y)`**\n  - Return the value of the pixel at location (\nx\n,\ny\n) of the\nred-difference chroma plane. Return 0 if there is no such plane.\n- **`r(x, y)`**\n- **`g(x, y)`**\n- **`b(x, y)`**\n  - Return the value of the pixel at location (\nx\n,\ny\n) of the\nred/green/blue component. Return 0 if there is no such component.\n- **`alpha(x, y)`**\n  - Return the value of the pixel at location (\nx\n,\ny\n) of the alpha\nplane. Return 0 if there is no such plane.\n- **`psum(x,y), lumsum(x, y), cbsum(x,y), crsum(x,y), rsum(x,y), gsum(x,y), bsum(x,y), alphasum(x,y)`**\n  - Sum of sample values in the rectangle from (0,0) to (x,y), this allows obtaining\nsums of samples within a rectangle. See the functions without the sum postfix.\n- **`interpolation`**\n  - Set one of interpolation methods:\nnearest, n\nbilinear, b\nDefault is bilinear.\nThe sequential number of the filtered frame, starting from 0.\n\n\nThe coordinates of the current sample.\n\n\nThe width and height of the image.\n\n\nWidth and height scale depending on the currently filtered plane. It is the\nratio between the corresponding luma plane number of pixels and the current\nplane ones. E.g. for YUV4:2:0 the values are 1,1 for the luma plane, and\n0.5,0.5 for chroma planes.\n\n\nTime of the current frame, expressed in seconds.\n\n\nReturn the value of the pixel at location (x,y) of the current\nplane.\n\n\nReturn the value of the pixel at location (x,y) of the luma\nplane.\n\n\nReturn the value of the pixel at location (x,y) of the\nblue-difference chroma plane. Return 0 if there is no such plane.\n\n\nReturn the value of the pixel at location (x,y) of the\nred-difference chroma plane. Return 0 if there is no such plane.\n\n\nReturn the value of the pixel at location (x,y) of the\nred/green/blue component. Return 0 if there is no such component.\n\n\nReturn the value of the pixel at location (x,y) of the alpha\nplane. Return 0 if there is no such plane.\n\n\nSum of sample values in the rectangle from (0,0) to (x,y), this allows obtaining\nsums of samples within a rectangle. See the functions without the sum postfix.\n\n\nSet one of interpolation methods:\n\n\n- **`nearest, n`**\n- **`bilinear, b`**\nDefault is bilinear.\n\n\nFor functions, if x and y are outside the area, the value will be\nautomatically clipped to the closer edge.\n\n\nPlease note that this filter can use multiple threads in which case each slice\nwill have its own expression state. If you want to use only a single expression\nstate because your expressions depend on previous state then you should limit\nthe number of filter threads to 1.\n\n\n",
  "filter_type": "vf",
  "formula_input_typings": null,
  "formula_output_typings": null,
  "id": "ff_vf_geq",
  "input_stream_typings": [
    {
      "name": "default",
      "type": "AVMEDIA_TYPE_VIDEO"
    }
  ],
  "is_input_dynamic": false,
  "is_output_dynamic": false,
  "name": "geq",
  "options": [
    {
      "alias": [
        "lum_expr",
        "lum"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the luma expression.\n</p></dd>",
      "name": "lum_expr",
      "required": true,
      "typing": "str"
    },
    {
      "alias": [
        "cb_expr",
        "cb"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the chrominance blue expression.\n</p></dd>",
      "name": "cb_expr",
      "required": true,
      "typing": "str"
    },
    {
      "alias": [
        "cr_expr",
        "cr"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the chrominance red expression.\n</p></dd>",
      "name": "cr_expr",
      "required": true,
      "typing": "str"
    },
    {
      "alias": [
        "alpha_expr",
        "a"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the alpha expression.\n</p></dd>",
      "name": "alpha_expr",
      "required": true,
      "typing": "str"
    },
    {
      "alias": [
        "red_expr",
        "r"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the red expression.\n</p></dd>",
      "name": "red_expr",
      "required": true,
      "typing": "str"
    },
    {
      "alias": [
        "green_expr",
        "g"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the green expression.\n</p></dd>",
      "name": "green_expr",
      "required": true,
      "typing": "str"
    },
    {
      "alias": [
        "blue_expr",
        "b"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set the blue expression.\n</p></dd>",
      "name": "blue_expr",
      "required": true,
      "typing": "str"
    },
    {
      "alias": [
        "interpolation",
        "i"
      ],
      "choices": [
        {
          "help": "nearest interpolation",
          "name": "nearest",
          "value": "INTERP_NEAREST"
        },
        {
          "help": "nearest interpolation",
          "name": "n",
          "value": "INTERP_NEAREST"
        },
        {
          "help": "bilinear interpolation",
          "name": "bilinear",
          "value": "INTERP_BILINEAR"
        },
        {
          "help": "bilinear interpolation",
          "name": "b",
          "value": "INTERP_BILINEAR"
        }
      ],
      "default": "INTERP_BILINEAR",
      "description": null,
      "name": "interpolation",
      "required": false,
      "typing": "int"
    }
  ],
  "output_stream_typings": [
    {
      "name": "default",
      "type": "AVMEDIA_TYPE_VIDEO"
    }
  ],
  "ref": "https://ffmpeg.org/ffmpeg-filters.html#geq"
}
