{
  "description": "11.47 coreimage\nVideo filtering on GPU using Apple\u2019s CoreImage API on OSX.\n\nHardware acceleration is based on an OpenGL context. Usually, this means it is\nprocessed by video hardware. However, software-based OpenGL implementations\nexist which means there is no guarantee for hardware processing. It depends on\nthe respective OSX.\n\nThere are many filters and image generators provided by Apple that come with a\nlarge variety of options. The filter has to be referenced by its name along\nwith its options.\n\nThe coreimage filter accepts the following options:\n\nSeveral filters can be chained for successive processing without GPU-HOST\ntransfers allowing for fast processing of complex filter chains.\nCurrently, only filters with zero (generators) or exactly one (filters) input\nimage and one output image are supported. Also, transition filters are not yet\nusable as intended.\n\nSome filters generate output images with additional padding depending on the\nrespective filter kernel. The padding is automatically removed to ensure the\nfilter output has the same size as the input image.\n\nFor image generators, the size of the output image is determined by the\nprevious output image of the filter chain or the input image of the whole\nfilterchain, respectively. The generators do not use the pixel information of\nthis image to generate their output. However, the generated output is\nblended onto this image, resulting in partial or complete coverage of the\noutput image.\n\nThe coreimagesrc video source can be used for generating input images\nwhich are directly fed into the filter chain. By using it, providing input\nimages by another video source or an input video is not required.",
  "filter_type": "vf",
  "formula_input_typings": null,
  "formula_output_typings": null,
  "id": "ff_vf_coreimage",
  "input_stream_typings": [
    {
      "name": "default",
      "type": "AVMEDIA_TYPE_VIDEO"
    }
  ],
  "is_input_dynamic": false,
  "is_output_dynamic": false,
  "name": "coreimage",
  "options": [
    {
      "alias": [
        "list_filters"
      ],
      "choices": [],
      "default": 0,
      "description": "<dd><p>List all available filters and generators along with all their respective\noptions as well as possible minimum and maximum values along with the default\nvalues.\n</p><div class=\"example\">\n<pre class=\"example\">list_filters=true\n</pre></div>\n</dd>",
      "name": "list_filters",
      "required": false,
      "typing": "bool"
    },
    {
      "alias": [
        "list_generators"
      ],
      "choices": [],
      "default": 0,
      "description": null,
      "name": "list_generators",
      "required": false,
      "typing": "bool"
    },
    {
      "alias": [
        "filter"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Specify all filters by their respective name and options.\nUse <var>list_filters</var> to determine all valid filter names and options.\nNumerical options are specified by a float value and are automatically clamped\nto their respective value range.  Vector and color options have to be specified\nby a list of space separated float values. Character escaping has to be done.\nA special option name <code>default</code> is available to use default options for a\nfilter.\n</p>\n<p>It is required to specify either <code>default</code> or at least one of the filter options.\nAll omitted options are used with their default values.\nThe syntax of the filter string is as follows:\n</p><div class=\"example\">\n<pre class=\"example\">filter=&lt;NAME&gt;@&lt;OPTION&gt;=&lt;VALUE&gt;[@&lt;OPTION&gt;=&lt;VALUE&gt;][@...][#&lt;NAME&gt;@&lt;OPTION&gt;=&lt;VALUE&gt;[@&lt;OPTION&gt;=&lt;VALUE&gt;][@...]][#...]\n</pre></div>\n</dd>",
      "name": "filter",
      "required": true,
      "typing": "str"
    },
    {
      "alias": [
        "output_rect"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Specify a rectangle where the output of the filter chain is copied into the\ninput image. It is given by a list of space separated float values:\n</p><div class=\"example\">\n<pre class=\"example\">output_rect=x\\ y\\ width\\ height\n</pre></div>\n<p>If not given, the output rectangle equals the dimensions of the input image.\nThe output rectangle is automatically cropped at the borders of the input\nimage. Negative values are valid for each component.\n</p><div class=\"example\">\n<pre class=\"example\">output_rect=25\\ 25\\ 100\\ 100\n</pre></div>\n</dd>",
      "name": "output_rect",
      "required": true,
      "typing": "str"
    }
  ],
  "output_stream_typings": [
    {
      "name": "default",
      "type": "AVMEDIA_TYPE_VIDEO"
    }
  ],
  "ref": "https://ffmpeg.org/ffmpeg-filters.html#coreimage"
}
