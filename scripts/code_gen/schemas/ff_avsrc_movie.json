{
  "description": "### 19.3 movie\n\nRead audio and/or video stream(s) from a movie container.\n\nIt accepts the following parameters:\n\n**filename**\n\n    The name of the resource to read (not necessarily a file; it can also be a device or a stream accessed through some protocol). \n\n**format_name, f**\n\n    Specifies the format assumed for the movie to read, and can be either the name of a container or an input device. If not specified, the format is guessed from movie_name or by probing. \n\n**seek_point, sp**\n\n    Specifies the seek point in seconds. The frames will be output starting from this seek point. The parameter is evaluated with av_strtod, so the numerical value may be suffixed by an IS postfix. The default value is \"0\". \n\n**streams, s**\n\n    Specifies the streams to read. Several streams can be specified, separated by \"+\". The source will then have as many outputs, in the same order. The syntax is explained in the (ffmpeg)\"Stream specifiers\" section in the ffmpeg manual. Two special names, \"dv\" and \"da\" specify respectively the default (best suited) video and audio stream. Default is \"dv\", or \"da\" if the filter is called as \"amovie\". \n\n**stream_index, si**\n\n    Specifies the index of the video stream to read. If the value is -1, the most suitable video stream will be automatically selected. The default value is \"-1\". Deprecated. If the filter is called \"amovie\", it will select audio instead of video. \n\n**loop**\n\n    Specifies how many times to read the stream in sequence. If the value is 0, the stream will be looped infinitely. Default value is \"1\". Note that when the movie is looped the source timestamps are not changed, so it will generate non monotonically increasing timestamps. \n\n**discontinuity**\n\n    Specifies the time difference between frames above which the point is considered a timestamp discontinuity which is removed by adjusting the later timestamps. \n\n**dec_threads**\n\n    Specifies the number of threads for decoding \n\n**format_opts**\n\n    Specify format options for the opened file. Format options can be specified as a list of key=value pairs separated by \u2019:\u2019. The following example shows how to add protocol_whitelist and protocol_blacklist options: ffplay -f lavfi \"movie=filename='1.sdp':format_opts='protocol_whitelist=file,rtp,udp:protocol_blacklist=http'\" \n\nIt allows overlaying a second video on top of the main input of a filtergraph,\nas shown in this graph:\n\n    \n    \n    input -----------> deltapts0 --> overlay --> output\n                                        ^\n                                        |\n    movie --> scale--> deltapts1 -------+\n    \n\n",
  "filter_type": "avsrc",
  "formula_input_typings": "[StreamType.video] * len(streams.split('+'))",
  "formula_output_typings": "[StreamType.video] * len(streams.split('+'))",
  "id": "ff_avsrc_movie",
  "input_stream_typings": [],
  "is_input_dynamic": false,
  "is_output_dynamic": true,
  "is_support_framesync": false,
  "is_support_timeline": false,
  "name": "movie",
  "options": [
    {
      "alias": [
        "filename"
      ],
      "choices": [],
      "default": null,
      "description": "<dd><p>The name of the resource to read (not necessarily a file; it can also be a\ndevice or a stream accessed through some protocol).\n</p>\n</dd>",
      "name": "filename",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "format_name",
        "f"
      ],
      "choices": [],
      "default": null,
      "description": "<dd><p>Specifies the format assumed for the movie to read, and can be either\nthe name of a container or an input device. If not specified, the\nformat is guessed from <var>movie_name</var> or by probing.\n</p>\n</dd>",
      "name": "format_name",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "stream_index",
        "si"
      ],
      "choices": [],
      "default": -1,
      "description": "<dd><p>Specifies the index of the video stream to read. If the value is -1,\nthe most suitable video stream will be automatically selected. The default\nvalue is \"-1\". Deprecated. If the filter is called \"amovie\", it will select\naudio instead of video.\n</p>\n</dd>",
      "name": "stream_index",
      "required": false,
      "typing": "int"
    },
    {
      "alias": [
        "seek_point",
        "sp"
      ],
      "choices": [],
      "default": 0.0,
      "description": "<dd><p>Specifies the seek point in seconds. The frames will be output\nstarting from this seek point. The parameter is evaluated with\n<code>av_strtod</code>, so the numerical value may be suffixed by an IS\npostfix. The default value is \"0\".\n</p>\n</dd>",
      "name": "seek_point",
      "required": false,
      "typing": "float"
    },
    {
      "alias": [
        "streams",
        "s"
      ],
      "choices": [],
      "default": "0",
      "description": "<dd><p>Specifies the streams to read. Several streams can be specified,\nseparated by \"+\". The source will then have as many outputs, in the\nsame order. The syntax is explained in the <a href=\"ffmpeg.html#Stream-specifiers\">(ffmpeg)\"Stream specifiers\"\nsection in the ffmpeg manual</a>. Two special names, \"dv\" and \"da\" specify\nrespectively the default (best suited) video and audio stream. Default\nis \"dv\", or \"da\" if the filter is called as \"amovie\".\n</p>\n</dd>",
      "name": "streams",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "loop"
      ],
      "choices": [],
      "default": 1,
      "description": "<dd><p>Specifies how many times to read the stream in sequence.\nIf the value is 0, the stream will be looped infinitely.\nDefault value is \"1\".\n</p>\n<p>Note that when the movie is looped the source timestamps are not\nchanged, so it will generate non monotonically increasing timestamps.\n</p>\n</dd>",
      "name": "loop",
      "required": false,
      "typing": "int"
    },
    {
      "alias": [
        "discontinuity"
      ],
      "choices": [],
      "default": 0,
      "description": "<dd><p>Specifies the time difference between frames above which the point is\nconsidered a timestamp discontinuity which is removed by adjusting the later\ntimestamps.\n</p>\n</dd>",
      "name": "discontinuity",
      "required": false,
      "typing": "int"
    },
    {
      "alias": [
        "dec_threads"
      ],
      "choices": [],
      "default": 0,
      "description": "<dd><p>Specifies the number of threads for decoding\n</p>\n</dd>",
      "name": "dec_threads",
      "required": false,
      "typing": "int"
    },
    {
      "alias": [
        "format_opts"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Specify format options for the opened file. Format options can be specified\nas a list of <var>key</var>=<var>value</var> pairs separated by \u2019:\u2019. The following example\nshows how to add protocol_whitelist and protocol_blacklist options:\n</p><div class=\"example\">\n<pre class=\"example\">ffplay -f lavfi\n\"movie=filename='1.sdp':format_opts='protocol_whitelist=file,rtp,udp\\:protocol_blacklist=http'\"\n</pre></div>\n</dd>",
      "name": "format_opts",
      "required": false,
      "typing": "str"
    }
  ],
  "output_stream_typings": [],
  "ref": "https://ffmpeg.org/ffmpeg-filters.html#movie"
}
