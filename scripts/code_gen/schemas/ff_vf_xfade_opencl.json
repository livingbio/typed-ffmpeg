{
  "description": "### 12.18 xfade_opencl\n\nCross fade two videos with custom transition effect by using OpenCL.\n\nIt accepts the following options:\n\n**transition**\n\n    Set one of possible transition effects. custom Select custom transition effect, the actual transition description will be picked from source and kernel options. fade wipeleft wiperight wipeup wipedown slideleft slideright slideup slidedown Default transition is fade. \n\n**source**\n\n    OpenCL program source file for custom transition. \n\n**kernel**\n\n    Set name of kernel to use for custom transition from program source file. \n\n**duration**\n\n    Set duration of video transition. \n\n**offset**\n\n    Set time of start of transition relative to first video. \n\nThe program source file must contain a kernel function with the given name,\nwhich will be run once for each plane of the output. Each run on a plane gets\nenqueued as a separate 2D global NDRange with one work-item for each pixel to\nbe generated. The global ID offset for each work-item is therefore the\ncoordinates of a pixel in the destination image.\n\nThe kernel function needs to take the following arguments:\n\n  * Destination image, __write_only image2d_t. \n\nThis image will become the output; the kernel should write all of it.\n\n  * First Source image, __read_only image2d_t. Second Source image, __read_only image2d_t. \n\nThese are the most recent images on each input. The kernel may read from them\nto generate the output, but they can\u2019t be written to.\n\n  * Transition progress, float. This value is always between 0 and 1 inclusive. \n\nExample programs:\n\n  * Apply dots curtain transition effect: \n    \n        __kernel void blend_images(__write_only image2d_t dst,\n                               __read_only  image2d_t src1,\n                               __read_only  image2d_t src2,\n                               float progress)\n    {\n        const sampler_t sampler = (CLK_NORMALIZED_COORDS_FALSE |\n                                   CLK_FILTER_LINEAR);\n        int2  p = (int2)(get_global_id(0), get_global_id(1));\n        float2 rp = (float2)(get_global_id(0), get_global_id(1));\n        float2 dim = (float2)(get_image_dim(src1).x, get_image_dim(src1).y);\n        rp = rp / dim;\n    \n        float2 dots = (float2)(20.0, 20.0);\n        float2 center = (float2)(0,0);\n        float2 unused;\n    \n        float4 val1 = read_imagef(src1, sampler, p);\n        float4 val2 = read_imagef(src2, sampler, p);\n        bool next = distance(fract(rp * dots, &unused), (float2)(0.5, 0.5)) < (progress / distance(rp, center));\n    \n        write_imagef(dst, p, next ? val1 : val2);\n    }\n    \n\n",
  "filter_type": "vf",
  "formula_input_typings": null,
  "formula_output_typings": null,
  "id": "ff_vf_xfade_opencl",
  "input_stream_typings": [
    {
      "name": "main",
      "type": "AVMEDIA_TYPE_VIDEO"
    },
    {
      "name": "xfade",
      "type": "AVMEDIA_TYPE_VIDEO"
    }
  ],
  "is_input_dynamic": false,
  "is_output_dynamic": false,
  "name": "xfade_opencl",
  "options": [
    {
      "alias": [
        "transition"
      ],
      "choices": [
        {
          "help": "custom transition",
          "name": "custom",
          "value": "CUSTOM"
        },
        {
          "help": "fade transition",
          "name": "fade",
          "value": "FADE"
        },
        {
          "help": "wipe left transition",
          "name": "wipeleft",
          "value": "WIPELEFT"
        },
        {
          "help": "wipe right transition",
          "name": "wiperight",
          "value": "WIPERIGHT"
        },
        {
          "help": "wipe up transition",
          "name": "wipeup",
          "value": "WIPEUP"
        },
        {
          "help": "wipe down transition",
          "name": "wipedown",
          "value": "WIPEDOWN"
        },
        {
          "help": "slide left transition",
          "name": "slideleft",
          "value": "SLIDELEFT"
        },
        {
          "help": "slide right transition",
          "name": "slideright",
          "value": "SLIDERIGHT"
        },
        {
          "help": "slide up transition",
          "name": "slideup",
          "value": "SLIDEUP"
        },
        {
          "help": "slide down transition",
          "name": "slidedown",
          "value": "SLIDEDOWN"
        }
      ],
      "default": 1,
      "description": "<dd><p>Set one of possible transition effects.\n</p>\n<dl compact=\"compact\">\n<dt><samp>custom</samp></dt>\n<dd><p>Select custom transition effect, the actual transition description\nwill be picked from source and kernel options.\n</p>\n</dd>\n<dt><samp>fade</samp></dt>\n<dt><samp>wipeleft</samp></dt>\n<dt><samp>wiperight</samp></dt>\n<dt><samp>wipeup</samp></dt>\n<dt><samp>wipedown</samp></dt>\n<dt><samp>slideleft</samp></dt>\n<dt><samp>slideright</samp></dt>\n<dt><samp>slideup</samp></dt>\n<dt><samp>slidedown</samp></dt>\n<dd>\n<p>Default transition is fade.\n</p></dd>\n</dl>\n</dd>",
      "name": "transition",
      "required": false,
      "typing": "int"
    },
    {
      "alias": [
        "source"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>OpenCL program source file for custom transition.\n</p>\n</dd>",
      "name": "source",
      "required": true,
      "typing": "str"
    },
    {
      "alias": [
        "kernel"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Set name of kernel to use for custom transition from program source file.\n</p>\n</dd>",
      "name": "kernel",
      "required": true,
      "typing": "str"
    },
    {
      "alias": [
        "duration"
      ],
      "choices": [],
      "default": 1000000,
      "description": "<dd><p>Set duration of video transition.\n</p>\n</dd>",
      "name": "duration",
      "required": false,
      "typing": "int"
    },
    {
      "alias": [
        "offset"
      ],
      "choices": [],
      "default": 0,
      "description": "<dd><p>Set time of start of transition relative to first video.\n</p></dd>",
      "name": "offset",
      "required": false,
      "typing": "int"
    }
  ],
  "output_stream_typings": [
    {
      "name": "default",
      "type": "AVMEDIA_TYPE_VIDEO"
    }
  ],
  "ref": "https://ffmpeg.org/ffmpeg-filters.html#xfade_005fopencl"
}
