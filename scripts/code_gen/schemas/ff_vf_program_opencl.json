{
  "description": "### 12.12 program_opencl\n\nFilter video using an OpenCL program.\n\n**source**\n\n    OpenCL program source file. \n\n**kernel**\n\n    Kernel name in program. \n\n**inputs**\n\n    Number of inputs to the filter. Defaults to 1. \n\n**size, s**\n\n    Size of output frames. Defaults to the same as the first input. \n\nThe `program_opencl` filter also supports the framesync options.\n\nThe program source file must contain a kernel function with the given name,\nwhich will be run once for each plane of the output. Each run on a plane gets\nenqueued as a separate 2D global NDRange with one work-item for each pixel to\nbe generated. The global ID offset for each work-item is therefore the\ncoordinates of a pixel in the destination image.\n\nThe kernel function needs to take the following arguments:\n\n  * Destination image, __write_only image2d_t. \n\nThis image will become the output; the kernel should write all of it.\n\n  * Frame index, unsigned int. \n\nThis is a counter starting from zero and increasing by one for each frame.\n\n  * Source images, __read_only image2d_t. \n\nThese are the most recent images on each input. The kernel may read from them\nto generate the output, but they can\u2019t be written to.\n\nExample programs:\n\n  * Copy the input to the output (output must be the same size as the input). \n    \n        __kernel void copy(__write_only image2d_t destination,\n                       unsigned int index,\n                       __read_only  image2d_t source)\n    {\n        const sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE;\n    \n        int2 location = (int2)(get_global_id(0), get_global_id(1));\n    \n        float4 value = read_imagef(source, sampler, location);\n    \n        write_imagef(destination, location, value);\n    }\n    \n\n  * Apply a simple transformation, rotating the input by an amount increasing with the index counter. Pixel values are linearly interpolated by the sampler, and the output need not have the same dimensions as the input. \n    \n        __kernel void rotate_image(__write_only image2d_t dst,\n                               unsigned int index,\n                               __read_only  image2d_t src)\n    {\n        const sampler_t sampler = (CLK_NORMALIZED_COORDS_FALSE |\n                                   CLK_FILTER_LINEAR);\n    \n        float angle = (float)index / 100.0f;\n    \n        float2 dst_dim = convert_float2(get_image_dim(dst));\n        float2 src_dim = convert_float2(get_image_dim(src));\n    \n        float2 dst_cen = dst_dim / 2.0f;\n        float2 src_cen = src_dim / 2.0f;\n    \n        int2   dst_loc = (int2)(get_global_id(0), get_global_id(1));\n    \n        float2 dst_pos = convert_float2(dst_loc) - dst_cen;\n        float2 src_pos = {\n            cos(angle) * dst_pos.x - sin(angle) * dst_pos.y,\n            sin(angle) * dst_pos.x + cos(angle) * dst_pos.y\n        };\n        src_pos = src_pos * src_dim / dst_dim;\n    \n        float2 src_loc = src_pos + src_cen;\n    \n        if (src_loc.x < 0.0f      || src_loc.y < 0.0f ||\n            src_loc.x > src_dim.x || src_loc.y > src_dim.y)\n            write_imagef(dst, dst_loc, 0.5f);\n        else\n            write_imagef(dst, dst_loc, read_imagef(src, sampler, src_loc));\n    }\n    \n\n  * Blend two inputs together, with the amount of each input used varying with the index counter. \n    \n        __kernel void blend_images(__write_only image2d_t dst,\n                               unsigned int index,\n                               __read_only  image2d_t src1,\n                               __read_only  image2d_t src2)\n    {\n        const sampler_t sampler = (CLK_NORMALIZED_COORDS_FALSE |\n                                   CLK_FILTER_LINEAR);\n    \n        float blend = (cos((float)index / 50.0f) + 1.0f) / 2.0f;\n    \n        int2  dst_loc = (int2)(get_global_id(0), get_global_id(1));\n        int2 src1_loc = dst_loc * get_image_dim(src1) / get_image_dim(dst);\n        int2 src2_loc = dst_loc * get_image_dim(src2) / get_image_dim(dst);\n    \n        float4 val1 = read_imagef(src1, sampler, src1_loc);\n        float4 val2 = read_imagef(src2, sampler, src2_loc);\n    \n        write_imagef(dst, dst_loc, val1 * blend + val2 * (1.0f - blend));\n    }\n    \n\n",
  "filter_type": "vf",
  "formula_input_typings": null,
  "formula_output_typings": null,
  "id": "ff_vf_program_opencl",
  "input_stream_typings": [],
  "is_input_dynamic": true,
  "is_output_dynamic": false,
  "is_support_framesync": true,
  "is_support_timeline": false,
  "name": "program_opencl",
  "options": [
    {
      "alias": [
        "source"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>OpenCL program source file.\n</p>\n</dd>",
      "name": "source",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "kernel"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Kernel name in program.\n</p>\n</dd>",
      "name": "kernel",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [
        "inputs"
      ],
      "choices": [],
      "default": 1,
      "description": "<dd><p>Number of inputs to the filter.  Defaults to 1.\n</p>\n</dd>",
      "name": "inputs",
      "required": false,
      "typing": "int"
    },
    {
      "alias": [
        "size",
        "s"
      ],
      "choices": [],
      "default": "((void*)0)",
      "description": "<dd><p>Size of output frames.  Defaults to the same as the first input.\n</p>\n</dd>",
      "name": "size",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [],
      "choices": [
        {
          "help": "Repeat the last frame.",
          "name": "repeat",
          "value": "repeat"
        },
        {
          "help": "End both streams.",
          "name": "endall",
          "value": "endall"
        },
        {
          "help": "Pass the main input through.",
          "name": "pass",
          "value": "pass"
        }
      ],
      "default": "repeat",
      "description": "The action to take when EOF is encountered on the secondary input; it accepts one of the following values",
      "name": "eof_action",
      "required": false,
      "typing": "str"
    },
    {
      "alias": [],
      "choices": [],
      "default": 0,
      "description": "Force the output to terminate when the shortest input terminates.",
      "name": "shortest",
      "required": false,
      "typing": "bool"
    },
    {
      "alias": [],
      "choices": [],
      "default": 1,
      "description": "force the filter to extend the last frame of secondary streams until the end of the primary stream.",
      "name": "repeatlast",
      "required": false,
      "typing": "bool"
    },
    {
      "alias": [],
      "choices": [
        {
          "help": "Frame from secondary input with the nearest lower or equal timestamp to the primary input frame.",
          "name": "default",
          "value": "default"
        },
        {
          "help": "Frame from secondary input with the absolute nearest timestamp to the primary input frame.",
          "name": "nearest",
          "value": "nearest"
        }
      ],
      "default": "default",
      "description": "How strictly to sync streams based on secondary input timestamps; it accepts one of the following values:",
      "name": "ts_sync_mode",
      "required": false,
      "typing": "str"
    }
  ],
  "output_stream_typings": [
    {
      "name": "default",
      "type": "video"
    }
  ],
  "ref": "https://ffmpeg.org/ffmpeg-filters.html#program_005fopencl"
}
