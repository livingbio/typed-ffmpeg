description: '8.85 dynaudnorm

  Dynamic Audio Normalizer.


  This filter applies a certain amount of gain to the input audio in order

  to bring its peak magnitude to a target level (e.g. 0 dBFS). However, in

  contrast to more "simple" normalization algorithms, the Dynamic Audio

  Normalizer *dynamically* re-adjusts the gain factor to the input audio.

  This allows for applying extra gain to the "quiet" sections of the audio

  while avoiding distortions or clipping the "loud" sections. In other words:

  The Dynamic Audio Normalizer will "even out" the volume of quiet and loud

  sections, in the sense that the volume of each section is brought to the

  same target level. Note, however, that the Dynamic Audio Normalizer achieves

  this goal *without* applying "dynamic range compressing". It will retain 100%

  of the dynamic range *within* each section of the audio file.'
name: dynaudnorm
parameters:
- description: '<dd><p>Set the frame length in milliseconds. In range from 10 to 8000
    milliseconds.

    Default is 500 milliseconds.

    The Dynamic Audio Normalizer processes the input audio in small chunks,

    referred to as frames. This is required, because a peak magnitude has no

    meaning for just a single sample value. Instead, we need to determine the

    peak magnitude for a contiguous sequence of sample values. While a "standard"

    normalizer would simply use the peak magnitude of the complete file, the

    Dynamic Audio Normalizer determines the peak magnitude individually for each

    frame. The length of a frame is specified in milliseconds. By default, the

    Dynamic Audio Normalizer uses a frame length of 500 milliseconds, which has

    been found to give good results with most files.

    Note that the exact frame length, in number of samples, will be determined

    automatically, based on the sampling rate of the individual input audio file.

    </p>

    </dd>'
  name: framelen, f
- description: "<dd><p>Set the Gaussian filter window size. In range from 3 to 301,\
    \ must be odd\nnumber. Default is 31.\nProbably the most important parameter of\
    \ the Dynamic Audio Normalizer is the\n<code>window size</code> of the Gaussian\
    \ smoothing filter. The filter\u2019s window size\nis specified in frames, centered\
    \ around the current frame. For the sake of\nsimplicity, this must be an odd number.\
    \ Consequently, the default value of 31\ntakes into account the current frame,\
    \ as well as the 15 preceding frames and\nthe 15 subsequent frames. Using a larger\
    \ window results in a stronger\nsmoothing effect and thus in less gain variation,\
    \ i.e. slower gain\nadaptation. Conversely, using a smaller window results in\
    \ a weaker smoothing\neffect and thus in more gain variation, i.e. faster gain\
    \ adaptation.\nIn other words, the more you increase this value, the more the\
    \ Dynamic Audio\nNormalizer will behave like a \"traditional\" normalization filter.\
    \ On the\ncontrary, the more you decrease this value, the more the Dynamic Audio\n\
    Normalizer will behave like a dynamic range compressor.\n</p>\n</dd>"
  name: gausssize, g
- description: "<dd><p>Set the target peak value. This specifies the highest permissible\
    \ magnitude\nlevel for the normalized audio input. This filter will try to approach\
    \ the\ntarget peak magnitude as closely as possible, but at the same time it also\n\
    makes sure that the normalized signal will never exceed the peak magnitude.\n\
    A frame\u2019s maximum local gain factor is imposed directly by the target peak\n\
    magnitude. The default value is 0.95 and thus leaves a headroom of 5%*.\nIt is\
    \ not recommended to go above this value.\n</p>\n</dd>"
  name: peak, p
- description: "<dd><p>Set the maximum gain factor. In range from 1.0 to 100.0. Default\
    \ is 10.0.\nThe Dynamic Audio Normalizer determines the maximum possible (local)\
    \ gain\nfactor for each input frame, i.e. the maximum gain factor that does not\n\
    result in clipping or distortion. The maximum gain factor is determined by\nthe\
    \ frame\u2019s highest magnitude sample. However, the Dynamic Audio Normalizer\n\
    additionally bounds the frame\u2019s maximum gain factor by a predetermined\n\
    (global) maximum gain factor. This is done in order to avoid excessive gain\n\
    factors in \"silent\" or almost silent frames. By default, the maximum gain\n\
    factor is 10.0, For most inputs the default value should be sufficient and\nit\
    \ usually is not recommended to increase this value. Though, for input\nwith an\
    \ extremely low overall volume level, it may be necessary to allow even\nhigher\
    \ gain factors. Note, however, that the Dynamic Audio Normalizer does\nnot simply\
    \ apply a \"hard\" threshold (i.e. cut off values above the threshold).\nInstead,\
    \ a \"sigmoid\" threshold function will be applied. This way, the\ngain factors\
    \ will smoothly approach the threshold value, but never exceed that\nvalue.\n\
    </p>\n</dd>"
  name: maxgain, m
- description: "<dd><p>Set the target RMS. In range from 0.0 to 1.0. Default is 0.0\
    \ - disabled.\nBy default, the Dynamic Audio Normalizer performs \"peak\" normalization.\n\
    This means that the maximum local gain factor for each frame is defined\n(only)\
    \ by the frame\u2019s highest magnitude sample. This way, the samples can\nbe\
    \ amplified as much as possible without exceeding the maximum signal\nlevel, i.e.\
    \ without clipping. Optionally, however, the Dynamic Audio\nNormalizer can also\
    \ take into account the frame\u2019s root mean square,\nabbreviated RMS. In electrical\
    \ engineering, the RMS is commonly used to\ndetermine the power of a time-varying\
    \ signal. It is therefore considered\nthat the RMS is a better approximation of\
    \ the \"perceived loudness\" than\njust looking at the signal\u2019s peak magnitude.\
    \ Consequently, by adjusting all\nframes to a constant RMS value, a uniform \"\
    perceived loudness\" can be\nestablished. If a target RMS value has been specified,\
    \ a frame\u2019s local gain\nfactor is defined as the factor that would result\
    \ in exactly that RMS value.\nNote, however, that the maximum local gain factor\
    \ is still restricted by the\nframe\u2019s highest magnitude sample, in order\
    \ to prevent clipping.\n</p>\n</dd>"
  name: targetrms, r
- description: "<dd><p>Enable channels coupling. By default is enabled.\nBy default,\
    \ the Dynamic Audio Normalizer will amplify all channels by the same\namount.\
    \ This means the same gain factor will be applied to all channels, i.e.\nthe maximum\
    \ possible gain factor is determined by the \"loudest\" channel.\nHowever, in\
    \ some recordings, it may happen that the volume of the different\nchannels is\
    \ uneven, e.g. one channel may be \"quieter\" than the other one(s).\nIn this\
    \ case, this option can be used to disable the channel coupling. This way,\nthe\
    \ gain factor will be determined independently for each channel, depending\nonly\
    \ on the individual channel\u2019s highest magnitude sample. This allows for\n\
    harmonizing the volume of the different channels.\n</p>\n</dd>"
  name: coupling, n
- description: "<dd><p>Enable DC bias correction. By default is disabled.\nAn audio\
    \ signal (in the time domain) is a sequence of sample values.\nIn the Dynamic\
    \ Audio Normalizer these sample values are represented in the\n-1.0 to 1.0 range,\
    \ regardless of the original input format. Normally, the\naudio signal, or \"\
    waveform\", should be centered around the zero point.\nThat means if we calculate\
    \ the mean value of all samples in a file, or in a\nsingle frame, then the result\
    \ should be 0.0 or at least very close to that\nvalue. If, however, there is a\
    \ significant deviation of the mean value from\n0.0, in either positive or negative\
    \ direction, this is referred to as a\nDC bias or DC offset. Since a DC bias is\
    \ clearly undesirable, the Dynamic\nAudio Normalizer provides optional DC bias\
    \ correction.\nWith DC bias correction enabled, the Dynamic Audio Normalizer will\
    \ determine\nthe mean value, or \"DC correction\" offset, of each input frame\
    \ and subtract\nthat value from all of the frame\u2019s sample values which ensures\
    \ those samples\nare centered around 0.0 again. Also, in order to avoid \"gaps\"\
    \ at the frame\nboundaries, the DC correction offset values will be interpolated\
    \ smoothly\nbetween neighbouring frames.\n</p>\n</dd>"
  name: correctdc, c
- description: '<dd><p>Enable alternative boundary mode. By default is disabled.

    The Dynamic Audio Normalizer takes into account a certain neighbourhood

    around each frame. This includes the preceding frames as well as the

    subsequent frames. However, for the "boundary" frames, located at the very

    beginning and at the very end of the audio file, not all neighbouring

    frames are available. In particular, for the first few frames in the audio

    file, the preceding frames are not known. And, similarly, for the last few

    frames in the audio file, the subsequent frames are not known. Thus, the

    question arises which gain factors should be assumed for the missing frames

    in the "boundary" region. The Dynamic Audio Normalizer implements two modes

    to deal with this situation. The default boundary mode assumes a gain factor

    of exactly 1.0 for the missing frames, resulting in a smooth "fade in" and

    "fade out" at the beginning and at the end of the input, respectively.

    </p>

    </dd>'
  name: altboundary, b
- description: "<dd><p>Set the compress factor. In range from 0.0 to 30.0. Default\
    \ is 0.0.\nBy default, the Dynamic Audio Normalizer does not apply \"traditional\"\
    \ncompression. This means that signal peaks will not be pruned and thus the\n\
    full dynamic range will be retained within each local neighbourhood. However,\n\
    in some cases it may be desirable to combine the Dynamic Audio Normalizer\u2019\
    s\nnormalization algorithm with a more \"traditional\" compression.\nFor this\
    \ purpose, the Dynamic Audio Normalizer provides an optional compression\n(thresholding)\
    \ function. If (and only if) the compression feature is enabled,\nall input frames\
    \ will be processed by a soft knee thresholding function prior\nto the actual\
    \ normalization process. Put simply, the thresholding function is\ngoing to prune\
    \ all samples whose magnitude exceeds a certain threshold value.\nHowever, the\
    \ Dynamic Audio Normalizer does not simply apply a fixed threshold\nvalue. Instead,\
    \ the threshold value will be adjusted for each individual\nframe.\nIn general,\
    \ smaller parameters result in stronger compression, and vice versa.\nValues below\
    \ 3.0 are not recommended, because audible distortion may appear.\n</p>\n</dd>"
  name: compress, s
- description: '<dd><p>Set the target threshold value. This specifies the lowest permissible

    magnitude level for the audio input which will be normalized.

    If input frame volume is above this value frame will be normalized.

    Otherwise frame may not be normalized at all. The default value is set

    to 0, which means all input frames will be normalized.

    This option is mostly useful if digital noise is not wanted to be amplified.

    </p>

    </dd>'
  name: threshold, t
- description: '<dd><p>Specify which channels to filter, by default all available
    channels are filtered.

    </p>

    </dd>'
  name: channels, h
- description: '<dd><p>Specify overlap for frames. If set to 0 (default) no frame
    overlapping is done.

    Using &gt;0 and &lt;1 values will make less conservative gain adjustments, like

    when framelen option is set to smaller value, if framelen option value is

    compensated for non-zero overlap then gain adjustments will be smoother across
    time

    compared to zero overlap case.

    </p>

    </dd>'
  name: overlap, o
- description: '<dd><p>Specify the peak mapping curve expression which is going to
    be used when calculating

    gain applied to frames. The max output frame gain will still be limited by other

    options mentioned previously for this filter.

    </p>

    <p>The expression can contain the following constants:

    </p>

    <dl compact="compact">

    <dt><samp>ch</samp></dt>

    <dd><p>current channel number

    </p>

    </dd>

    <dt><samp>sn</samp></dt>

    <dd><p>current sample number

    </p>

    </dd>

    <dt><samp>nb_channels</samp></dt>

    <dd><p>number of channels

    </p>

    </dd>

    <dt><samp>t</samp></dt>

    <dd><p>timestamp expressed in seconds

    </p>

    </dd>

    <dt><samp>sr</samp></dt>

    <dd><p>sample rate

    </p>

    </dd>

    <dt><samp>p</samp></dt>

    <dd><p>current frame peak value

    </p></dd>

    </dl>

    </dd>'
  name: curve, v
ref: https://ffmpeg.org/ffmpeg-filters.html#dynaudnorm
source: '<h3 class="section"><a href="#toc-dynaudnorm">8.85 dynaudnorm</a></h3>

  <p>Dynamic Audio Normalizer.

  </p>

  <p>This filter applies a certain amount of gain to the input audio in order

  to bring its peak magnitude to a target level (e.g. 0 dBFS). However, in

  contrast to more &quot;simple&quot; normalization algorithms, the Dynamic Audio

  Normalizer *dynamically* re-adjusts the gain factor to the input audio.

  This allows for applying extra gain to the &quot;quiet&quot; sections of the audio

  while avoiding distortions or clipping the &quot;loud&quot; sections. In other words:

  The Dynamic Audio Normalizer will &quot;even out&quot; the volume of quiet and loud

  sections, in the sense that the volume of each section is brought to the

  same target level. Note, however, that the Dynamic Audio Normalizer achieves

  this goal *without* applying &quot;dynamic range compressing&quot;. It will retain
  100%

  of the dynamic range *within* each section of the audio file.

  </p>

  <dl compact="compact">

  <dt><samp>framelen, f</samp></dt>

  <dd><p>Set the frame length in milliseconds. In range from 10 to 8000 milliseconds.

  Default is 500 milliseconds.

  The Dynamic Audio Normalizer processes the input audio in small chunks,

  referred to as frames. This is required, because a peak magnitude has no

  meaning for just a single sample value. Instead, we need to determine the

  peak magnitude for a contiguous sequence of sample values. While a &quot;standard&quot;

  normalizer would simply use the peak magnitude of the complete file, the

  Dynamic Audio Normalizer determines the peak magnitude individually for each

  frame. The length of a frame is specified in milliseconds. By default, the

  Dynamic Audio Normalizer uses a frame length of 500 milliseconds, which has

  been found to give good results with most files.

  Note that the exact frame length, in number of samples, will be determined

  automatically, based on the sampling rate of the individual input audio file.

  </p>

  </dd>

  <dt><samp>gausssize, g</samp></dt>

  <dd><p>Set the Gaussian filter window size. In range from 3 to 301, must be odd

  number. Default is 31.

  Probably the most important parameter of the Dynamic Audio Normalizer is the

  <code>window size</code> of the Gaussian smoothing filter. The filter&rsquo;s window
  size

  is specified in frames, centered around the current frame. For the sake of

  simplicity, this must be an odd number. Consequently, the default value of 31

  takes into account the current frame, as well as the 15 preceding frames and

  the 15 subsequent frames. Using a larger window results in a stronger

  smoothing effect and thus in less gain variation, i.e. slower gain

  adaptation. Conversely, using a smaller window results in a weaker smoothing

  effect and thus in more gain variation, i.e. faster gain adaptation.

  In other words, the more you increase this value, the more the Dynamic Audio

  Normalizer will behave like a &quot;traditional&quot; normalization filter. On the

  contrary, the more you decrease this value, the more the Dynamic Audio

  Normalizer will behave like a dynamic range compressor.

  </p>

  </dd>

  <dt><samp>peak, p</samp></dt>

  <dd><p>Set the target peak value. This specifies the highest permissible magnitude

  level for the normalized audio input. This filter will try to approach the

  target peak magnitude as closely as possible, but at the same time it also

  makes sure that the normalized signal will never exceed the peak magnitude.

  A frame&rsquo;s maximum local gain factor is imposed directly by the target peak

  magnitude. The default value is 0.95 and thus leaves a headroom of 5%*.

  It is not recommended to go above this value.

  </p>

  </dd>

  <dt><samp>maxgain, m</samp></dt>

  <dd><p>Set the maximum gain factor. In range from 1.0 to 100.0. Default is 10.0.

  The Dynamic Audio Normalizer determines the maximum possible (local) gain

  factor for each input frame, i.e. the maximum gain factor that does not

  result in clipping or distortion. The maximum gain factor is determined by

  the frame&rsquo;s highest magnitude sample. However, the Dynamic Audio Normalizer

  additionally bounds the frame&rsquo;s maximum gain factor by a predetermined

  (global) maximum gain factor. This is done in order to avoid excessive gain

  factors in &quot;silent&quot; or almost silent frames. By default, the maximum gain

  factor is 10.0, For most inputs the default value should be sufficient and

  it usually is not recommended to increase this value. Though, for input

  with an extremely low overall volume level, it may be necessary to allow even

  higher gain factors. Note, however, that the Dynamic Audio Normalizer does

  not simply apply a &quot;hard&quot; threshold (i.e. cut off values above the threshold).

  Instead, a &quot;sigmoid&quot; threshold function will be applied. This way, the

  gain factors will smoothly approach the threshold value, but never exceed that

  value.

  </p>

  </dd>

  <dt><samp>targetrms, r</samp></dt>

  <dd><p>Set the target RMS. In range from 0.0 to 1.0. Default is 0.0 - disabled.

  By default, the Dynamic Audio Normalizer performs &quot;peak&quot; normalization.

  This means that the maximum local gain factor for each frame is defined

  (only) by the frame&rsquo;s highest magnitude sample. This way, the samples can

  be amplified as much as possible without exceeding the maximum signal

  level, i.e. without clipping. Optionally, however, the Dynamic Audio

  Normalizer can also take into account the frame&rsquo;s root mean square,

  abbreviated RMS. In electrical engineering, the RMS is commonly used to

  determine the power of a time-varying signal. It is therefore considered

  that the RMS is a better approximation of the &quot;perceived loudness&quot; than

  just looking at the signal&rsquo;s peak magnitude. Consequently, by adjusting all

  frames to a constant RMS value, a uniform &quot;perceived loudness&quot; can be

  established. If a target RMS value has been specified, a frame&rsquo;s local gain

  factor is defined as the factor that would result in exactly that RMS value.

  Note, however, that the maximum local gain factor is still restricted by the

  frame&rsquo;s highest magnitude sample, in order to prevent clipping.

  </p>

  </dd>

  <dt><samp>coupling, n</samp></dt>

  <dd><p>Enable channels coupling. By default is enabled.

  By default, the Dynamic Audio Normalizer will amplify all channels by the same

  amount. This means the same gain factor will be applied to all channels, i.e.

  the maximum possible gain factor is determined by the &quot;loudest&quot; channel.

  However, in some recordings, it may happen that the volume of the different

  channels is uneven, e.g. one channel may be &quot;quieter&quot; than the other one(s).

  In this case, this option can be used to disable the channel coupling. This way,

  the gain factor will be determined independently for each channel, depending

  only on the individual channel&rsquo;s highest magnitude sample. This allows for

  harmonizing the volume of the different channels.

  </p>

  </dd>

  <dt><samp>correctdc, c</samp></dt>

  <dd><p>Enable DC bias correction. By default is disabled.

  An audio signal (in the time domain) is a sequence of sample values.

  In the Dynamic Audio Normalizer these sample values are represented in the

  -1.0 to 1.0 range, regardless of the original input format. Normally, the

  audio signal, or &quot;waveform&quot;, should be centered around the zero point.

  That means if we calculate the mean value of all samples in a file, or in a

  single frame, then the result should be 0.0 or at least very close to that

  value. If, however, there is a significant deviation of the mean value from

  0.0, in either positive or negative direction, this is referred to as a

  DC bias or DC offset. Since a DC bias is clearly undesirable, the Dynamic

  Audio Normalizer provides optional DC bias correction.

  With DC bias correction enabled, the Dynamic Audio Normalizer will determine

  the mean value, or &quot;DC correction&quot; offset, of each input frame and subtract

  that value from all of the frame&rsquo;s sample values which ensures those samples

  are centered around 0.0 again. Also, in order to avoid &quot;gaps&quot; at the frame

  boundaries, the DC correction offset values will be interpolated smoothly

  between neighbouring frames.

  </p>

  </dd>

  <dt><samp>altboundary, b</samp></dt>

  <dd><p>Enable alternative boundary mode. By default is disabled.

  The Dynamic Audio Normalizer takes into account a certain neighbourhood

  around each frame. This includes the preceding frames as well as the

  subsequent frames. However, for the &quot;boundary&quot; frames, located at the
  very

  beginning and at the very end of the audio file, not all neighbouring

  frames are available. In particular, for the first few frames in the audio

  file, the preceding frames are not known. And, similarly, for the last few

  frames in the audio file, the subsequent frames are not known. Thus, the

  question arises which gain factors should be assumed for the missing frames

  in the &quot;boundary&quot; region. The Dynamic Audio Normalizer implements two
  modes

  to deal with this situation. The default boundary mode assumes a gain factor

  of exactly 1.0 for the missing frames, resulting in a smooth &quot;fade in&quot;
  and

  &quot;fade out&quot; at the beginning and at the end of the input, respectively.

  </p>

  </dd>

  <dt><samp>compress, s</samp></dt>

  <dd><p>Set the compress factor. In range from 0.0 to 30.0. Default is 0.0.

  By default, the Dynamic Audio Normalizer does not apply &quot;traditional&quot;

  compression. This means that signal peaks will not be pruned and thus the

  full dynamic range will be retained within each local neighbourhood. However,

  in some cases it may be desirable to combine the Dynamic Audio Normalizer&rsquo;s

  normalization algorithm with a more &quot;traditional&quot; compression.

  For this purpose, the Dynamic Audio Normalizer provides an optional compression

  (thresholding) function. If (and only if) the compression feature is enabled,

  all input frames will be processed by a soft knee thresholding function prior

  to the actual normalization process. Put simply, the thresholding function is

  going to prune all samples whose magnitude exceeds a certain threshold value.

  However, the Dynamic Audio Normalizer does not simply apply a fixed threshold

  value. Instead, the threshold value will be adjusted for each individual

  frame.

  In general, smaller parameters result in stronger compression, and vice versa.

  Values below 3.0 are not recommended, because audible distortion may appear.

  </p>

  </dd>

  <dt><samp>threshold, t</samp></dt>

  <dd><p>Set the target threshold value. This specifies the lowest permissible

  magnitude level for the audio input which will be normalized.

  If input frame volume is above this value frame will be normalized.

  Otherwise frame may not be normalized at all. The default value is set

  to 0, which means all input frames will be normalized.

  This option is mostly useful if digital noise is not wanted to be amplified.

  </p>

  </dd>

  <dt><samp>channels, h</samp></dt>

  <dd><p>Specify which channels to filter, by default all available channels are filtered.

  </p>

  </dd>

  <dt><samp>overlap, o</samp></dt>

  <dd><p>Specify overlap for frames. If set to 0 (default) no frame overlapping is
  done.

  Using &gt;0 and &lt;1 values will make less conservative gain adjustments, like

  when framelen option is set to smaller value, if framelen option value is

  compensated for non-zero overlap then gain adjustments will be smoother across time

  compared to zero overlap case.

  </p>

  </dd>

  <dt><samp>curve, v</samp></dt>

  <dd><p>Specify the peak mapping curve expression which is going to be used when
  calculating

  gain applied to frames. The max output frame gain will still be limited by other

  options mentioned previously for this filter.

  </p>

  <p>The expression can contain the following constants:

  </p>

  <dl compact="compact">

  <dt><samp>ch</samp></dt>

  <dd><p>current channel number

  </p>

  </dd>

  <dt><samp>sn</samp></dt>

  <dd><p>current sample number

  </p>

  </dd>

  <dt><samp>nb_channels</samp></dt>

  <dd><p>number of channels

  </p>

  </dd>

  <dt><samp>t</samp></dt>

  <dd><p>timestamp expressed in seconds

  </p>

  </dd>

  <dt><samp>sr</samp></dt>

  <dd><p>sample rate

  </p>

  </dd>

  <dt><samp>p</samp></dt>

  <dd><p>current frame peak value

  </p></dd>

  </dl>

  </dd>

  </dl>


  '
