{
  "description": "8.89 firequalizer\nApply FIR Equalization using arbitrary frequency response.\n\nThe filter accepts the following option:",
  "json_schema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "properties": {
      "accuracy": {
        "default": 5,
        "description": "Set filter accuracy in Hz.",
        "type": "number"
      },
      "delay": {
        "default": 0.01,
        "description": "Set filter delay in seconds.",
        "type": "number"
      },
      "dumpfile": {
        "description": "Set file for dumping, suitable for gnuplot.",
        "type": "string"
      },
      "dumpscale": {
        "default": "linlog",
        "description": "Set scale for dumpfile.",
        "enum": [
          "linlin",
          "linlog",
          "loglin",
          "loglog"
        ],
        "type": "string"
      },
      "fft2": {
        "default": false,
        "description": "Enable 2-channel convolution using complex FFT.",
        "type": "boolean"
      },
      "fixed": {
        "default": false,
        "description": "If enabled, use fixed number of audio samples.",
        "type": "boolean"
      },
      "gain": {
        "default": "gain_interpolate(f)",
        "description": "Set gain curve equation (in dB).",
        "type": "string"
      },
      "gain_entry": {
        "description": "Set gain entry for gain_interpolate function.",
        "type": "string"
      },
      "min_phase": {
        "default": false,
        "description": "Enable minimum phase impulse response.",
        "type": "boolean"
      },
      "multi": {
        "default": false,
        "description": "Enable multichannels evaluation on gain.",
        "type": "boolean"
      },
      "scale": {
        "default": "linlog",
        "description": "Set scale used by gain.",
        "enum": [
          "linlin",
          "linlog",
          "loglin",
          "loglog"
        ],
        "type": "string"
      },
      "wfunc": {
        "default": "hann",
        "description": "Set window function.",
        "enum": [
          "rectangular",
          "hann",
          "hamming",
          "blackman",
          "nuttall3",
          "mnuttall3",
          "nuttall",
          "bnuttall",
          "bharris",
          "tukey"
        ],
        "type": "string"
      },
      "zero_phase": {
        "default": false,
        "description": "Enable zero phase mode by subtracting timestamp to compensate delay.",
        "type": "boolean"
      }
    },
    "required": [],
    "title": "firequalizer options",
    "type": "object"
  },
  "name": "firequalizer",
  "parameters": [
    {
      "description": "<dd><p>Set gain curve equation (in dB). The expression can contain variables:\n</p><dl compact=\"compact\">\n<dt><samp>f</samp></dt>\n<dd><p>the evaluated frequency\n</p></dd>\n<dt><samp>sr</samp></dt>\n<dd><p>sample rate\n</p></dd>\n<dt><samp>ch</samp></dt>\n<dd><p>channel number, set to 0 when multichannels evaluation is disabled\n</p></dd>\n<dt><samp>chid</samp></dt>\n<dd><p>channel id, see libavutil/channel_layout.h, set to the first channel id when\nmultichannels evaluation is disabled\n</p></dd>\n<dt><samp>chs</samp></dt>\n<dd><p>number of channels\n</p></dd>\n<dt><samp>chlayout</samp></dt>\n<dd><p>channel_layout, see libavutil/channel_layout.h\n</p>\n</dd>\n</dl>\n<p>and functions:\n</p><dl compact=\"compact\">\n<dt><samp>gain_interpolate(f)</samp></dt>\n<dd><p>interpolate gain on frequency f based on gain_entry\n</p></dd>\n<dt><samp>cubic_interpolate(f)</samp></dt>\n<dd><p>same as gain_interpolate, but smoother\n</p></dd>\n</dl>\n<p>This option is also available as command. Default is <code>gain_interpolate(f)</code>.\n</p>\n</dd>",
      "name": "gain"
    },
    {
      "description": "<dd><p>Set gain entry for gain_interpolate function. The expression can\ncontain functions:\n</p><dl compact=\"compact\">\n<dt><samp>entry(f, g)</samp></dt>\n<dd><p>store gain entry at frequency f with value g\n</p></dd>\n</dl>\n<p>This option is also available as command.\n</p>\n</dd>",
      "name": "gain_entry"
    },
    {
      "description": "<dd><p>Set filter delay in seconds. Higher value means more accurate.\nDefault is <code>0.01</code>.\n</p>\n</dd>",
      "name": "delay"
    },
    {
      "description": "<dd><p>Set filter accuracy in Hz. Lower value means more accurate.\nDefault is <code>5</code>.\n</p>\n</dd>",
      "name": "accuracy"
    },
    {
      "description": "<dd><p>Set window function. Acceptable values are:\n</p><dl compact=\"compact\">\n<dt><samp>rectangular</samp></dt>\n<dd><p>rectangular window, useful when gain curve is already smooth\n</p></dd>\n<dt><samp>hann</samp></dt>\n<dd><p>hann window (default)\n</p></dd>\n<dt><samp>hamming</samp></dt>\n<dd><p>hamming window\n</p></dd>\n<dt><samp>blackman</samp></dt>\n<dd><p>blackman window\n</p></dd>\n<dt><samp>nuttall3</samp></dt>\n<dd><p>3-terms continuous 1st derivative nuttall window\n</p></dd>\n<dt><samp>mnuttall3</samp></dt>\n<dd><p>minimum 3-terms discontinuous nuttall window\n</p></dd>\n<dt><samp>nuttall</samp></dt>\n<dd><p>4-terms continuous 1st derivative nuttall window\n</p></dd>\n<dt><samp>bnuttall</samp></dt>\n<dd><p>minimum 4-terms discontinuous nuttall (blackman-nuttall) window\n</p></dd>\n<dt><samp>bharris</samp></dt>\n<dd><p>blackman-harris window\n</p></dd>\n<dt><samp>tukey</samp></dt>\n<dd><p>tukey window\n</p></dd>\n</dl>\n</dd>",
      "name": "wfunc"
    },
    {
      "description": "<dd><p>If enabled, use fixed number of audio samples. This improves speed when\nfiltering with large delay. Default is disabled.\n</p>\n</dd>",
      "name": "fixed"
    },
    {
      "description": "<dd><p>Enable multichannels evaluation on gain. Default is disabled.\n</p>\n</dd>",
      "name": "multi"
    },
    {
      "description": "<dd><p>Enable zero phase mode by subtracting timestamp to compensate delay.\nDefault is disabled.\n</p>\n</dd>",
      "name": "zero_phase"
    },
    {
      "description": "<dd><p>Set scale used by gain. Acceptable values are:\n</p><dl compact=\"compact\">\n<dt><samp>linlin</samp></dt>\n<dd><p>linear frequency, linear gain\n</p></dd>\n<dt><samp>linlog</samp></dt>\n<dd><p>linear frequency, logarithmic (in dB) gain (default)\n</p></dd>\n<dt><samp>loglin</samp></dt>\n<dd><p>logarithmic (in octave scale where 20 Hz is 0) frequency, linear gain\n</p></dd>\n<dt><samp>loglog</samp></dt>\n<dd><p>logarithmic frequency, logarithmic gain\n</p></dd>\n</dl>\n</dd>",
      "name": "scale"
    },
    {
      "description": "<dd><p>Set file for dumping, suitable for gnuplot.\n</p>\n</dd>",
      "name": "dumpfile"
    },
    {
      "description": "<dd><p>Set scale for dumpfile. Acceptable values are same with scale option.\nDefault is linlog.\n</p>\n</dd>",
      "name": "dumpscale"
    },
    {
      "description": "<dd><p>Enable 2-channel convolution using complex FFT. This improves speed significantly.\nDefault is disabled.\n</p>\n</dd>",
      "name": "fft2"
    },
    {
      "description": "<dd><p>Enable minimum phase impulse response. Default is disabled.\n</p></dd>",
      "name": "min_phase"
    }
  ],
  "ref": "https://ffmpeg.org/ffmpeg-filters.html#firequalizer",
  "source": "<h3 class=\"section\"><a href=\"#toc-firequalizer\">8.89 firequalizer</a></h3>\n<p>Apply FIR Equalization using arbitrary frequency response.\n</p>\n<p>The filter accepts the following option:\n</p>\n<dl compact=\"compact\">\n<dt><samp>gain</samp></dt>\n<dd><p>Set gain curve equation (in dB). The expression can contain variables:\n</p><dl compact=\"compact\">\n<dt><samp>f</samp></dt>\n<dd><p>the evaluated frequency\n</p></dd>\n<dt><samp>sr</samp></dt>\n<dd><p>sample rate\n</p></dd>\n<dt><samp>ch</samp></dt>\n<dd><p>channel number, set to 0 when multichannels evaluation is disabled\n</p></dd>\n<dt><samp>chid</samp></dt>\n<dd><p>channel id, see libavutil/channel_layout.h, set to the first channel id when\nmultichannels evaluation is disabled\n</p></dd>\n<dt><samp>chs</samp></dt>\n<dd><p>number of channels\n</p></dd>\n<dt><samp>chlayout</samp></dt>\n<dd><p>channel_layout, see libavutil/channel_layout.h\n</p>\n</dd>\n</dl>\n<p>and functions:\n</p><dl compact=\"compact\">\n<dt><samp>gain_interpolate(f)</samp></dt>\n<dd><p>interpolate gain on frequency f based on gain_entry\n</p></dd>\n<dt><samp>cubic_interpolate(f)</samp></dt>\n<dd><p>same as gain_interpolate, but smoother\n</p></dd>\n</dl>\n<p>This option is also available as command. Default is <code>gain_interpolate(f)</code>.\n</p>\n</dd>\n<dt><samp>gain_entry</samp></dt>\n<dd><p>Set gain entry for gain_interpolate function. The expression can\ncontain functions:\n</p><dl compact=\"compact\">\n<dt><samp>entry(f, g)</samp></dt>\n<dd><p>store gain entry at frequency f with value g\n</p></dd>\n</dl>\n<p>This option is also available as command.\n</p>\n</dd>\n<dt><samp>delay</samp></dt>\n<dd><p>Set filter delay in seconds. Higher value means more accurate.\nDefault is <code>0.01</code>.\n</p>\n</dd>\n<dt><samp>accuracy</samp></dt>\n<dd><p>Set filter accuracy in Hz. Lower value means more accurate.\nDefault is <code>5</code>.\n</p>\n</dd>\n<dt><samp>wfunc</samp></dt>\n<dd><p>Set window function. Acceptable values are:\n</p><dl compact=\"compact\">\n<dt><samp>rectangular</samp></dt>\n<dd><p>rectangular window, useful when gain curve is already smooth\n</p></dd>\n<dt><samp>hann</samp></dt>\n<dd><p>hann window (default)\n</p></dd>\n<dt><samp>hamming</samp></dt>\n<dd><p>hamming window\n</p></dd>\n<dt><samp>blackman</samp></dt>\n<dd><p>blackman window\n</p></dd>\n<dt><samp>nuttall3</samp></dt>\n<dd><p>3-terms continuous 1st derivative nuttall window\n</p></dd>\n<dt><samp>mnuttall3</samp></dt>\n<dd><p>minimum 3-terms discontinuous nuttall window\n</p></dd>\n<dt><samp>nuttall</samp></dt>\n<dd><p>4-terms continuous 1st derivative nuttall window\n</p></dd>\n<dt><samp>bnuttall</samp></dt>\n<dd><p>minimum 4-terms discontinuous nuttall (blackman-nuttall) window\n</p></dd>\n<dt><samp>bharris</samp></dt>\n<dd><p>blackman-harris window\n</p></dd>\n<dt><samp>tukey</samp></dt>\n<dd><p>tukey window\n</p></dd>\n</dl>\n\n</dd>\n<dt><samp>fixed</samp></dt>\n<dd><p>If enabled, use fixed number of audio samples. This improves speed when\nfiltering with large delay. Default is disabled.\n</p>\n</dd>\n<dt><samp>multi</samp></dt>\n<dd><p>Enable multichannels evaluation on gain. Default is disabled.\n</p>\n</dd>\n<dt><samp>zero_phase</samp></dt>\n<dd><p>Enable zero phase mode by subtracting timestamp to compensate delay.\nDefault is disabled.\n</p>\n</dd>\n<dt><samp>scale</samp></dt>\n<dd><p>Set scale used by gain. Acceptable values are:\n</p><dl compact=\"compact\">\n<dt><samp>linlin</samp></dt>\n<dd><p>linear frequency, linear gain\n</p></dd>\n<dt><samp>linlog</samp></dt>\n<dd><p>linear frequency, logarithmic (in dB) gain (default)\n</p></dd>\n<dt><samp>loglin</samp></dt>\n<dd><p>logarithmic (in octave scale where 20 Hz is 0) frequency, linear gain\n</p></dd>\n<dt><samp>loglog</samp></dt>\n<dd><p>logarithmic frequency, logarithmic gain\n</p></dd>\n</dl>\n\n</dd>\n<dt><samp>dumpfile</samp></dt>\n<dd><p>Set file for dumping, suitable for gnuplot.\n</p>\n</dd>\n<dt><samp>dumpscale</samp></dt>\n<dd><p>Set scale for dumpfile. Acceptable values are same with scale option.\nDefault is linlog.\n</p>\n</dd>\n<dt><samp>fft2</samp></dt>\n<dd><p>Enable 2-channel convolution using complex FFT. This improves speed significantly.\nDefault is disabled.\n</p>\n</dd>\n<dt><samp>min_phase</samp></dt>\n<dd><p>Enable minimum phase impulse response. Default is disabled.\n</p></dd>\n</dl>\n\n"
}
