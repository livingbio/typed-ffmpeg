description: "12.18 xfade_opencl\nCross fade two videos with custom transition effect\
  \ by using OpenCL.\n\nIt accepts the following options:\n\n\nThe program source\
  \ file must contain a kernel function with the given name,\nwhich will be run once\
  \ for each plane of the output.  Each run on a plane\ngets enqueued as a separate\
  \ 2D global NDRange with one work-item for each\npixel to be generated.  The global\
  \ ID offset for each work-item is therefore\nthe coordinates of a pixel in the destination\
  \ image.\n\nThe kernel function needs to take the following arguments:\n\n Destination\
  \ image, __write_only image2d_t.\n\nThis image will become the output; the kernel\
  \ should write all of it.\n\n First Source image, __read_only image2d_t.\nSecond\
  \ Source image, __read_only image2d_t.\n\nThese are the most recent images on each\
  \ input.  The kernel may read from\nthem to generate the output, but they can\u2019\
  t be written to.\n\n Transition progress, float. This value is always between 0\
  \ and 1 inclusive.\n\nExample programs:\n\n\n Apply dots curtain transition effect:\n\
  __kernel void blend_images(__write_only image2d_t dst,\n                       \
  \    __read_only  image2d_t src1,\n                           __read_only  image2d_t\
  \ src2,\n                           float progress)\n{\n    const sampler_t sampler\
  \ = (CLK_NORMALIZED_COORDS_FALSE |\n                               CLK_FILTER_LINEAR);\n\
  \    int2  p = (int2)(get_global_id(0), get_global_id(1));\n    float2 rp = (float2)(get_global_id(0),\
  \ get_global_id(1));\n    float2 dim = (float2)(get_image_dim(src1).x, get_image_dim(src1).y);\n\
  \    rp = rp / dim;\n\n    float2 dots = (float2)(20.0, 20.0);\n    float2 center\
  \ = (float2)(0,0);\n    float2 unused;\n\n    float4 val1 = read_imagef(src1, sampler,\
  \ p);\n    float4 val2 = read_imagef(src2, sampler, p);\n    bool next = distance(fract(rp\
  \ * dots, &unused), (float2)(0.5, 0.5)) < (progress / distance(rp, center));\n\n\
  \    write_imagef(dst, p, next ? val1 : val2);\n}"
name: xfade_opencl
parameters:
- description: '<dd><p>Set one of possible transition effects.

    </p>

    <dl compact="compact">

    <dt><samp>custom</samp></dt>

    <dd><p>Select custom transition effect, the actual transition description

    will be picked from source and kernel options.

    </p>

    </dd>

    <dt><samp>fade</samp></dt>

    <dt><samp>wipeleft</samp></dt>

    <dt><samp>wiperight</samp></dt>

    <dt><samp>wipeup</samp></dt>

    <dt><samp>wipedown</samp></dt>

    <dt><samp>slideleft</samp></dt>

    <dt><samp>slideright</samp></dt>

    <dt><samp>slideup</samp></dt>

    <dt><samp>slidedown</samp></dt>

    <dd>

    <p>Default transition is fade.

    </p></dd>

    </dl>

    </dd>'
  name: transition
- description: '<dd><p>OpenCL program source file for custom transition.

    </p>

    </dd>'
  name: source
- description: '<dd><p>Set name of kernel to use for custom transition from program
    source file.

    </p>

    </dd>'
  name: kernel
- description: '<dd><p>Set duration of video transition.

    </p>

    </dd>'
  name: duration
- description: '<dd><p>Set time of start of transition relative to first video.

    </p></dd>'
  name: offset
ref: https://ffmpeg.org/ffmpeg-filters.html#xfade_005fopencl
source: "<h3 class=\"section\"><a href=\"#toc-xfade_005fopencl\">12.18 xfade_opencl</a></h3>\n\
  \n<p>Cross fade two videos with custom transition effect by using OpenCL.\n</p>\n\
  <p>It accepts the following options:\n</p>\n<dl compact=\"compact\">\n<dt><samp>transition</samp></dt>\n\
  <dd><p>Set one of possible transition effects.\n</p>\n<dl compact=\"compact\">\n\
  <dt><samp>custom</samp></dt>\n<dd><p>Select custom transition effect, the actual\
  \ transition description\nwill be picked from source and kernel options.\n</p>\n\
  </dd>\n<dt><samp>fade</samp></dt>\n<dt><samp>wipeleft</samp></dt>\n<dt><samp>wiperight</samp></dt>\n\
  <dt><samp>wipeup</samp></dt>\n<dt><samp>wipedown</samp></dt>\n<dt><samp>slideleft</samp></dt>\n\
  <dt><samp>slideright</samp></dt>\n<dt><samp>slideup</samp></dt>\n<dt><samp>slidedown</samp></dt>\n\
  <dd>\n<p>Default transition is fade.\n</p></dd>\n</dl>\n\n</dd>\n<dt><samp>source</samp></dt>\n\
  <dd><p>OpenCL program source file for custom transition.\n</p>\n</dd>\n<dt><samp>kernel</samp></dt>\n\
  <dd><p>Set name of kernel to use for custom transition from program source file.\n\
  </p>\n</dd>\n<dt><samp>duration</samp></dt>\n<dd><p>Set duration of video transition.\n\
  </p>\n</dd>\n<dt><samp>offset</samp></dt>\n<dd><p>Set time of start of transition\
  \ relative to first video.\n</p></dd>\n</dl>\n\n<p>The program source file must\
  \ contain a kernel function with the given name,\nwhich will be run once for each\
  \ plane of the output.  Each run on a plane\ngets enqueued as a separate 2D global\
  \ NDRange with one work-item for each\npixel to be generated.  The global ID offset\
  \ for each work-item is therefore\nthe coordinates of a pixel in the destination\
  \ image.\n</p>\n<p>The kernel function needs to take the following arguments:\n\
  </p><ul>\n<li> Destination image, <var>__write_only image2d_t</var>.\n\n<p>This\
  \ image will become the output; the kernel should write all of it.\n</p>\n</li><li>\
  \ First Source image, <var>__read_only image2d_t</var>.\nSecond Source image, <var>__read_only\
  \ image2d_t</var>.\n\n<p>These are the most recent images on each input.  The kernel\
  \ may read from\nthem to generate the output, but they can&rsquo;t be written to.\n\
  </p>\n</li><li> Transition progress, <var>float</var>. This value is always between\
  \ 0 and 1 inclusive.\n</li></ul>\n\n<p>Example programs:\n</p>\n<ul>\n<li> Apply\
  \ dots curtain transition effect:\n<pre class=\"verbatim\">__kernel void blend_images(__write_only\
  \ image2d_t dst,\n                           __read_only  image2d_t src1,\n    \
  \                       __read_only  image2d_t src2,\n                         \
  \  float progress)\n{\n    const sampler_t sampler = (CLK_NORMALIZED_COORDS_FALSE\
  \ |\n                               CLK_FILTER_LINEAR);\n    int2  p = (int2)(get_global_id(0),\
  \ get_global_id(1));\n    float2 rp = (float2)(get_global_id(0), get_global_id(1));\n\
  \    float2 dim = (float2)(get_image_dim(src1).x, get_image_dim(src1).y);\n    rp\
  \ = rp / dim;\n\n    float2 dots = (float2)(20.0, 20.0);\n    float2 center = (float2)(0,0);\n\
  \    float2 unused;\n\n    float4 val1 = read_imagef(src1, sampler, p);\n    float4\
  \ val2 = read_imagef(src2, sampler, p);\n    bool next = distance(fract(rp * dots,\
  \ &amp;unused), (float2)(0.5, 0.5)) &lt; (progress / distance(rp, center));\n\n\
  \    write_imagef(dst, p, next ? val1 : val2);\n}\n</pre>\n</li></ul>\n\n\n"
